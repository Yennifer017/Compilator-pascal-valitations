
package compi2.pascal.valitations.analysis;

import java_cup.runtime.*;
import java.util.*;

import compi2.pascal.valitations.analysis.typet.*;
import compi2.pascal.valitations.analyzator.*;
import compi2.pascal.valitations.semantic.expr.*;
import compi2.pascal.valitations.semantic.obj.*;
import compi2.pascal.valitations.semantic.ast.*;
import compi2.pascal.valitations.util.Position;


/*-----------------------------------------------------------
  CUP Specification for the Parser Class
  -----------------------------------------------------------*/
parser code {:
    //fields
    Lexer lex;
    private List<String> syntaxErrors;
    private GenTypeTab genTypeTab;
    private GenSymbolTab genSymbolTab;
    private AstGen astGen;

    //conect the parser with the lexer
    public Parser(Lexer lex){
        super(lex);
        syntaxErrors = new LinkedList<>();
        genTypeTab = new GenTypeTab();
        genSymbolTab = new GenSymbolTab();
        astGen = new AstGen();
    }

    //getters
    public Lexer getLexer(){
        return this.lex;
    }
    public List<String> getSyntaxErrors(){
        return this.syntaxErrors;
    }
    
    /*SOBREESCRIBIR LOS METODOS DE ERROR*/
    public void syntax_error(Symbol cur_token) {
        String mss = "Simbolo: " + symbl_name_from_id(cur_token.sym)
                    + ", linea: " + cur_token.left
                    + ", columna: " + cur_token.right;
        if (expected_token_ids().isEmpty()) {
            mss += " -- ya no se esperaba ningun simbolo";
        }
        syntaxErrors.add(mss);
    }
    public void unrecovered_syntax_error(Symbol cur_token) {
        syntaxErrors.add("Errores de sintaxis severos detectados, revisa municiosamente el codigo");
    }
:}

/*---------------------------------------
             Declarations
-----------------------------------------*/
/* Terminals (tokens returned by the scanner). */
terminal            PLUS, MINUS, TIMES, BARRA,
                    LLAVE_L, LLAVE_R, PARENTESIS_L, PARENTESIS_R, CORCHETE_L, CORCHETE_R, ACENT,
                    EQUALS, DIFFERENT, GRATER, LESS, GRATER_EQUALS, LESS_EQUALS,
                    ASSIGNATION, COMA, DOT, SEMICOLON, COLON,
                    AND, ARRAY, BEGIN, CASE, CONST, DIV, DO,
                    DOWNTO, ELSE, END, FILE, FOR, FUNCTION, GOTO,
                    IF, IN, LABEL, MOD, NIL, NOT, OF,
                    OR, PACKED, PROCEDURE, PROGRAM, RECORD, REPEAT, SET,
                    THEN, TO, TYPE, UNTIL, VAR, WHILE, WITH,
                    INTEGER, REAL, BOOLEAN, CHAR, STRING, LONGINT,
                    REAL_LIT, STRING_LIT,
                    WRITELN, READLN, RETURN, BREAK, CONTINUE,
                    UMINUS, COND
                    ;
terminal String     ID;
terminal Character  CHAR_LIT;
terminal Integer    INTEGER_LIT;
terminal boolean    BOOLEAN_LIT;

/* Non-terminals */
non terminal        s, header,
                    if_stmt,
                    case_block, labels,
                    functions_b, functions, function_dec,
                    procedure_b, procedures, procedure_dec,
                    arguments, type_arg,
                    single_stm, else_block, elif, complex_else,
                    block_cond
                    ;

non terminal List<Label> id_list, list_access
                    ;
non terminal Label var_type
                    ;
non terminal List<DefAst> type_b, list_typedec, type_dec,
                    more_records, record_b,
                    const_b, list_constdec,
                    list_vardec, var_b, var_dec
                    ;
non terminal DefAst def_record,
                    const_dec
                    ;
non terminal Expression expression, bool_exp, arit_exp, literals
                    ;
non terminal List<Expression> expression_list
                    ;
non terminal Range range, arr_range
                    ;
non terminal Statement simple_stmt, complex_stmt
                    ;
non terminal List<Statement> list_stmts, more_stmts, block_stmt, statements,
                    main
                    ;
non terminal WhileAst while_stmt
                    ;
non terminal ForAst for_stmt
                    ;
non terminal RepeatAst repeat_stmt
                    ;
non terminal CaseAst case_stmt
                    ;   
non terminal IfAst conditional
                    ;
non terminal FunctionUseStmt definite_fun, writefn, readfn
                    ;

/*----------------------------------------
            Precedences
-----------------------------------------*/

/*booleanos*/
precedence left THEN;
precedence left ELSE;
precedence left OR;
precedence left AND;
precedence left NOT;

/*operaciones*/
precedence left PLUS, MINUS;
precedence left TIMES, DIV, BARRA, MOD;
precedence right UMINUS;

precedence right SEMICOLON;
precedence right DOT;

precedence left IF;
precedence left ELSE;

/* --------------------------------------
            The grammar 
-----------------------------------------*/
start with s;
s ::=   header 
        type_b:lt
        const_b:lc 
        var_b:lv
        functions_b
        procedure_b
        main:ls
        {:
            TypeTable typeTable = genTypeTab.generateTable(true, lt);
        :}
        ;
        
header ::= PROGRAM ID SEMICOLON;

/*-------------------------------------- UTILITIES --------------------------------*/
var_type ::= INTEGER:t  
                    {: 
                        RESULT = new Label(
                            PrimitiveType.IntegerPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    :}
            | REAL:t    
                    {: 
                        RESULT = new Label(
                            PrimitiveType.RealPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    :}
            | LONGINT:t
                    {:
                        RESULT = new Label(
                            PrimitiveType.LongintPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    :}
            | BOOLEAN:t 
                    {: 
                        RESULT = new Label(
                            PrimitiveType.BooleanPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    :}
            | CHAR:t    
                    {: 
                        RESULT = new Label(
                            PrimitiveType.CharPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    :}
            | STRING:t  
                    {: 
                        RESULT = new Label(
                            PrimitiveType.StringPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    :}
            | ID:t  
                    {: 
                        RESULT = new Label(
                            t, 
                            new Position(tleft, tright)
                        ); 
                    :}
            ;

id_list ::= id_list:l COMA ID:i
                    {:
                        l.add(new Label(i, new Position(ileft, iright)));
                        RESULT = l;
                    :}

            | ID:i      
                    {:
                        List<Label> list = new ArrayList<>();
                        list.add(new Label(i, new Position(ileft, iright)));
                        RESULT = list;
                    :}
            ;

range ::= expression:e1 DOT DOT DOT expression:e2
                    {:
                        RESULT = new Range(e1, e2);
                    :}
            ;

arr_range ::= CORCHETE_L expression:e1 DOT DOT expression:e2 CORCHETE_R
                    {:
                         RESULT = new Range(e1, e2);
                    :}
            ;

list_access ::=  list_access:l DOT ID:i 
                    {:
                        l.add(new Label(i, new Position(ileft, iright)));
                        RESULT = l;
                    :}
            | ID:i
                    {:
                        ArrayList<Label> access = new ArrayList<>();
                        access.add(new Label(i, new Position(ileft, iright)));
                        RESULT = access;
                    :}
            ;

record_b ::= def_record:d more_records:l
                    {:
                        l.add(0, d);
                        RESULT = l;
                    :}
            ;

def_record ::= ID:i COLON var_type:t SEMICOLON
                    {:
                        RESULT = new SingleDef(new Label(i, new Position(ileft, iright)), t);
                    :}
            | ID:i COLON PACKED ARRAY arr_range:r OF var_type:t SEMICOLON
                    {:
                        RESULT = new ArrayDef(new Label(i, new Position(ileft, iright)), t, r);
                    :}
            ;

more_records ::= def_record:d more_records:l
                    {:
                        l.add(0, d);
                        RESULT = l;
                    :}
            | /* empty */
                    {:
                        RESULT = new LinkedList<DefAst>();
                    :}
            ;


expression_list ::= expression_list:l COMA expression:e
                    {:
                        l.add(e);
                        RESULT = l;
                    :}
            | expression:e
                    {:
                        LinkedList<Expression> list = new LinkedList<Expression>();
                        list.add(e);
                        RESULT = list;
                    :}
            ;

/*---------------------------------- TYPES BLOCK -------------------------------------*/
type_b ::= TYPE list_typedec:l
                    {:
                        RESULT = l; 
                    :}
            | /* empty */
                    {:
                        RESULT = new ArrayList<DefAst>();
                    :}
            ;

list_typedec ::= type_dec:l1 list_typedec:l2
                    {:
                        l1.addAll(l2);
                        RESULT = l1;
                    :}
            | type_dec:l
                    {:
                        RESULT = l;
                    :}
            ;

type_dec ::=  id_list:l EQUALS var_type:t SEMICOLON 
                    {:
                        RESULT = genTypeTab.userDef(l, t);
                    :}
            | id_list:l EQUALS range:r SEMICOLON
                    {:
                        RESULT = genTypeTab.rangeDef(l, r);
                    :}
            | id_list:l EQUALS ARRAY arr_range:r OF var_type:t SEMICOLON
                    {:
                        RESULT = genTypeTab.arrayDef(l, t, r);
                    :}
            | id_list:ids EQUALS RECORD record_b:l END SEMICOLON 
                    {:
                        RESULT = genTypeTab.recordDef(ids, l);
                    :}
            ;


/*-------------------------------------- CONST BLOCK ---------------------------------*/
const_b ::= CONST list_constdec:l
                    {:
                        RESULT = l;
                    :}
            | /* empty */
                    {:  RESULT = new LinkedList<DefAst>();   :}
            ;

list_constdec ::= list_constdec:l const_dec:d
                    {:
                        l.add(d);
                        RESULT = l;
                    :}
            | const_dec:d
                    {:
                        LinkedList<DefAst> list = new LinkedList<>();
                        list.add(d);
                        RESULT = list;
                    :}
            ;

const_dec ::= ID:i EQUALS expression:e SEMICOLON
                    {:
                        RESULT = new ConstDef(
                            new Label(i, new Position(ileft, iright)),
                            e
                        );
                    :}
            ;


/*-------------------------------------- VARIABLES BLOCK -------------------------------*/
var_b ::= VAR list_vardec:l
                    {:
                        RESULT = l;
                    :}
            | /* emtpy */
                    {:
                        RESULT = new LinkedList<DefAst>();
                    :}
            ;

list_vardec ::= list_vardec:l var_dec:dl
                    {:
                        l.addAll(dl);
                        RESULT = l;
                    :}
            | var_dec:l
                    {:
                        RESULT = l;
                    :}
            ;

var_dec ::= id_list:l COLON var_type:t SEMICOLON
                    {:
                        RESULT = genTypeTab.userDef(l, t);
                    :}
            | id_list:l COLON range:r SEMICOLON
                    {:
                        RESULT = genTypeTab.rangeDef(l, r);
                    :}
            | id_list:l COLON ARRAY arr_range:r OF var_type:t SEMICOLON
                    {:
                        RESULT = genTypeTab.arrayDef(l, t, r);
                    :}
            | id_list:ids EQUALS RECORD record_b:l END SEMICOLON
                    {:
                        RESULT = genTypeTab.recordDef(ids, l);
                    :}
            ;


/*---------------------------------- EXPRESSION BLOCK -------------------------------------*/

expression ::= expression:e1 AND:o expression:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.And, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | expression:e1 AND:o THEN expression:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.AndThen, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | expression:e1 OR:o expression:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.Or, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | expression:e1 OR:o ELSE expression:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.OrElse, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | NOT:o expression:e
                    {:
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Not,
                            e,
                            new Position(oleft, oright)
                        );
                    :}
            | bool_exp:e
                    {:
                        RESULT = e;
                    :}
            ;

bool_exp ::= arit_exp:e1 EQUALS:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.EqualsTo, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | arit_exp:e1 DIFFERENT:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.DifferentTo, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | arit_exp:e1 GRATER:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.GraterThan, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | arit_exp:e1 LESS:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.LessThan, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | arit_exp:e1 GRATER_EQUALS:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.GraterEq, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | arit_exp:e1 LESS_EQUALS:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.LessEq, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | arit_exp:e
                    {:
                        RESULT = e;
                    :}
            ;

arit_exp ::= arit_exp:e1 PLUS:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.Addition, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | arit_exp:e1 MINUS:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.Substraction, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | arit_exp:e1 TIMES:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.Multiplication, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | arit_exp:e1 DIV:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.IntDivision, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | arit_exp:e1 BARRA:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.Division, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | arit_exp:e1 MOD:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.Module, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | literals:e
                    {:
                        RESULT = e;
                    :}
            | ID:i CORCHETE_L arit_exp:e CORCHETE_R
                    {:
                        RESULT = new VectorUse(
                            i, e, new Position(ileft, iright)
                        );
                    :}
            | ID:i DOT list_access:l
                    {:
                        l.add(0, new Label(i, new Position(ileft, iright)));
                        RESULT = new RecordUse(l);
                    :}
            | ID:i PARENTESIS_L expression_list:l PARENTESIS_R
                    {:
                        RESULT = new FunctionUse(
                            i, l, new Position(ileft, iright)
                        );
                    :}
            | ID:i
                    {:
                        RESULT = new SingleExp(
                            i, new Position(ileft,iright)
                        );
                    :}
            %prec UMINUS
            | PARENTESIS_L expression:e PARENTESIS_R
                    {:
                        RESULT = e;
                    :}
            %prec UMINUS
            | PLUS:o arit_exp:e
                    {:
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Addition,
                            e,
                            new Position(oleft, oright)
                        );
                    :}
            %prec UMINUS
            | MINUS:o arit_exp:e
                    {:
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Substraction,
                            e,
                            new Position(oleft, oright)
                        );
                    :}
            ;

literals ::= BOOLEAN_LIT:l
                    {:
                        RESULT = new SingleExp(
                            PrimitiveType.BooleanPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    :}
            | INTEGER_LIT:l
                    {:
                        RESULT = new SingleExp(
                            PrimitiveType.IntegerPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    :}
            | REAL_LIT:l
                    {:
                        RESULT = new SingleExp(
                            PrimitiveType.RealPT, 
                            new Position(lleft, lright)
                        );
                    :}
            | CHAR_LIT:l
                    {:
                        RESULT = new SingleExp(
                            PrimitiveType.CharPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    :}
            | STRING_LIT:l
                    {:
                        RESULT = new SingleExp(
                            PrimitiveType.StringPT, 
                            new Position(lleft, lright)
                        );
                    :}
            ;


/*------------------------------------------- STATEMENTS BLOCK ------------------------------*/

/************************* conditionals *****************************/
conditional ::=
          if_stmt block_cond
        | if_stmt block_cond SEMICOLON
        | if_stmt block_cond ELSE elif
        ;

if_stmt ::= IF PARENTESIS_L expression PARENTESIS_R THEN
        ;
block_cond ::= simple_stmt
        | complex_stmt
        | BEGIN block_stmt END
        ;
elif ::= else_block SEMICOLON
        | conditional
        ;

else_block ::= complex_else
        | simple_stmt
        | BEGIN block_stmt END
        ;

complex_else ::= case_stmt:s
                {:  RESULT = s; :}
        | while_stmt:s
                {:  RESULT = s; :}
        | for_stmt:s
                {:  RESULT = s; :}
        | repeat_stmt:s
                {:  RESULT = s; :}
        ;

/************************* case *****************************/

case_stmt ::= CASE PARENTESIS_L expression PARENTESIS_R OF case_block ELSE single_stm END SEMICOLON
        ;

case_block ::= labels COLON single_stm SEMICOLON
        ;

labels ::= labels COMA expression
        | expression
        ;

single_stm ::= ID ASSIGNATION expression        /*POSIBLE CHANGEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE*/
        | ID PARENTESIS_L expression_list PARENTESIS_R
        | ID DOT ID
        | definite_fun
        ;

/************************* ciclos *****************************/

while_stmt ::= WHILE PARENTESIS_L expression:e PARENTESIS_R DO statements:l
                {:
                    RESULT = new WhileAst(e, l);
                :}
        ;

for_stmt ::= FOR ID:i ASSIGNATION expression:e1 TO expression:e2 DO statements:l
                {:
                    Range range = new Range(e1, e2);
                    Label variable = new Label(i, new Position(ileft, iright));
                    RESULT = new ForAst(variable, range, l);
                :}
        ;

repeat_stmt ::= REPEAT statements:l UNTIL expression:e
                {:
                    RESULT = new RepeatAst(e, l);
                :}
        ;

/************************* statements *****************************/
statements ::= simple_stmt:s SEMICOLON
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        | complex_stmt:s
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        | BEGIN block_stmt:l END SEMICOLON
                {:
                    RESULT = l;
                :}
        ;

block_stmt ::= list_stmts:l
                {:  RESULT = l; :}
        | /* empty */
                {:
                    RESULT = new LinkedList<Statement>();
                :}
        ;

list_stmts ::= simple_stmt:s
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        | simple_stmt:s SEMICOLON
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        | complex_stmt:s
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        | simple_stmt:s SEMICOLON more_stmts:l
                {:
                    l.add(0, s);
                    RESULT = l;
                :}
        | complex_stmt:s more_stmts:l
                {:
                    l.add(0, s);
                    RESULT = l;
                :}
        ;

more_stmts ::= simple_stmt:s
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        | simple_stmt:s SEMICOLON
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        | simple_stmt:s SEMICOLON more_stmts:l
                {:
                    l.add(0, s);
                    RESULT = l;
                :}
        | complex_stmt:s more_stmts:l
                {:
                    l.add(0, s);
                    RESULT = l;
                :}
        | complex_stmt:s
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        ;

simple_stmt ::= BREAK
                {:  
                    RESULT = new SimpleStruct(SimpleStruct.BREAK);  
                :}
        | CONTINUE
                {:  
                    RESULT = new SimpleStruct(SimpleStruct.CONTINUE);  
                :}
        | ID:i ASSIGNATION expression:e
                {:  
                    RESULT = new Assignation(
                        new Label(i, new Position(ileft, iright)), e
                    );
                :}
        | ID:i PARENTESIS_L expression_list:el PARENTESIS_R
                {:
                    RESULT = new FunctionUseStmt(
                        new Label(i, new Position(ileft, iright)),
                        el
                    );
                :}
        | ID:i DOT list_access:l ASSIGNATION expression:e 
                {:
                    l.add(0, new Label(i, new Position(ileft, iright)));
                    RESULT = new RecAssignation(l, e);
                :}
        | definite_fun:fu
                {: RESULT = fu; :}
        ; 

complex_stmt ::= conditional:s
                {:  RESULT = s; :}
        | case_stmt:s
                {:  RESULT = s; :}
        | while_stmt:s
                {:  RESULT = s; :}
        | for_stmt:s
                {:  RESULT = s; :}
        | repeat_stmt:s
                {:  RESULT = s; :}
        ;

/*-------------------- FUNCTIONS -------------------------*/

functions_b ::= functions
        | /* empty */
        ;

functions ::= functions function_dec
        ;

function_dec ::= FUNCTION ID PARENTESIS_L arguments PARENTESIS_R COLON var_type SEMICOLON
            var_b
            BEGIN block_stmt END SEMICOLON
        ;

/*-------------------------------------- PROCEDURES ----------------------------------*/

procedure_b ::= procedures
        | /* empty */
        ;

procedures ::= procedures procedure_dec
        | procedure_dec
        ;

procedure_dec ::= PROCEDURE ID PARENTESIS_L arguments PARENTESIS_R SEMICOLON
            var_b
            BEGIN block_stmt END SEMICOLON
        ;

/*---------------------------------- PARAMS / ARGUMENTS ----------------------------------*/
arguments ::= arguments COMA type_arg
        | type_arg
        | /* empty */
        ;

type_arg ::= VAR id_list COLON var_type
        | id_list COLON var_type
        ;

/*----------------------------------- MAIN SECTION -------------------------------------*/
main ::= BEGIN block_stmt:l END DOT
                {:  RESULT = l;  :}
        ;



/*---------------------------------------- OTHERS ---------------------------------------*/
definite_fun ::= writefn:fu    {: RESULT = fu;  :}
        | readfn:fu            {: RESULT = fu;  :}
        ;

writefn ::= WRITELN PARENTESIS_L expression_list:el PARENTESIS_R
                {:
                    RESULT = new FunctionUseStmt(el);
                :}
        ;
readfn ::= READLN PARENTESIS_L expression_list:el PARENTESIS_R
                {:
                    RESULT = new FunctionUseStmt(el);
                :}
        ;
