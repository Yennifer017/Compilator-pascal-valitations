
package compi2.pascal.valitations.analysis;

import java_cup.runtime.*;
import java.util.*;


/*-----------------------------------------------------------
  CUP Specification for the Parser Class
  -----------------------------------------------------------*/
parser code {:
    //fields
    Lexer lex;
    private List<String> syntaxErrors;
    private Analyzator analyzator;

    //conect the parser with the lexer
    public Parser(Lexer lex){
        super(lex);
        syntaxErrors = new LinkedList<>();
        analyzator = new Analyzator();
    }

    //getters
    public Lexer getLexer(){
        return this.lex;
    }
    public List<String> getSyntaxErrors(){
        return this.syntaxErrors;
    }
    
    /*SOBREESCRIBIR LOS METODOS DE ERROR*/
    public void syntax_error(Symbol cur_token) {
        String mss = "Simbolo: " + symbl_name_from_id(cur_token.sym)
                    + ", linea: " + cur_token.left
                    + ", columna: " + cur_token.right;
        if (expected_token_ids().isEmpty()) {
            mss += " -- ya no se esperaba ningun simbolo";
        }
        syntaxErrors.add(mss);
    }
    public void unrecovered_syntax_error(Symbol cur_token) {
        syntaxErrors.add("Errores de sintaxis severos detectados, revisa municiosamente el codigo");
    }
:}

/*---------------------------------------
             Declarations
-----------------------------------------*/
/* Terminals (tokens returned by the scanner). */
terminal            PLUS, MINUS, TIMES, BARRA,
                    LLAVE_L, LLAVE_R, PARENTESIS_L, PARENTESIS_R, CORCHETE_L, CORCHETE_R, ACENT,
                    EQUALS, DIFFERENT, GRATER, LESS, GRATER_EQUALS, LESS_EQUALS,
                    ASSIGNATION, COMA, DOT, SEMICOLON, COLON,
                    AND, ARRAY, BEGIN, CASE, CONST, DIV, DO,
                    DOWNTO, ELSE, END, FILE, FOR, FUNCTION, GOTO,
                    IF, IN, LABEL, MOD, NIL, NOT, OF,
                    OR, PACKED, PROCEDURE, PROGRAM, RECORD, REPEAT, SET,
                    THEN, TO, TYPE, UNTIL, VAR, WHILE, WITH,
                    INTEGER, REAL, BOOLEAN, CHAR, STRING,
                    INTEGER_LIT, BOOLEAN_LIT, REAL_LIT, STRING_LIT, CHAR_LIT,
                    WRITELN, READLN, RETURN, BREAK, CONTINUE,
                    UMINUS, COND
                    ;
terminal String     ID;

/* Non-terminals */
non terminal        s, header,
                    range, arr_range, record_b, expression_list,
                    type_b, type_dec,
                    const_b, const_dec,
                    var_b, var_dec,
                    expression, bool_exp,  arit_exp, literals,
                    conditional, if_stmt, elif_stmt, else_stmt, pos_if, pos_elif, statements_wc,
                    case_stmt, case_block, labels, single_stm,
                    while_stmt, for_stmt, repeat_stmt,
                    statements, block_stmt, stmt,
                    functions_b, functions, function_dec,
                    procedure_b, procedures, procedure_dec,
                    arguments, type_arg,
                    main,
                    definite_fun, writefn, readfn,
                    list_stmts, more_stmts,

                    simple_stmt, complex_stmt, single_stmt, list_vardec,
                    def_record,more_records, list_typedec, list_constdec
                    ;

non terminal List<Id> id_list
                    ;
non terminal VarType var_type
                    ;

/*----------------------------------------
            Precedences
-----------------------------------------*/

/*booleanos*/
precedence left THEN;
precedence left ELSE;
precedence left OR;
precedence left AND;
precedence left NOT;

/*operaciones*/
precedence left PLUS, MINUS;
precedence left TIMES, DIV, MOD;
precedence right UMINUS;

precedence right SEMICOLON;

/* --------------------------------------
            The grammar 
-----------------------------------------*/
start with s;
s ::=   header 
        type_b
        const_b 
        var_b
        functions_b
        procedure_b
        main
        ;
        
header ::= PROGRAM ID SEMICOLON;

/*------------------- UTILITIES --------------------*/
var_type ::= INTEGER:s   {: 
                        RESULT = new VarType(
                            PrimitiveType.IntegerPT.getIdType(), 
                            new Position(sright, sleft)); 
                        :}
            | REAL:s    {: 
                        RESULT = new VarType(
                            PrimitiveType.RealPT.getIdType(), 
                            new Position(sright, sleft)); 
                        :}
            | BOOLEAN:s {: 
                        RESULT = new VarType(
                            PrimitiveType.BooleanPT.getIdType(), 
                            new Position(sright, sleft)); 
                        :}
            | CHAR:s    {: 
                        RESULT = new VarType(
                            PrimitiveType.CharPT.getIdType(), 
                            new Position(sright, sleft)); 
                        :}
            | STRING:s  {: 
                        RESULT = new VarType(
                            PrimitiveType.StringPT.getIdType(), 
                            new Position(sright, sleft)); 
                        :}
            | ID:i      {: 
                        RESULT = new VarType(
                            i), 
                            new Position(iright, ileft)); 
                        :}
            ;

id_list ::= id_list:l COMA ID:i
                    {:
                        l.add(new Id(i, new Position(iright, ileft)));
                        RESULT = list;
                    :}

            | ID:i      
                    {:
                        List<Id> list = new ArrayList<>();
                        list.add(new Id(i, new Position(iright, ileft)));
                        RESULT = list;
                    :}
            ;

range ::= expression DOT DOT DOT expression
            ;

arr_range ::= CORCHETE_L expression DOT DOT expression CORCHETE_R
            ;

record_b ::= def_record more_records
            ;

def_record ::= ID COLON var_type SEMICOLON
            | ID COLON PACKED ARRAY arr_range OF var_type SEMICOLON
            ;

more_records ::= def_record more_records
            | /* empty */
            ;


expression_list ::= expression_list COMA expression
            | expression
            ;

/*------------------- TYPES BLOCK --------------------*/
type_b ::= TYPE list_typedec
            | /* empty */
            ;

list_typedec ::= type_dec list_typedec
            | type_dec
            ;

type_dec ::=  id_list:l EQUALS var_type:vt SEMICOLON 
                    {:
                        //HEREEEEEEEEEEEEEEEEEEEEEEEEEEEEE
                    :}
            | id_list:l EQUALS range SEMICOLON
            | id_list:l EQUALS ARRAY arr_range OF var_type SEMICOLON
            | id_list:l EQUALS RECORD record_b END SEMICOLON 
            ;


/*------------------- CONST BLOCK --------------------*/
const_b ::= CONST list_constdec
            | /* empty */
            ;

list_constdec ::= const_dec list_constdec
            | const_dec
            ;

const_dec ::= const_dec ID EQUALS expression SEMICOLON
            ;


/*------------------- VARIABLES BLOCK --------------------*/
var_b ::= VAR list_vardec
            | /* emtpy */
            ;

list_vardec ::= list_vardec var_dec
            | var_dec
            ;

var_dec ::= id_list COLON var_type SEMICOLON
            | id_list COLON range SEMICOLON
            | id_list COLON ARRAY arr_range OF var_type SEMICOLON
            | id_list EQUALS RECORD record_b END SEMICOLON
            ;


/*-------------------- EXPRESSION BLOCK -------------------------*/

expression ::= expression AND expression
            | expression AND THEN expression
            | expression OR expression
            | expression OR ELSE expression
            | expression NOT expression
            | bool_exp
            ;

bool_exp ::= arit_exp EQUALS arit_exp
            | arit_exp DIFFERENT arit_exp
            | arit_exp GRATER arit_exp
            | arit_exp LESS arit_exp
            | arit_exp GRATER_EQUALS arit_exp
            | arit_exp LESS_EQUALS arit_exp
            | arit_exp
            ;

arit_exp ::=
              arit_exp PLUS arit_exp
            | arit_exp MINUS arit_exp
            | arit_exp TIMES arit_exp
            | arit_exp DIV arit_exp
            | arit_exp MOD arit_exp
            | literals
            | ID CORCHETE_L arit_exp CORCHETE_R
            | ID DOT ID
            | ID PARENTESIS_L id_list PARENTESIS_R
            | ID
            %prec UMINUS
            | PARENTESIS_L expression PARENTESIS_R
            ;


literals ::= BOOLEAN_LIT
            | INTEGER_LIT
            | REAL_LIT
            | CHAR_LIT
            | STRING_LIT
            ;


/*-------------------- STATEMENTS BLOCK -------------------------*/

/************************* conditionals *****************************/

conditional ::= if_stmt pos_if
        ;
if_stmt ::= IF PARENTESIS_L expression PARENTESIS_R THEN
        ;

pos_if ::= simple_stmt elif_stmt
        | simple_stmt SEMICOLON
        | complex_stmt
        | BEGIN block_stmt END SEMICOLON
        | BEGIN block_stmt END elif_stmt
        ;

elif_stmt ::= elif_stmt ELSE IF PARENTESIS_L expression PARENTESIS_R THEN pos_elif
        | ELSE IF PARENTESIS_L expression PARENTESIS_R THEN pos_elif
        | else_stmt
        ;

pos_elif ::= simple_stmt else_stmt
        | simple_stmt SEMICOLON
        | BEGIN block_stmt END SEMICOLON
        | BEGIN block_stmt END else_stmt
        ;

else_stmt ::= ELSE statements_wc
        | /* empty */
        ;

statements_wc ::= simple_stmt SEMICOLON
        | BEGIN block_stmt END SEMICOLON
        ;

/************************* case *****************************/

case_stmt ::= CASE PARENTESIS_L expression PARENTESIS_R OF case_block ELSE single_stm END SEMICOLON
        ;

case_block ::= labels COLON single_stm SEMICOLON
        ;

labels ::= labels COMA expression
        | expression
        ;

single_stm ::= ID ASSIGNATION expression
        | ID PARENTESIS_L expression_list PARENTESIS_R
        | ID DOT ID
        | definite_fun
        ;

/************************* ciclos *****************************/

while_stmt ::= WHILE PARENTESIS_L expression PARENTESIS_R DO statements
        ;

for_stmt ::= FOR ID ASSIGNATION expression TO expression DO statements
        ;

repeat_stmt ::= REPEAT statements UNTIL expression SEMICOLON
        ;

/************************* statements *****************************/
statements ::= simple_stmt
        | simple_stmt SEMICOLON
        | complex_stmt
        | BEGIN block_stmt END SEMICOLON
        ;

block_stmt ::= list_stmts
        | /* empty */
        ;

list_stmts ::= simple_stmt
        | simple_stmt SEMICOLON
        | complex_stmt
        | simple_stmt SEMICOLON more_stmts
        | complex_stmt more_stmts
        ;

more_stmts ::= simple_stmt
        | simple_stmt SEMICOLON
        | simple_stmt SEMICOLON more_stmts
        | complex_stmt more_stmts
        | complex_stmt
        ;

simple_stmt ::= BREAK
        | CONTINUE
        | ID ASSIGNATION expression
        | ID PARENTESIS_L expression_list PARENTESIS_R
        | ID DOT ID ASSIGNATION expression
        | definite_fun
        ; 

complex_stmt ::= conditional
        | case_stmt
        | while_stmt
        | for_stmt
        | repeat_stmt
        ;

/*-------------------- FUNCTIONS -------------------------*/

functions_b ::= functions
        | /* empty */
        ;

functions ::= functions function_dec
        ;

function_dec ::= function_dec FUNCTION ID PARENTESIS_L arguments PARENTESIS_R COLON var_type SEMICOLON
            var_b
            BEGIN block_stmt END SEMICOLON
        ;

/*-------------------- PROCEDURES -------------------------*/

procedure_b ::= procedures
        | /* empty */
        ;

procedures ::= procedures procedure_dec
        | procedure_dec
        ;

procedure_dec ::= PROCEDURE ID PARENTESIS_L arguments PARENTESIS_R SEMICOLON
            var_b
            BEGIN block_stmt END SEMICOLON
        ;

/*-------------------- PARAMS / ARGUMENTS -------------------------*/
arguments ::= arguments COMA type_arg
        | type_arg
        | /* empty */
        ;

type_arg ::= VAR id_list COLON var_type
        | id_list COLON var_type
        ;

/*-------------------- MAIN SECTION -------------------------*/
main ::= BEGIN block_stmt END DOT
        ;

/*-------------------- OTHERS -------------------------*/
definite_fun ::= writefn
        | readfn
        ;

writefn ::= WRITELN PARENTESIS_L expression_list PARENTESIS_R
        ;
readfn ::= READLN PARENTESIS_L expression_list PARENTESIS_R
        ;
