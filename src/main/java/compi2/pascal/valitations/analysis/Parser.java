
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compi2.pascal.valitations.analysis;

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\002\011\000\002\003" +
    "\005\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\005\000\002\005\003\000\002\006\007\000\002" +
    "\007\010\000\002\010\006\000\002\010\012\000\002\011" +
    "\005\000\002\011\003\000\002\012\004\000\002\012\002" +
    "\000\002\013\006\000\002\013\006\000\002\013\011\000" +
    "\002\013\010\000\002\014\004\000\002\014\002\000\002" +
    "\015\007\000\002\016\004\000\002\016\002\000\002\017" +
    "\006\000\002\017\006\000\002\017\011\000\002\017\010" +
    "\000\002\020\005\000\002\020\006\000\002\020\005\000" +
    "\002\020\006\000\002\020\005\000\002\020\003\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\003" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\003\000\002" +
    "\022\006\000\002\022\005\000\002\022\006\000\002\022" +
    "\003\000\002\022\005\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\024\004\000\002\025\007\000\002\030\004\000\002" +
    "\030\004\000\002\030\006\000\002\030\006\000\002\026" +
    "\012\000\002\026\011\000\002\026\003\000\002\031\004" +
    "\000\002\031\004\000\002\031\006\000\002\031\006\000" +
    "\002\027\004\000\002\027\002\000\002\032\004\000\002" +
    "\032\006\000\002\033\014\000\002\034\006\000\002\035" +
    "\005\000\002\035\003\000\002\036\005\000\002\036\006" +
    "\000\002\036\005\000\002\036\003\000\002\037\010\000" +
    "\002\040\012\000\002\041\007\000\002\042\003\000\002" +
    "\042\004\000\002\042\006\000\002\043\003\000\002\043" +
    "\002\000\002\061\006\000\002\061\005\000\002\061\003" +
    "\000\002\061\004\000\002\062\004\000\002\062\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\005\000\002\044\006\000\002\044\007" +
    "\000\002\044\003\000\002\045\003\000\002\045\002\000" +
    "\002\046\004\000\002\047\020\000\002\050\003\000\002" +
    "\050\002\000\002\051\004\000\002\051\003\000\002\052" +
    "\015\000\002\053\005\000\002\053\003\000\002\053\002" +
    "\000\002\054\006\000\002\054\005\000\002\055\006\000" +
    "\002\056\003\000\002\056\003\000\002\057\006\000\002" +
    "\060\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\004\062\006\001\002\000\004\002\u013e\001" +
    "\002\000\014\034\uffef\036\uffef\061\uffef\070\012\072\uffef" +
    "\001\002\000\004\102\007\001\002\000\004\030\010\001" +
    "\002\000\014\034\uffff\036\uffff\061\uffff\070\uffff\072\uffff" +
    "\001\002\000\012\034\uffe9\036\156\061\uffe9\072\uffe9\001" +
    "\002\000\004\102\013\001\002\000\012\013\ufff7\017\ufff7" +
    "\026\ufff7\031\ufff7\001\002\000\012\034\ufff0\036\ufff0\061" +
    "\ufff0\072\ufff0\001\002\000\006\017\017\026\016\001\002" +
    "\000\004\102\155\001\002\000\036\012\033\033\043\063" +
    "\036\075\040\076\041\077\030\100\023\101\032\102\025" +
    "\103\037\104\020\105\026\106\022\107\042\001\002\000" +
    "\110\004\uffc9\005\uffc9\006\uffc9\013\uffc9\015\uffc9\017\uffc9" +
    "\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\035\uffc9\037\uffc9\040\uffc9" +
    "\042\uffc9\043\uffc9\045\uffc9\050\uffc9\053\uffc9\055\uffc9\057" +
    "\uffc9\064\uffc9\067\uffc9\071\uffc9\073\uffc9\102\uffc9\110\uffc9" +
    "\111\uffc9\113\uffc9\114\uffc9\001\002\000\062\013\uffdc\015" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\035\uffdc" +
    "\040\uffdc\042\uffdc\043\uffdc\045\uffdc\050\uffdc\055\uffdc\057" +
    "\uffdc\064\uffdc\067\uffdc\071\uffdc\073\uffdc\102\uffdc\110\uffdc" +
    "\111\uffdc\113\uffdc\114\uffdc\001\002\000\110\004\uffc5\005" +
    "\uffc5\006\uffc5\013\uffc5\015\uffc5\017\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\035\uffc5\037\uffc5\040\uffc5\042\uffc5\043\uffc5" +
    "\045\uffc5\050\uffc5\053\uffc5\055\uffc5\057\uffc5\064\uffc5\067" +
    "\uffc5\071\uffc5\073\uffc5\102\uffc5\110\uffc5\111\uffc5\113\uffc5" +
    "\114\uffc5\001\002\000\010\013\ufffb\026\ufffb\030\ufffb\001" +
    "\002\000\110\004\uffcf\005\uffcf\006\uffcf\013\uffcf\015\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\035\uffcf\037\uffcf" +
    "\040\uffcf\042\uffcf\043\uffcf\045\uffcf\050\uffcf\053\uffcf\055" +
    "\uffcf\057\uffcf\064\uffcf\067\uffcf\071\uffcf\073\uffcf\102\uffcf" +
    "\110\uffcf\111\uffcf\113\uffcf\114\uffcf\001\002\000\046\004" +
    "\uffcb\005\uffcb\006\uffcb\012\050\014\052\017\uffcb\020\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\024\uffcb\027\uffcb\030\ufff9\032" +
    "\uffcb\037\uffcb\053\uffcb\055\uffcb\057\uffcb\001\002\000\110" +
    "\004\uffc7\005\uffc7\006\uffc7\013\uffc7\015\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\035\uffc7\037\uffc7\040\uffc7\042" +
    "\uffc7\043\uffc7\045\uffc7\050\uffc7\053\uffc7\055\uffc7\057\uffc7" +
    "\064\uffc7\067\uffc7\071\uffc7\073\uffc7\102\uffc7\110\uffc7\111" +
    "\uffc7\113\uffc7\114\uffc7\001\002\000\004\030\154\001\002" +
    "\000\010\013\ufffc\026\ufffc\030\ufffc\001\002\000\110\004" +
    "\055\005\057\006\061\013\uffd5\015\uffd5\017\144\020\142" +
    "\021\141\022\143\023\140\024\145\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\035\uffd5\037\060\040\uffd5\042\uffd5" +
    "\043\uffd5\045\uffd5\050\uffd5\053\054\055\uffd5\057\uffd5\064" +
    "\uffd5\067\uffd5\071\uffd5\073\uffd5\102\uffd5\110\uffd5\111\uffd5" +
    "\113\uffd5\114\uffd5\001\002\000\010\013\ufffa\026\ufffa\030" +
    "\ufffa\001\002\000\020\012\033\102\047\103\037\104\020" +
    "\105\026\106\022\107\042\001\002\000\012\027\132\032" +
    "\073\055\072\057\074\001\002\000\004\030\131\001\002" +
    "\000\004\102\114\001\002\000\110\004\uffc8\005\uffc8\006" +
    "\uffc8\013\uffc8\015\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032" +
    "\uffc8\035\uffc8\037\uffc8\040\uffc8\042\uffc8\043\uffc8\045\uffc8" +
    "\050\uffc8\053\uffc8\055\uffc8\057\uffc8\064\uffc8\067\uffc8\071" +
    "\uffc8\073\uffc8\102\uffc8\110\uffc8\111\uffc8\113\uffc8\114\uffc8" +
    "\001\002\000\010\013\ufffe\026\ufffe\030\ufffe\001\002\000" +
    "\010\013\ufffd\026\ufffd\030\ufffd\001\002\000\110\004\uffc6" +
    "\005\uffc6\006\uffc6\013\uffc6\015\uffc6\017\uffc6\020\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\035\uffc6\037\uffc6\040\uffc6\042\uffc6\043" +
    "\uffc6\045\uffc6\050\uffc6\053\uffc6\055\uffc6\057\uffc6\064\uffc6" +
    "\067\uffc6\071\uffc6\073\uffc6\102\uffc6\110\uffc6\111\uffc6\113" +
    "\uffc6\114\uffc6\001\002\000\004\014\045\001\002\000\004" +
    "\056\110\001\002\000\020\012\033\102\047\103\037\104" +
    "\020\105\026\106\022\107\042\001\002\000\012\027\075" +
    "\032\073\055\072\057\074\001\002\000\114\004\uffcb\005" +
    "\uffcb\006\uffcb\012\050\013\uffcb\014\052\015\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\035\uffcb\037\uffcb\040\uffcb" +
    "\042\uffcb\043\uffcb\045\uffcb\050\uffcb\053\uffcb\055\uffcb\057" +
    "\uffcb\064\uffcb\067\uffcb\071\uffcb\073\uffcb\102\uffcb\110\uffcb" +
    "\111\uffcb\113\uffcb\114\uffcb\001\002\000\004\102\013\001" +
    "\002\000\004\102\067\001\002\000\020\012\033\102\047" +
    "\103\037\104\020\105\026\106\022\107\042\001\002\000" +
    "\016\004\055\005\057\006\061\015\056\037\060\053\054" +
    "\001\002\000\020\012\033\102\047\103\037\104\020\105" +
    "\026\106\022\107\042\001\002\000\020\012\033\102\047" +
    "\103\037\104\020\105\026\106\022\107\042\001\002\000" +
    "\110\004\uffce\005\uffce\006\uffce\013\uffce\015\uffce\017\uffce" +
    "\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\035\uffce\037\uffce\040\uffce" +
    "\042\uffce\043\uffce\045\uffce\050\uffce\053\uffce\055\uffce\057" +
    "\uffce\064\uffce\067\uffce\071\uffce\073\uffce\102\uffce\110\uffce" +
    "\111\uffce\113\uffce\114\uffce\001\002\000\020\012\033\102" +
    "\047\103\037\104\020\105\026\106\022\107\042\001\002" +
    "\000\020\012\033\102\047\103\037\104\020\105\026\106" +
    "\022\107\042\001\002\000\020\012\033\102\047\103\037" +
    "\104\020\105\026\106\022\107\042\001\002\000\110\004" +
    "\uffd2\005\uffd2\006\uffd2\013\uffd2\015\uffd2\017\uffd2\020\uffd2" +
    "\021\uffd2\022\uffd2\023\uffd2\024\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\035\uffd2\037\uffd2\040\uffd2\042\uffd2" +
    "\043\uffd2\045\uffd2\050\uffd2\053\uffd2\055\uffd2\057\uffd2\064" +
    "\uffd2\067\uffd2\071\uffd2\073\uffd2\102\uffd2\110\uffd2\111\uffd2" +
    "\113\uffd2\114\uffd2\001\002\000\110\004\uffd1\005\uffd1\006" +
    "\uffd1\013\uffd1\015\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\035\uffd1\037\uffd1\040\uffd1\042\uffd1\043\uffd1\045\uffd1" +
    "\050\uffd1\053\uffd1\055\uffd1\057\uffd1\064\uffd1\067\uffd1\071" +
    "\uffd1\073\uffd1\102\uffd1\110\uffd1\111\uffd1\113\uffd1\114\uffd1" +
    "\001\002\000\110\004\uffd3\005\uffd3\006\061\013\uffd3\015" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\035\uffd3\037" +
    "\060\040\uffd3\042\uffd3\043\uffd3\045\uffd3\050\uffd3\053\054" +
    "\055\uffd3\057\uffd3\064\uffd3\067\uffd3\071\uffd3\073\uffd3\102" +
    "\uffd3\110\uffd3\111\uffd3\113\uffd3\114\uffd3\001\002\000\110" +
    "\004\uffd4\005\uffd4\006\061\013\uffd4\015\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\035\uffd4\037\060\040\uffd4\042" +
    "\uffd4\043\uffd4\045\uffd4\050\uffd4\053\054\055\uffd4\057\uffd4" +
    "\064\uffd4\067\uffd4\071\uffd4\073\uffd4\102\uffd4\110\uffd4\111" +
    "\uffd4\113\uffd4\114\uffd4\001\002\000\110\004\uffd0\005\uffd0" +
    "\006\uffd0\013\uffd0\015\uffd0\017\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\035\uffd0\037\uffd0\040\uffd0\042\uffd0\043\uffd0\045" +
    "\uffd0\050\uffd0\053\uffd0\055\uffd0\057\uffd0\064\uffd0\067\uffd0" +
    "\071\uffd0\073\uffd0\102\uffd0\110\uffd0\111\uffd0\113\uffd0\114" +
    "\uffd0\001\002\000\110\004\uffcd\005\uffcd\006\uffcd\013\uffcd" +
    "\015\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\035\uffcd" +
    "\037\uffcd\040\uffcd\042\uffcd\043\uffcd\045\uffcd\050\uffcd\053" +
    "\uffcd\055\uffcd\057\uffcd\064\uffcd\067\uffcd\071\uffcd\073\uffcd" +
    "\102\uffcd\110\uffcd\111\uffcd\113\uffcd\114\uffcd\001\002\000" +
    "\006\013\071\026\016\001\002\000\110\004\uffcc\005\uffcc" +
    "\006\uffcc\013\uffcc\015\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\035\uffcc\037\uffcc\040\uffcc\042\uffcc\043\uffcc\045" +
    "\uffcc\050\uffcc\053\uffcc\055\uffcc\057\uffcc\064\uffcc\067\uffcc" +
    "\071\uffcc\073\uffcc\102\uffcc\110\uffcc\111\uffcc\113\uffcc\114" +
    "\uffcc\001\002\000\020\012\033\102\047\103\037\104\020" +
    "\105\026\106\022\107\042\001\002\000\022\012\033\066" +
    "\104\102\047\103\037\104\020\105\026\106\022\107\042" +
    "\001\002\000\022\012\033\042\102\102\047\103\037\104" +
    "\020\105\026\106\022\107\042\001\002\000\004\027\076" +
    "\001\002\000\020\012\033\102\047\103\037\104\020\105" +
    "\026\106\022\107\042\001\002\000\012\015\100\032\073" +
    "\055\072\057\074\001\002\000\004\056\ufff5\001\002\000" +
    "\062\013\uffdf\015\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\073\035\uffdf\040\uffdf\042\uffdf\043\uffdf\045\uffdf\050" +
    "\uffdf\055\072\057\uffdf\064\uffdf\067\uffdf\071\uffdf\073\uffdf" +
    "\102\uffdf\110\uffdf\111\uffdf\113\uffdf\114\uffdf\001\002\000" +
    "\020\012\033\102\047\103\037\104\020\105\026\106\022" +
    "\107\042\001\002\000\062\013\uffde\015\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\035\uffde\040\uffde\042\uffde" +
    "\043\uffde\045\uffde\050\uffde\055\uffde\057\uffde\064\uffde\067" +
    "\uffde\071\uffde\073\uffde\102\uffde\110\uffde\111\uffde\113\uffde" +
    "\114\uffde\001\002\000\020\012\033\102\047\103\037\104" +
    "\020\105\026\106\022\107\042\001\002\000\062\013\uffe1" +
    "\015\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\035" +
    "\uffe1\040\uffe1\042\uffe1\043\uffe1\045\uffe1\050\uffe1\055\072" +
    "\057\uffe1\064\uffe1\067\uffe1\071\uffe1\073\uffe1\102\uffe1\110" +
    "\uffe1\111\uffe1\113\uffe1\114\uffe1\001\002\000\062\013\uffe0" +
    "\015\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\073\035" +
    "\uffe0\040\uffe0\042\uffe0\043\uffe0\045\uffe0\050\uffe0\055\072" +
    "\057\074\064\uffe0\067\uffe0\071\uffe0\073\uffe0\102\uffe0\110" +
    "\uffe0\111\uffe0\113\uffe0\114\uffe0\001\002\000\062\013\uffdd" +
    "\015\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\035" +
    "\uffdd\040\uffdd\042\uffdd\043\uffdd\045\uffdd\050\uffdd\055\uffdd" +
    "\057\uffdd\064\uffdd\067\uffdd\071\uffdd\073\uffdd\102\uffdd\110" +
    "\uffdd\111\uffdd\113\uffdd\114\uffdd\001\002\000\016\075\040" +
    "\076\041\077\030\100\023\101\032\102\112\001\002\000" +
    "\004\030\113\001\002\000\010\013\ufff9\026\ufff9\030\ufff9" +
    "\001\002\000\012\034\uffec\036\uffec\061\uffec\072\uffec\001" +
    "\002\000\004\031\120\001\002\000\004\043\116\001\002" +
    "\000\004\030\117\001\002\000\012\034\uffeb\036\uffeb\061" +
    "\uffeb\072\uffeb\001\002\000\020\060\122\075\040\076\041" +
    "\077\030\100\023\101\032\102\112\001\002\000\004\030" +
    "\130\001\002\000\004\033\123\001\002\000\004\014\045" +
    "\001\002\000\004\056\125\001\002\000\016\075\040\076" +
    "\041\077\030\100\023\101\032\102\112\001\002\000\004" +
    "\030\127\001\002\000\004\043\ufff3\001\002\000\004\043" +
    "\ufff4\001\002\000\012\034\uffed\036\uffed\061\uffed\072\uffed" +
    "\001\002\000\004\027\133\001\002\000\004\027\134\001" +
    "\002\000\020\012\033\102\047\103\037\104\020\105\026" +
    "\106\022\107\042\001\002\000\012\030\ufff6\032\073\055" +
    "\072\057\074\001\002\000\012\013\137\032\073\055\072" +
    "\057\074\001\002\000\110\004\uffca\005\uffca\006\uffca\013" +
    "\uffca\015\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca" +
    "\024\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\035" +
    "\uffca\037\uffca\040\uffca\042\uffca\043\uffca\045\uffca\050\uffca" +
    "\053\uffca\055\uffca\057\uffca\064\uffca\067\uffca\071\uffca\073" +
    "\uffca\102\uffca\110\uffca\111\uffca\113\uffca\114\uffca\001\002" +
    "\000\020\012\033\102\047\103\037\104\020\105\026\106" +
    "\022\107\042\001\002\000\020\012\033\102\047\103\037" +
    "\104\020\105\026\106\022\107\042\001\002\000\020\012" +
    "\033\102\047\103\037\104\020\105\026\106\022\107\042" +
    "\001\002\000\020\012\033\102\047\103\037\104\020\105" +
    "\026\106\022\107\042\001\002\000\020\012\033\102\047" +
    "\103\037\104\020\105\026\106\022\107\042\001\002\000" +
    "\020\012\033\102\047\103\037\104\020\105\026\106\022" +
    "\107\042\001\002\000\074\004\055\005\057\006\061\013" +
    "\uffd6\015\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\035\uffd6\037\060\040\uffd6\042\uffd6\043\uffd6\045\uffd6\050" +
    "\uffd6\053\054\055\uffd6\057\uffd6\064\uffd6\067\uffd6\071\uffd6" +
    "\073\uffd6\102\uffd6\110\uffd6\111\uffd6\113\uffd6\114\uffd6\001" +
    "\002\000\074\004\055\005\057\006\061\013\uffdb\015\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\035\uffdb\037" +
    "\060\040\uffdb\042\uffdb\043\uffdb\045\uffdb\050\uffdb\053\054" +
    "\055\uffdb\057\uffdb\064\uffdb\067\uffdb\071\uffdb\073\uffdb\102" +
    "\uffdb\110\uffdb\111\uffdb\113\uffdb\114\uffdb\001\002\000\074" +
    "\004\055\005\057\006\061\013\uffd8\015\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\035\uffd8\037\060\040\uffd8" +
    "\042\uffd8\043\uffd8\045\uffd8\050\uffd8\053\054\055\uffd8\057" +
    "\uffd8\064\uffd8\067\uffd8\071\uffd8\073\uffd8\102\uffd8\110\uffd8" +
    "\111\uffd8\113\uffd8\114\uffd8\001\002\000\074\004\055\005" +
    "\057\006\061\013\uffda\015\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\035\uffda\037\060\040\uffda\042\uffda\043" +
    "\uffda\045\uffda\050\uffda\053\054\055\uffda\057\uffda\064\uffda" +
    "\067\uffda\071\uffda\073\uffda\102\uffda\110\uffda\111\uffda\113" +
    "\uffda\114\uffda\001\002\000\074\004\055\005\057\006\061" +
    "\013\uffd9\015\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\035\uffd9\037\060\040\uffd9\042\uffd9\043\uffd9\045\uffd9" +
    "\050\uffd9\053\054\055\uffd9\057\uffd9\064\uffd9\067\uffd9\071" +
    "\uffd9\073\uffd9\102\uffd9\110\uffd9\111\uffd9\113\uffd9\114\uffd9" +
    "\001\002\000\074\004\055\005\057\006\061\013\uffd7\015" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\035\uffd7" +
    "\037\060\040\uffd7\042\uffd7\043\uffd7\045\uffd7\050\uffd7\053" +
    "\054\055\uffd7\057\uffd7\064\uffd7\067\uffd7\071\uffd7\073\uffd7" +
    "\102\uffd7\110\uffd7\111\uffd7\113\uffd7\114\uffd7\001\002\000" +
    "\012\034\uffee\036\uffee\061\uffee\072\uffee\001\002\000\012" +
    "\013\ufff8\017\ufff8\026\ufff8\031\ufff8\001\002\000\002\001" +
    "\002\000\010\034\uffe6\061\uffe6\072\160\001\002\000\004" +
    "\102\013\001\002\000\006\034\uff91\061\uff91\001\002\000" +
    "\006\034\uff92\061\uff92\001\002\000\006\034\uff8d\061\164" +
    "\001\002\000\004\102\u0106\001\002\000\004\034\172\001" +
    "\002\000\006\034\uff8b\061\uff8b\001\002\000\006\034\uff8e" +
    "\061\164\001\002\000\006\034\uff8c\061\uff8c\001\002\000" +
    "\004\002\000\001\002\000\030\035\211\043\uffa4\045\216" +
    "\050\203\064\217\073\200\102\204\110\201\111\221\113" +
    "\207\114\175\001\002\000\036\030\uff9c\035\uff9c\042\uff9c" +
    "\043\uff9c\045\uff9c\050\uff9c\064\uff9c\071\uff9c\073\uff9c\102" +
    "\uff9c\110\uff9c\111\uff9c\113\uff9c\114\uff9c\001\002\000\036" +
    "\030\uff99\035\uff99\042\uff99\043\uff99\045\uff99\050\uff99\064" +
    "\uff99\071\uff99\073\uff99\102\uff99\110\uff99\111\uff99\113\uff99" +
    "\114\uff99\001\002\000\036\030\uff97\035\uff97\042\uff97\043" +
    "\uff97\045\uff97\050\uff97\064\uff97\071\uff97\073\uff97\102\uff97" +
    "\110\uff97\111\uff97\113\uff97\114\uff97\001\002\000\036\030" +
    "\uff9b\035\uff9b\042\uff9b\043\uff9b\045\uff9b\050\uff9b\064\uff9b" +
    "\071\uff9b\073\uff9b\102\uff9b\110\uff9b\111\uff9b\113\uff9b\114" +
    "\uff9b\001\002\000\036\030\uff83\035\uff83\042\uff83\043\uff83" +
    "\045\uff83\050\uff83\064\uff83\071\uff83\073\uff83\102\uff83\110" +
    "\uff83\111\uff83\113\uff83\114\uff83\001\002\000\004\012\u0101" +
    "\001\002\000\004\012\376\001\002\000\004\043\uffa5\001" +
    "\002\000\004\012\372\001\002\000\010\012\362\025\361" +
    "\027\363\001\002\000\036\030\uff82\035\uff82\042\uff82\043" +
    "\uff82\045\uff82\050\uff82\064\uff82\071\uff82\073\uff82\102\uff82" +
    "\110\uff82\111\uff82\113\uff82\114\uff82\001\002\000\030\030" +
    "\355\035\211\045\216\050\203\064\217\073\200\102\204" +
    "\110\201\111\221\113\207\114\175\001\002\000\036\030" +
    "\uff98\035\uff98\042\uff98\043\uff98\045\uff98\050\uff98\064\uff98" +
    "\071\uff98\073\uff98\102\uff98\110\uff98\111\uff98\113\uff98\114" +
    "\uff98\001\002\000\036\030\uff93\035\uff93\042\uff93\043\uff93" +
    "\045\uff93\050\uff93\064\uff93\071\uff93\073\uff93\102\uff93\110" +
    "\uff93\111\uff93\113\uff93\114\uff93\001\002\000\004\012\324" +
    "\001\002\000\036\030\uff9d\035\uff9d\042\uff9d\043\uff9d\045" +
    "\uff9d\050\uff9d\064\uff9d\071\uff9d\073\uff9d\102\uff9d\110\uff9d" +
    "\111\uff9d\113\uff9d\114\uff9d\001\002\000\004\043\322\001" +
    "\002\000\030\034\252\035\211\045\216\050\203\064\217" +
    "\073\200\102\204\110\201\111\221\113\207\114\175\001" +
    "\002\000\036\030\uff9a\035\uff9a\042\uff9a\043\uff9a\045\uff9a" +
    "\050\uff9a\064\uff9a\071\uff9a\073\uff9a\102\uff9a\110\uff9a\111" +
    "\uff9a\113\uff9a\114\uff9a\001\002\000\004\102\243\001\002" +
    "\000\030\034\231\035\211\045\216\050\203\064\217\073" +
    "\200\102\204\110\201\111\221\113\207\114\175\001\002" +
    "\000\032\030\230\035\uff9e\043\uffa1\045\uff9e\050\uff9e\064" +
    "\uff9e\073\uff9e\102\uff9e\110\uff9e\111\uff9e\113\uff9e\114\uff9e" +
    "\001\002\000\004\012\222\001\002\000\020\012\033\102" +
    "\047\103\037\104\020\105\026\106\022\107\042\001\002" +
    "\000\014\013\ufff1\026\ufff1\032\073\055\072\057\074\001" +
    "\002\000\006\013\225\026\226\001\002\000\036\030\uff80" +
    "\035\uff80\042\uff80\043\uff80\045\uff80\050\uff80\064\uff80\071" +
    "\uff80\073\uff80\102\uff80\110\uff80\111\uff80\113\uff80\114\uff80" +
    "\001\002\000\020\012\033\102\047\103\037\104\020\105" +
    "\026\106\022\107\042\001\002\000\014\013\ufff2\026\ufff2" +
    "\032\073\055\072\057\074\001\002\000\004\043\uffa0\001" +
    "\002\000\030\035\211\043\uffa4\045\216\050\203\064\217" +
    "\073\200\102\204\110\201\111\221\113\207\114\175\001" +
    "\002\000\004\071\235\001\002\000\036\030\234\035\uffa8" +
    "\042\uffa8\043\uffa8\045\uffa8\050\uffa8\064\uffa8\071\uffa8\073" +
    "\uffa8\102\uffa8\110\uffa8\111\uffa8\113\uffa8\114\uffa8\001\002" +
    "\000\036\030\uffa7\035\uffa7\042\uffa7\043\uffa7\045\uffa7\050" +
    "\uffa7\064\uffa7\071\uffa7\073\uffa7\102\uffa7\110\uffa7\111\uffa7" +
    "\113\uffa7\114\uffa7\001\002\000\020\012\033\102\047\103" +
    "\037\104\020\105\026\106\022\107\042\001\002\000\012" +
    "\030\237\032\073\055\072\057\074\001\002\000\036\030" +
    "\uffa9\035\uffa9\042\uffa9\043\uffa9\045\uffa9\050\uffa9\064\uffa9" +
    "\071\uffa9\073\uffa9\102\uffa9\110\uffa9\111\uffa9\113\uffa9\114" +
    "\uffa9\001\002\000\004\043\241\001\002\000\004\030\242" +
    "\001\002\000\036\030\uffa6\035\uffa6\042\uffa6\043\uffa6\045" +
    "\uffa6\050\uffa6\064\uffa6\071\uffa6\073\uffa6\102\uffa6\110\uffa6" +
    "\111\uffa6\113\uffa6\114\uffa6\001\002\000\004\025\244\001" +
    "\002\000\020\012\033\102\047\103\037\104\020\105\026" +
    "\106\022\107\042\001\002\000\012\032\073\055\072\057" +
    "\074\067\246\001\002\000\020\012\033\102\047\103\037" +
    "\104\020\105\026\106\022\107\042\001\002\000\012\032" +
    "\073\040\250\055\072\057\074\001\002\000\030\034\231" +
    "\035\211\045\216\050\203\064\217\073\200\102\204\110" +
    "\201\111\221\113\207\114\175\001\002\000\036\030\uffaa" +
    "\035\uffaa\042\uffaa\043\uffaa\045\uffaa\050\uffaa\064\uffaa\071" +
    "\uffaa\073\uffaa\102\uffaa\110\uffaa\111\uffaa\113\uffaa\114\uffaa" +
    "\001\002\000\030\035\211\043\uffa4\045\216\050\203\064" +
    "\217\073\200\102\204\110\201\111\221\113\207\114\175" +
    "\001\002\000\036\030\uffc4\035\uffc4\042\uffc4\043\uffc4\045" +
    "\uffc4\050\uffc4\064\uffc4\071\uffc4\073\uffc4\102\uffc4\110\uffc4" +
    "\111\uffc4\113\uffc4\114\uffc4\001\002\000\036\030\256\035" +
    "\uffb6\042\257\043\uffb6\045\uffb6\050\uffb6\064\uffb6\071\uffb6" +
    "\073\uffb6\102\uffb6\110\uffb6\111\uffb6\113\uffb6\114\uffb6\001" +
    "\002\000\036\030\uffbc\035\uffbc\042\uffbc\043\uffbc\045\uffbc" +
    "\050\uffbc\064\uffbc\071\uffbc\073\uffbc\102\uffbc\110\uffbc\111" +
    "\uffbc\113\uffbc\114\uffbc\001\002\000\036\030\uffc2\035\uffc2" +
    "\042\uffc2\043\uffc2\045\uffc2\050\uffc2\064\uffc2\071\uffc2\073" +
    "\uffc2\102\uffc2\110\uffc2\111\uffc2\113\uffc2\114\uffc2\001\002" +
    "\000\030\034\275\035\211\045\216\050\310\064\217\073" +
    "\200\102\204\110\201\111\221\113\207\114\175\001\002" +
    "\000\036\030\uffc1\035\uffc1\042\261\043\uffc1\045\uffc1\050" +
    "\uffc1\064\uffc1\071\uffc1\073\uffc1\102\uffc1\110\uffc1\111\uffc1" +
    "\113\uffc1\114\uffc1\001\002\000\004\050\262\001\002\000" +
    "\004\012\263\001\002\000\020\012\033\102\047\103\037" +
    "\104\020\105\026\106\022\107\042\001\002\000\012\013" +
    "\265\032\073\055\072\057\074\001\002\000\004\066\266" +
    "\001\002\000\030\034\270\035\211\045\216\050\203\064" +
    "\217\073\200\102\204\110\201\111\221\113\207\114\175" +
    "\001\002\000\036\030\uffbe\035\uffbe\042\uffbe\043\uffbe\045" +
    "\uffbe\050\uffbe\064\uffbe\071\uffbe\073\uffbe\102\uffbe\110\uffbe" +
    "\111\uffbe\113\uffbe\114\uffbe\001\002\000\030\035\211\043" +
    "\uffa4\045\216\050\203\064\217\073\200\102\204\110\201" +
    "\111\221\113\207\114\175\001\002\000\036\030\273\035" +
    "\uffb6\042\274\043\uffb6\045\uffb6\050\uffb6\064\uffb6\071\uffb6" +
    "\073\uffb6\102\uffb6\110\uffb6\111\uffb6\113\uffb6\114\uffb6\001" +
    "\002\000\036\030\uffba\035\uffba\042\uffba\043\uffba\045\uffba" +
    "\050\uffba\064\uffba\071\uffba\073\uffba\102\uffba\110\uffba\111" +
    "\uffba\113\uffba\114\uffba\001\002\000\036\030\uffbb\035\uffbb" +
    "\042\uffbb\043\uffbb\045\uffbb\050\uffbb\064\uffbb\071\uffbb\073" +
    "\uffbb\102\uffbb\110\uffbb\111\uffbb\113\uffbb\114\uffbb\001\002" +
    "\000\030\034\275\035\211\045\216\050\203\064\217\073" +
    "\200\102\204\110\201\111\221\113\207\114\175\001\002" +
    "\000\030\035\211\043\uffa4\045\216\050\203\064\217\073" +
    "\200\102\204\110\201\111\221\113\207\114\175\001\002" +
    "\000\036\030\uffb7\035\uffb7\042\uffb7\043\uffb7\045\uffb7\050" +
    "\uffb7\064\uffb7\071\uffb7\073\uffb7\102\uffb7\110\uffb7\111\uffb7" +
    "\113\uffb7\114\uffb7\001\002\000\004\030\300\001\002\000" +
    "\036\030\uffb5\035\uffb5\042\uffb5\043\uffb5\045\uffb5\050\uffb5" +
    "\064\uffb5\071\uffb5\073\uffb5\102\uffb5\110\uffb5\111\uffb5\113" +
    "\uffb5\114\uffb5\001\002\000\004\043\302\001\002\000\004" +
    "\030\303\001\002\000\036\030\uffb4\035\uffb4\042\uffb4\043" +
    "\uffb4\045\uffb4\050\uffb4\064\uffb4\071\uffb4\073\uffb4\102\uffb4" +
    "\110\uffb4\111\uffb4\113\uffb4\114\uffb4\001\002\000\004\043" +
    "\305\001\002\000\036\030\307\035\uffb6\042\274\043\uffb6" +
    "\045\uffb6\050\uffb6\064\uffb6\071\uffb6\073\uffb6\102\uffb6\110" +
    "\uffb6\111\uffb6\113\uffb6\114\uffb6\001\002\000\036\030\uffb8" +
    "\035\uffb8\042\uffb8\043\uffb8\045\uffb8\050\uffb8\064\uffb8\071" +
    "\uffb8\073\uffb8\102\uffb8\110\uffb8\111\uffb8\113\uffb8\114\uffb8" +
    "\001\002\000\036\030\uffb9\035\uffb9\042\uffb9\043\uffb9\045" +
    "\uffb9\050\uffb9\064\uffb9\071\uffb9\073\uffb9\102\uffb9\110\uffb9" +
    "\111\uffb9\113\uffb9\114\uffb9\001\002\000\004\012\311\001" +
    "\002\000\020\012\033\102\047\103\037\104\020\105\026" +
    "\106\022\107\042\001\002\000\012\013\313\032\073\055" +
    "\072\057\074\001\002\000\004\066\314\001\002\000\030" +
    "\034\uffc3\035\uffc3\045\uffc3\050\uffc3\064\uffc3\073\uffc3\102" +
    "\uffc3\110\uffc3\111\uffc3\113\uffc3\114\uffc3\001\002\000\036" +
    "\030\uffbd\035\uffbd\042\uffbd\043\uffbd\045\uffbd\050\uffbd\064" +
    "\uffbd\071\uffbd\073\uffbd\102\uffbd\110\uffbd\111\uffbd\113\uffbd" +
    "\114\uffbd\001\002\000\004\043\317\001\002\000\036\030" +
    "\320\035\uffb6\042\257\043\uffb6\045\uffb6\050\uffb6\064\uffb6" +
    "\071\uffb6\073\uffb6\102\uffb6\110\uffb6\111\uffb6\113\uffb6\114" +
    "\uffb6\001\002\000\036\030\uffc0\035\uffc0\042\uffc0\043\uffc0" +
    "\045\uffc0\050\uffc0\064\uffc0\071\uffc0\073\uffc0\102\uffc0\110" +
    "\uffc0\111\uffc0\113\uffc0\114\uffc0\001\002\000\036\030\uffbf" +
    "\035\uffbf\042\261\043\uffbf\045\uffbf\050\uffbf\064\uffbf\071" +
    "\uffbf\073\uffbf\102\uffbf\110\uffbf\111\uffbf\113\uffbf\114\uffbf" +
    "\001\002\000\004\027\323\001\002\000\004\002\uff84\001" +
    "\002\000\020\012\033\102\047\103\037\104\020\105\026" +
    "\106\022\107\042\001\002\000\012\013\326\032\073\055" +
    "\072\057\074\001\002\000\004\056\327\001\002\000\020" +
    "\012\033\102\047\103\037\104\020\105\026\106\022\107" +
    "\042\001\002\000\004\042\351\001\002\000\006\026\333" +
    "\031\334\001\002\000\014\026\uffb0\031\uffb0\032\073\055" +
    "\072\057\074\001\002\000\020\012\033\102\047\103\037" +
    "\104\020\105\026\106\022\107\042\001\002\000\010\102" +
    "\335\110\201\111\221\001\002\000\010\012\341\025\342" +
    "\027\343\001\002\000\006\030\uffac\043\uffac\001\002\000" +
    "\004\030\340\001\002\000\004\042\uffb2\001\002\000\020" +
    "\012\033\102\047\103\037\104\020\105\026\106\022\107" +
    "\042\001\002\000\020\012\033\102\047\103\037\104\020" +
    "\105\026\106\022\107\042\001\002\000\004\102\344\001" +
    "\002\000\006\030\uffad\043\uffad\001\002\000\014\030\uffaf" +
    "\032\073\043\uffaf\055\072\057\074\001\002\000\006\013" +
    "\347\026\226\001\002\000\006\030\uffae\043\uffae\001\002" +
    "\000\014\026\uffb1\031\uffb1\032\073\055\072\057\074\001" +
    "\002\000\010\102\335\110\201\111\221\001\002\000\004" +
    "\043\353\001\002\000\004\030\354\001\002\000\036\030" +
    "\uffb3\035\uffb3\042\uffb3\043\uffb3\045\uffb3\050\uffb3\064\uffb3" +
    "\071\uffb3\073\uffb3\102\uffb3\110\uffb3\111\uffb3\113\uffb3\114" +
    "\uffb3\001\002\000\026\035\211\045\216\050\203\064\217" +
    "\073\200\102\204\110\201\111\221\113\207\114\175\001" +
    "\002\000\030\030\uff9f\035\uff9f\045\uff9f\050\uff9f\064\uff9f" +
    "\073\uff9f\102\uff9f\110\uff9f\111\uff9f\113\uff9f\114\uff9f\001" +
    "\002\000\006\030\360\043\uffa2\001\002\000\004\043\uffa3" +
    "\001\002\000\020\012\033\102\047\103\037\104\020\105" +
    "\026\106\022\107\042\001\002\000\020\012\033\102\047" +
    "\103\037\104\020\105\026\106\022\107\042\001\002\000" +
    "\004\102\364\001\002\000\004\025\365\001\002\000\020" +
    "\012\033\102\047\103\037\104\020\105\026\106\022\107" +
    "\042\001\002\000\044\030\uff94\032\073\035\uff94\042\uff94" +
    "\043\uff94\045\uff94\050\uff94\055\072\057\074\064\uff94\071" +
    "\uff94\073\uff94\102\uff94\110\uff94\111\uff94\113\uff94\114\uff94" +
    "\001\002\000\006\013\370\026\226\001\002\000\036\030" +
    "\uff95\035\uff95\042\uff95\043\uff95\045\uff95\050\uff95\064\uff95" +
    "\071\uff95\073\uff95\102\uff95\110\uff95\111\uff95\113\uff95\114" +
    "\uff95\001\002\000\044\030\uff96\032\073\035\uff96\042\uff96" +
    "\043\uff96\045\uff96\050\uff96\055\072\057\074\064\uff96\071" +
    "\uff96\073\uff96\102\uff96\110\uff96\111\uff96\113\uff96\114\uff96" +
    "\001\002\000\020\012\033\102\047\103\037\104\020\105" +
    "\026\106\022\107\042\001\002\000\012\013\374\032\073" +
    "\055\072\057\074\001\002\000\004\066\375\001\002\000" +
    "\030\034\uffc3\035\uffc3\045\uffc3\050\uffc3\064\uffc3\073\uffc3" +
    "\102\uffc3\110\uffc3\111\uffc3\113\uffc3\114\uffc3\001\002\000" +
    "\020\012\033\102\047\103\037\104\020\105\026\106\022" +
    "\107\042\001\002\000\006\013\u0100\026\226\001\002\000" +
    "\036\030\uff81\035\uff81\042\uff81\043\uff81\045\uff81\050\uff81" +
    "\064\uff81\071\uff81\073\uff81\102\uff81\110\uff81\111\uff81\113" +
    "\uff81\114\uff81\001\002\000\020\012\033\102\047\103\037" +
    "\104\020\105\026\106\022\107\042\001\002\000\012\013" +
    "\u0103\032\073\055\072\057\074\001\002\000\004\040\u0104" +
    "\001\002\000\030\034\231\035\211\045\216\050\203\064" +
    "\217\073\200\102\204\110\201\111\221\113\207\114\175" +
    "\001\002\000\036\030\uffab\035\uffab\042\uffab\043\uffab\045" +
    "\uffab\050\uffab\064\uffab\071\uffab\073\uffab\102\uffab\110\uffab" +
    "\111\uffab\113\uffab\114\uffab\001\002\000\004\012\u0107\001" +
    "\002\000\012\013\uff87\026\uff87\072\u0108\102\013\001\002" +
    "\000\004\102\013\001\002\000\006\013\uff88\026\uff88\001" +
    "\002\000\006\026\016\031\u0115\001\002\000\006\013\u010c" +
    "\026\u010d\001\002\000\004\030\u010f\001\002\000\006\072" +
    "\u0108\102\013\001\002\000\006\013\uff89\026\uff89\001\002" +
    "\000\006\034\uffe6\072\160\001\002\000\004\034\u0111\001" +
    "\002\000\030\035\211\043\uffa4\045\216\050\203\064\217" +
    "\073\200\102\204\110\201\111\221\113\207\114\175\001" +
    "\002\000\004\043\u0113\001\002\000\004\030\u0114\001\002" +
    "\000\006\034\uff8a\061\uff8a\001\002\000\016\075\040\076" +
    "\041\077\030\100\023\101\032\102\112\001\002\000\006" +
    "\013\uff85\026\uff85\001\002\000\006\026\016\031\u0118\001" +
    "\002\000\016\075\040\076\041\077\030\100\023\101\032" +
    "\102\112\001\002\000\006\013\uff86\026\uff86\001\002\000" +
    "\010\034\uff90\046\u011b\061\uff90\001\002\000\004\102\u011c" +
    "\001\002\000\004\012\u011d\001\002\000\012\013\uff87\026" +
    "\uff87\072\u0108\102\013\001\002\000\006\013\u011f\026\u010d" +
    "\001\002\000\004\031\u0120\001\002\000\016\075\040\076" +
    "\041\077\030\100\023\101\032\102\112\001\002\000\004" +
    "\030\u0122\001\002\000\006\034\uffe6\072\160\001\002\000" +
    "\004\034\u0124\001\002\000\030\035\211\043\uffa4\045\216" +
    "\050\203\064\217\073\200\102\204\110\201\111\221\113" +
    "\207\114\175\001\002\000\004\043\u0126\001\002\000\004" +
    "\030\u0127\001\002\000\010\034\uff8f\046\uff8f\061\uff8f\001" +
    "\002\000\010\017\u012a\026\016\031\u012b\001\002\000\006" +
    "\034\uffe7\061\uffe7\001\002\000\004\063\u0135\001\002\000" +
    "\034\012\033\033\u012e\075\040\076\041\077\030\100\023" +
    "\101\032\102\025\103\037\104\020\105\026\106\022\107" +
    "\042\001\002\000\004\030\u0134\001\002\000\004\030\u0133" +
    "\001\002\000\004\014\045\001\002\000\004\056\u0130\001" +
    "\002\000\016\075\040\076\041\077\030\100\023\101\032" +
    "\102\112\001\002\000\004\030\u0132\001\002\000\006\034" +
    "\uffe3\061\uffe3\001\002\000\006\034\uffe4\061\uffe4\001\002" +
    "\000\006\034\uffe5\061\uffe5\001\002\000\004\102\114\001" +
    "\002\000\004\043\u0137\001\002\000\004\030\u0138\001\002" +
    "\000\006\034\uffe2\061\uffe2\001\002\000\012\034\uffea\061" +
    "\uffea\072\uffea\102\u013a\001\002\000\004\017\u013b\001\002" +
    "\000\020\012\033\102\047\103\037\104\020\105\026\106" +
    "\022\107\042\001\002\000\012\030\u013d\032\073\055\072" +
    "\057\074\001\002\000\012\034\uffe8\061\uffe8\072\uffe8\102" +
    "\uffe8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\012\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\156\001\001\000" +
    "\006\005\014\013\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\026\006\034\020\033\021\020\022\030\023\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\135\021\020\022\030" +
    "\023\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\043\001" +
    "\001\000\002\001\001\000\012\020\045\021\020\022\030" +
    "\023\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\067\001\001\000\002\001\001\000\006\022\052" +
    "\023\023\001\001\000\002\001\001\000\006\022\065\023" +
    "\023\001\001\000\006\022\064\023\023\001\001\000\002" +
    "\001\001\000\006\022\063\023\023\001\001\000\006\022" +
    "\062\023\023\001\001\000\006\022\061\023\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\020\106\021\020\022" +
    "\030\023\023\001\001\000\012\020\104\021\020\022\030" +
    "\023\023\001\001\000\012\020\100\021\020\022\030\023" +
    "\023\001\001\000\002\001\001\000\012\020\076\021\020" +
    "\022\030\023\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\102\021\020\022\030" +
    "\023\023\001\001\000\002\001\001\000\012\020\105\021" +
    "\020\022\030\023\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\123\001\001\000\002\001\001\000" +
    "\004\004\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\134\021\020\022\030\023\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\152\023\023\001\001\000\006\022\151" +
    "\023\023\001\001\000\006\022\150\023\023\001\001\000" +
    "\006\022\147\023\023\001\001\000\006\022\146\023\023" +
    "\001\001\000\006\022\145\023\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u0138\001\001\000\004\016\160" +
    "\001\001\000\006\005\u0127\017\u0128\001\001\000\006\045" +
    "\162\046\161\001\001\000\004\047\u0119\001\001\000\010" +
    "\050\164\051\166\052\165\001\001\000\002\001\001\000" +
    "\004\055\170\001\001\000\002\001\001\000\004\052\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\024" +
    "\211\025\213\033\172\037\175\040\214\041\173\043\212" +
    "\044\217\056\207\057\176\060\204\061\201\062\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\024\211\025\213\033" +
    "\172\037\175\040\214\041\173\044\355\056\207\057\176" +
    "\060\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\024\211\025\213\030\252\033\172\037\175\040\214\041" +
    "\173\044\253\056\207\057\176\060\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\024\211\025\213\033" +
    "\172\037\175\040\214\041\173\042\231\044\232\056\207" +
    "\057\176\060\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\011\223\020\222\021\020\022\030\023\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\226\021\020\022\030\023\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\024\211\025" +
    "\213\033\172\037\175\040\214\041\173\043\237\044\217" +
    "\056\207\057\176\060\204\061\201\062\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\235\021\020\022\030\023\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\244\021" +
    "\020\022\030\023\023\001\001\000\002\001\001\000\012" +
    "\020\246\021\020\022\030\023\023\001\001\000\002\001" +
    "\001\000\030\024\211\025\213\033\172\037\175\040\214" +
    "\041\173\042\250\044\232\056\207\057\176\060\204\001" +
    "\001\000\002\001\001\000\034\024\211\025\213\033\172" +
    "\037\175\040\214\041\173\043\315\044\217\056\207\057" +
    "\176\060\204\061\201\062\205\001\001\000\002\001\001" +
    "\000\006\026\257\027\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\024\211\025\213\032\275\033\172" +
    "\037\175\040\214\041\173\044\276\056\207\057\176\060" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\263\021\020\022\030\023\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\024\211" +
    "\025\213\031\266\033\172\037\175\040\214\041\173\044" +
    "\270\056\207\057\176\060\204\001\001\000\002\001\001" +
    "\000\034\024\211\025\213\033\172\037\175\040\214\041" +
    "\173\043\303\044\217\056\207\057\176\060\204\061\201" +
    "\062\205\001\001\000\004\027\271\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\024\211\025\213\032\275" +
    "\033\172\037\175\040\214\041\173\044\276\056\207\057" +
    "\176\060\204\001\001\000\034\024\211\025\213\033\172" +
    "\037\175\040\214\041\173\043\300\044\217\056\207\057" +
    "\176\060\204\061\201\062\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\305\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\311\021\020\022\030\023\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\024" +
    "\211\025\213\031\314\033\172\037\175\040\214\041\173" +
    "\044\270\056\207\057\176\060\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\320\027\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\324\021\020\022\030\023\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\020" +
    "\331\021\020\022\030\023\023\034\327\035\330\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\020\347\021\020\022\030\023\023\001\001\000\012" +
    "\036\336\056\335\057\176\060\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\011\345\020\222\021\020\022\030\023\023\001" +
    "\001\000\012\020\344\021\020\022\030\023\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\036\351\056\335\057\176\060\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\024\211" +
    "\025\213\033\172\037\175\040\214\041\173\044\356\056" +
    "\207\057\176\060\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\020\370\021\020\022" +
    "\030\023\023\001\001\000\014\011\366\020\222\021\020" +
    "\022\030\023\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\365\021\020\022\030\023\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\372\021\020\022\030\023\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\011\376\020\222\021\020\022\030\023\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\u0101\021\020\022\030\023\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\024\211\025\213\033\172\037" +
    "\175\040\214\041\173\042\u0104\044\232\056\207\057\176" +
    "\060\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\u0109\053\u010a\054\u0108\001\001\000\004\005\u0116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\u0109\054\u010d\001\001" +
    "\000\002\001\001\000\004\016\u010f\001\001\000\002\001" +
    "\001\000\034\024\211\025\213\033\172\037\175\040\214" +
    "\041\173\043\u0111\044\217\056\207\057\176\060\204\061" +
    "\201\062\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\u0115\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\u0118\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\u0109\053\u011d\054\u0108\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\u0120\001\001\000" +
    "\002\001\001\000\004\016\u0122\001\001\000\002\001\001" +
    "\000\034\024\211\025\213\033\172\037\175\040\214\041" +
    "\173\043\u0124\044\217\056\207\057\176\060\204\061\201" +
    "\062\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\u012b\006\u012c\020\033\021\020\022" +
    "\030\023\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\u012e\001\001\000\002\001\001\000\004\004" +
    "\u0130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\u0135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\020\u013b\021\020\022" +
    "\030\023\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //fields
    Lexer lex;
    private List<String> syntaxErrors;

    //conect the parser with the lexer
    public Parser(Lexer lex){
        super(lex);
        syntaxErrors = new LinkedList<>();
    }

    //getters
    public Lexer getLexer(){
        return this.lex;
    }
    public List<String> getSyntaxErrors(){
        return this.syntaxErrors;
    }
    
    /*SOBREESCRIBIR LOS METODOS DE ERROR*/
    public void syntax_error(Symbol cur_token) {
        String mss = "Simbolo: " + symbl_name_from_id(cur_token.sym)
                    + ", linea: " + cur_token.left
                    + ", columna: " + cur_token.right;
        if (expected_token_ids().isEmpty()) {
            mss += " -- ya no se esperaba ningun simbolo";
        }
        syntaxErrors.add(mss);
    }
    public void unrecovered_syntax_error(Symbol cur_token) {
        syntaxErrors.add("Errores de sintaxis severos detectados, revisa municiosamente el codigo");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= header type_b const_b var_b functions_b procedure_b main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= PROGRAM ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // var_type ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var_type ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // var_type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_type ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_type ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // id_list ::= id_list COMA ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // id_list ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // range ::= expression DOT DOT DOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arr_range ::= CORCHETE_L expression DOT DOT expression CORCHETE_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr_range",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // record_b ::= ID COLON var_type SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_b",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // record_b ::= ID COLON PACKED ARRAY arr_range OF var_type SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_b",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression_list ::= expression_list COMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression_list ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type_b ::= TYPE type_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_b",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_b ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_b",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_dec ::= id_list EQUALS var_type SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_dec ::= id_list EQUALS range SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type_dec ::= id_list EQUALS ARRAY arr_range OF var_type SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_dec ::= id_list EQUALS RECORD record_b END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // const_b ::= CONST const_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_b",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // const_b ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_b",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // const_dec ::= const_dec ID EQUALS expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_b ::= VAR var_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_b",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_b ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_b",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_dec ::= id_list COLON var_type SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var_dec ::= id_list COLON range SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_dec ::= id_list COLON ARRAY arr_range OF var_type SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_dec ::= id_list EQUALS RECORD record_b END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression AND expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= expression AND THEN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression OR expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression OR ELSE expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= bool_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bool_exp ::= arit_exp EQUALS arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bool_exp ::= arit_exp DIFFERENT arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bool_exp ::= arit_exp GRATER arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bool_exp ::= arit_exp LESS arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bool_exp ::= arit_exp GRATER_EQUALS arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bool_exp ::= arit_exp LESS_EQUALS arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bool_exp ::= arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arit_exp ::= arit_exp PLUS arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arit_exp ::= arit_exp MINUS arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arit_exp ::= arit_exp TIMES arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arit_exp ::= arit_exp DIV arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arit_exp ::= arit_exp MOD arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arit_exp ::= literals 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arit_exp ::= ID CORCHETE_L arit_exp CORCHETE_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arit_exp ::= ID DOT ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arit_exp ::= ID PARENTESIS_L id_list PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arit_exp ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arit_exp ::= PARENTESIS_L expression PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // literals ::= BOOLEAN_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // literals ::= INTEGER_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // literals ::= REAL_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // literals ::= CHAR_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // literals ::= STRING_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // conditional ::= if_stmt pos_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if_stmt ::= IF PARENTESIS_L expression PARENTESIS_R THEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // pos_if ::= stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_if",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // pos_if ::= stmt elif_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_if",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // pos_if ::= BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_if",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // pos_if ::= BEGIN block_stmt END elif_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_if",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // elif_stmt ::= elif_stmt ELSE IF PARENTESIS_L expression PARENTESIS_R THEN pos_elif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // elif_stmt ::= ELSE IF PARENTESIS_L expression PARENTESIS_R THEN pos_elif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // elif_stmt ::= else_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // pos_elif ::= stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_elif",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // pos_elif ::= stmt else_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_elif",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // pos_elif ::= BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_elif",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // pos_elif ::= BEGIN block_stmt END else_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_elif",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // else_stmt ::= ELSE statements_wc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // else_stmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // statements_wc ::= stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_wc",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statements_wc ::= BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_wc",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // case_stmt ::= CASE PARENTESIS_L expression PARENTESIS_R OF case_block ELSE single_stm END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // case_block ::= labels COLON single_stm SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_block",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // labels ::= labels COMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // labels ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // single_stm ::= ID ASSIGNATION expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_stm",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // single_stm ::= ID PARENTESIS_L expression_list PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_stm",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // single_stm ::= ID DOT ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_stm",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // single_stm ::= definite_fun 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_stm",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // while_stmt ::= WHILE PARENTESIS_L expression PARENTESIS_R DO statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // for_stmt ::= FOR ID ASSIGNATION expression TO expression DO statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // repeat_stmt ::= REPEAT statements UNTIL expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // statements ::= stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // statements ::= stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // statements ::= BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // block_stmt ::= list_stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // block_stmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // list_stmts ::= more_stmts SEMICOLON stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // list_stmts ::= more_stmts SEMICOLON stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // list_stmts ::= stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // list_stmts ::= stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // more_stmts ::= more_stmts stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // more_stmts ::= stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // stmt ::= conditional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // stmt ::= case_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // stmt ::= while_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // stmt ::= for_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // stmt ::= repeat_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // stmt ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // stmt ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // stmt ::= ID ASSIGNATION expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // stmt ::= ID PARENTESIS_L expression_list PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // stmt ::= ID DOT ID ASSIGNATION expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // stmt ::= definite_fun 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // functions_b ::= functions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_b",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // functions_b ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_b",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // functions ::= functions function_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // function_dec ::= function_dec FUNCTION ID PARENTESIS_L arguments PARENTESIS_R COLON var_type SEMICOLON var_b BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_dec",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // procedure_b ::= procedures 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_b",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // procedure_b ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_b",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // procedures ::= procedures procedure_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // procedures ::= procedure_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // procedure_dec ::= PROCEDURE ID PARENTESIS_L arguments PARENTESIS_R SEMICOLON var_b BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_dec",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // arguments ::= arguments COMA type_arg 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // arguments ::= type_arg 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // arguments ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // type_arg ::= VAR id_list COLON var_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arg",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // type_arg ::= id_list COLON var_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arg",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // main ::= BEGIN block_stmt END DOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // definite_fun ::= writefn 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definite_fun",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // definite_fun ::= readfn 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definite_fun",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // writefn ::= WRITELN PARENTESIS_L expression_list PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writefn",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // readfn ::= READLN PARENTESIS_L expression_list PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readfn",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
