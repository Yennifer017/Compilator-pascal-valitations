
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compi2.pascal.valitations.analysis;

import java_cup.runtime.*;
import java.util.*;
import compi2.pascal.valitations.analysis.typet.*;
import compi2.pascal.valitations.analyzator.*;
import compi2.pascal.valitations.semantic.expr.*;
import compi2.pascal.valitations.semantic.obj.*;
import compi2.pascal.valitations.semantic.ast.*;
import compi2.pascal.valitations.semantic.module.*;
import compi2.pascal.valitations.util.Position;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\232\000\002\002\004\000\002\002\011\000\002\003" +
    "\005\000\002\003\004\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\004\005\000\002" +
    "\004\003\000\002\032\007\000\002\033\010\000\002\005" +
    "\005\000\002\005\003\000\002\013\004\000\002\021\006" +
    "\000\002\021\012\000\002\012\004\000\002\012\002\000" +
    "\002\030\005\000\002\030\003\000\002\007\004\000\002" +
    "\007\002\000\002\010\004\000\002\010\003\000\002\011" +
    "\006\000\002\011\006\000\002\011\011\000\002\011\010" +
    "\000\002\014\004\000\002\014\002\000\002\015\004\000" +
    "\002\015\003\000\002\022\006\000\002\017\004\000\002" +
    "\017\002\000\002\016\004\000\002\016\003\000\002\020" +
    "\006\000\002\020\006\000\002\020\011\000\002\020\010" +
    "\000\002\023\005\000\002\023\006\000\002\023\005\000" +
    "\002\023\006\000\002\023\004\000\002\023\003\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\003" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\003\000\002\025\006\000\002\025\005\000\002\025" +
    "\006\000\002\025\003\000\002\025\005\000\002\025\004" +
    "\000\002\025\004\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\070\004\000\002\070\005\000\002\070\006\000\002\027" +
    "\007\000\002\043\003\000\002\043\003\000\002\043\005" +
    "\000\002\067\004\000\002\067\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\005\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\052" +
    "\014\000\002\071\007\000\002\071\006\000\002\031\005" +
    "\000\002\031\003\000\002\044\004\000\002\044\003\000" +
    "\002\044\006\000\002\045\003\000\002\045\004\000\002" +
    "\045\003\000\002\045\004\000\002\047\010\000\002\050" +
    "\012\000\002\051\006\000\002\042\004\000\002\042\003" +
    "\000\002\042\006\000\002\041\003\000\002\041\002\000" +
    "\002\037\003\000\002\037\004\000\002\037\003\000\002" +
    "\037\005\000\002\037\004\000\002\040\003\000\002\040" +
    "\004\000\002\040\005\000\002\040\004\000\002\040\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\005\000" +
    "\002\034\006\000\002\034\007\000\002\034\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\063\003\000\002\063\002" +
    "\000\002\064\004\000\002\064\003\000\002\057\017\000" +
    "\002\061\003\000\002\061\002\000\002\062\004\000\002" +
    "\062\003\000\002\060\015\000\002\065\005\000\002\065" +
    "\003\000\002\065\002\000\002\066\006\000\002\066\005" +
    "\000\002\046\006\000\002\054\003\000\002\054\003\000" +
    "\002\055\006\000\002\056\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0148\000\004\062\006\001\002\000\004\002\u014a\001" +
    "\002\000\016\034\uffe8\036\uffe8\046\uffe8\061\uffe8\070\012" +
    "\072\uffe8\001\002\000\004\114\007\001\002\000\020\030" +
    "\010\034\ufffe\036\ufffe\046\ufffe\061\ufffe\070\ufffe\072\ufffe" +
    "\001\002\000\016\034\uffff\036\uffff\046\uffff\061\uffff\070" +
    "\uffff\072\uffff\001\002\000\014\034\uffe0\036\201\046\uffe0" +
    "\061\uffe0\072\uffe0\001\002\000\004\114\013\001\002\000" +
    "\010\017\ufff5\026\ufff5\031\ufff5\001\002\000\016\034\uffe6" +
    "\036\uffe6\046\uffe6\061\uffe6\072\uffe6\114\013\001\002\000" +
    "\006\017\020\026\017\001\002\000\014\034\uffe9\036\uffe9" +
    "\046\uffe9\061\uffe9\072\uffe9\001\002\000\004\114\177\001" +
    "\002\000\046\004\024\005\043\012\036\033\047\055\027" +
    "\063\041\075\044\076\045\077\033\100\025\101\035\102" +
    "\050\103\031\104\023\114\030\115\046\116\042\117\021" +
    "\001\002\000\110\004\uffb9\005\uffb9\006\uffb9\007\uffb9\013" +
    "\uffb9\015\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\035" +
    "\uffb9\037\uffb9\040\uffb9\042\uffb9\043\uffb9\045\uffb9\050\uffb9" +
    "\053\uffb9\057\uffb9\064\uffb9\067\uffb9\071\uffb9\073\uffb9\105" +
    "\uffb9\106\uffb9\110\uffb9\111\uffb9\114\uffb9\001\002\000\060" +
    "\013\uffcf\015\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\035\uffcf\040\uffcf\042\uffcf\043\uffcf\045\uffcf\050\uffcf" +
    "\057\uffcf\064\uffcf\067\uffcf\071\uffcf\073\uffcf\105\uffcf\106" +
    "\uffcf\110\uffcf\111\uffcf\114\uffcf\001\002\000\110\004\uffb5" +
    "\005\uffb5\006\uffb5\007\uffb5\013\uffb5\015\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\026\uffb5\027\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\035\uffb5\037\uffb5\040\uffb5\042" +
    "\uffb5\043\uffb5\045\uffb5\050\uffb5\053\uffb5\057\uffb5\064\uffb5" +
    "\067\uffb5\071\uffb5\073\uffb5\105\uffb5\106\uffb5\110\uffb5\111" +
    "\uffb5\114\uffb5\001\002\000\024\004\024\005\043\012\036" +
    "\103\031\104\023\114\054\115\046\116\042\117\021\001" +
    "\002\000\010\013\ufff9\026\ufff9\030\ufff9\001\002\000\110" +
    "\004\uffc1\005\uffc1\006\uffc1\007\uffc1\013\uffc1\015\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\032\uffc1\035\uffc1\037\uffc1\040" +
    "\uffc1\042\uffc1\043\uffc1\045\uffc1\050\uffc1\053\uffc1\057\uffc1" +
    "\064\uffc1\067\uffc1\071\uffc1\073\uffc1\105\uffc1\106\uffc1\110" +
    "\uffc1\111\uffc1\114\uffc1\001\002\000\026\004\024\005\043" +
    "\012\036\055\027\103\031\104\023\114\054\115\046\116" +
    "\042\117\021\001\002\000\046\004\uffbd\005\uffbd\006\uffbd" +
    "\007\uffbd\012\055\014\057\017\uffbd\020\uffbd\021\uffbd\022" +
    "\uffbd\023\uffbd\024\uffbd\027\056\030\ufff7\032\uffbd\037\uffbd" +
    "\053\uffbd\057\uffbd\001\002\000\110\004\uffb7\005\uffb7\006" +
    "\uffb7\007\uffb7\013\uffb7\015\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\024\uffb7\026\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\032\uffb7\035\uffb7\037\uffb7\040\uffb7\042\uffb7\043\uffb7" +
    "\045\uffb7\050\uffb7\053\uffb7\057\uffb7\064\uffb7\067\uffb7\071" +
    "\uffb7\073\uffb7\105\uffb7\106\uffb7\110\uffb7\111\uffb7\114\uffb7" +
    "\001\002\000\004\030\174\001\002\000\010\013\ufffa\026" +
    "\ufffa\030\ufffa\001\002\000\110\004\062\005\065\006\067" +
    "\007\063\013\uffc8\015\uffc8\017\164\020\162\021\161\022" +
    "\163\023\160\024\165\026\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\035\uffc8\037\066\040\uffc8\042\uffc8\043\uffc8\045" +
    "\uffc8\050\uffc8\053\061\057\uffc8\064\uffc8\067\uffc8\071\uffc8" +
    "\073\uffc8\105\uffc8\106\uffc8\110\uffc8\111\uffc8\114\uffc8\001" +
    "\002\000\010\013\ufff8\026\ufff8\030\ufff8\001\002\000\026" +
    "\004\024\005\043\012\036\055\027\103\031\104\023\114" +
    "\054\115\046\116\042\117\021\001\002\000\010\027\152" +
    "\032\107\057\110\001\002\000\004\030\151\001\002\000" +
    "\004\114\130\001\002\000\110\004\uffb8\005\uffb8\006\uffb8" +
    "\007\uffb8\013\uffb8\015\uffb8\017\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8" +
    "\032\uffb8\035\uffb8\037\uffb8\040\uffb8\042\uffb8\043\uffb8\045" +
    "\uffb8\050\uffb8\053\uffb8\057\uffb8\064\uffb8\067\uffb8\071\uffb8" +
    "\073\uffb8\105\uffb8\106\uffb8\110\uffb8\111\uffb8\114\uffb8\001" +
    "\002\000\024\004\024\005\043\012\036\103\031\104\023" +
    "\114\054\115\046\116\042\117\021\001\002\000\010\013" +
    "\ufffd\026\ufffd\030\ufffd\001\002\000\010\013\ufffc\026\ufffc" +
    "\030\ufffc\001\002\000\110\004\uffb6\005\uffb6\006\uffb6\007" +
    "\uffb6\013\uffb6\015\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\024\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032" +
    "\uffb6\035\uffb6\037\uffb6\040\uffb6\042\uffb6\043\uffb6\045\uffb6" +
    "\050\uffb6\053\uffb6\057\uffb6\064\uffb6\067\uffb6\071\uffb6\073" +
    "\uffb6\105\uffb6\106\uffb6\110\uffb6\111\uffb6\114\uffb6\001\002" +
    "\000\004\014\052\001\002\000\010\013\ufffb\026\ufffb\030" +
    "\ufffb\001\002\000\004\056\123\001\002\000\026\004\024" +
    "\005\043\012\036\055\027\103\031\104\023\114\054\115" +
    "\046\116\042\117\021\001\002\000\010\027\117\032\107" +
    "\057\110\001\002\000\114\004\uffbd\005\uffbd\006\uffbd\007" +
    "\uffbd\012\055\013\uffbd\014\057\015\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\024\uffbd\026\uffbd\027\056\030" +
    "\uffbd\031\uffbd\032\uffbd\035\uffbd\037\uffbd\040\uffbd\042\uffbd" +
    "\043\uffbd\045\uffbd\050\uffbd\053\uffbd\057\uffbd\064\uffbd\067" +
    "\uffbd\071\uffbd\073\uffbd\105\uffbd\106\uffbd\110\uffbd\111\uffbd" +
    "\114\uffbd\001\002\000\026\004\024\005\043\012\036\055" +
    "\027\103\031\104\023\114\054\115\046\116\042\117\021" +
    "\001\002\000\004\114\076\001\002\000\024\004\024\005" +
    "\043\012\036\103\031\104\023\114\054\115\046\116\042" +
    "\117\021\001\002\000\020\004\062\005\065\006\067\007" +
    "\063\015\064\037\066\053\061\001\002\000\024\004\024" +
    "\005\043\012\036\103\031\104\023\114\054\115\046\116" +
    "\042\117\021\001\002\000\024\004\024\005\043\012\036" +
    "\103\031\104\023\114\054\115\046\116\042\117\021\001" +
    "\002\000\024\004\024\005\043\012\036\103\031\104\023" +
    "\114\054\115\046\116\042\117\021\001\002\000\110\004" +
    "\uffc0\005\uffc0\006\uffc0\007\uffc0\013\uffc0\015\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\035\uffc0\037\uffc0\040\uffc0" +
    "\042\uffc0\043\uffc0\045\uffc0\050\uffc0\053\uffc0\057\uffc0\064" +
    "\uffc0\067\uffc0\071\uffc0\073\uffc0\105\uffc0\106\uffc0\110\uffc0" +
    "\111\uffc0\114\uffc0\001\002\000\024\004\024\005\043\012" +
    "\036\103\031\104\023\114\054\115\046\116\042\117\021" +
    "\001\002\000\024\004\024\005\043\012\036\103\031\104" +
    "\023\114\054\115\046\116\042\117\021\001\002\000\024" +
    "\004\024\005\043\012\036\103\031\104\023\114\054\115" +
    "\046\116\042\117\021\001\002\000\110\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\013\uffc5\015\uffc5\017\uffc5\020\uffc5\021" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\026\uffc5\027\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\035\uffc5\037\uffc5\040\uffc5\042\uffc5\043" +
    "\uffc5\045\uffc5\050\uffc5\053\uffc5\057\uffc5\064\uffc5\067\uffc5" +
    "\071\uffc5\073\uffc5\105\uffc5\106\uffc5\110\uffc5\111\uffc5\114" +
    "\uffc5\001\002\000\110\004\uffc4\005\uffc4\006\uffc4\007\uffc4" +
    "\013\uffc4\015\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\035\uffc4\037\uffc4\040\uffc4\042\uffc4\043\uffc4\045\uffc4\050" +
    "\uffc4\053\uffc4\057\uffc4\064\uffc4\067\uffc4\071\uffc4\073\uffc4" +
    "\105\uffc4\106\uffc4\110\uffc4\111\uffc4\114\uffc4\001\002\000" +
    "\110\004\uffc6\005\uffc6\006\067\007\063\013\uffc6\015\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\035\uffc6\037\066" +
    "\040\uffc6\042\uffc6\043\uffc6\045\uffc6\050\uffc6\053\061\057" +
    "\uffc6\064\uffc6\067\uffc6\071\uffc6\073\uffc6\105\uffc6\106\uffc6" +
    "\110\uffc6\111\uffc6\114\uffc6\001\002\000\110\004\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\013\uffc3\015\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\035\uffc3\037\uffc3\040\uffc3\042\uffc3" +
    "\043\uffc3\045\uffc3\050\uffc3\053\uffc3\057\uffc3\064\uffc3\067" +
    "\uffc3\071\uffc3\073\uffc3\105\uffc3\106\uffc3\110\uffc3\111\uffc3" +
    "\114\uffc3\001\002\000\110\004\uffc7\005\uffc7\006\067\007" +
    "\063\013\uffc7\015\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\035\uffc7\037\066\040\uffc7\042\uffc7\043\uffc7\045\uffc7" +
    "\050\uffc7\053\061\057\uffc7\064\uffc7\067\uffc7\071\uffc7\073" +
    "\uffc7\105\uffc7\106\uffc7\110\uffc7\111\uffc7\114\uffc7\001\002" +
    "\000\110\004\uffc2\005\uffc2\006\uffc2\007\uffc2\013\uffc2\015" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2" +
    "\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\035\uffc2\037" +
    "\uffc2\040\uffc2\042\uffc2\043\uffc2\045\uffc2\050\uffc2\053\uffc2" +
    "\057\uffc2\064\uffc2\067\uffc2\071\uffc2\073\uffc2\105\uffc2\106" +
    "\uffc2\110\uffc2\111\uffc2\114\uffc2\001\002\000\112\004\ufff1" +
    "\005\ufff1\006\ufff1\007\ufff1\013\ufff1\015\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\032\ufff1\035\ufff1\037\ufff1\040" +
    "\ufff1\042\ufff1\043\ufff1\045\ufff1\050\ufff1\053\ufff1\057\ufff1" +
    "\064\ufff1\067\ufff1\071\ufff1\073\ufff1\105\ufff1\106\ufff1\110" +
    "\ufff1\111\ufff1\114\ufff1\001\002\000\110\004\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\013\uffbf\015\uffbf\017\uffbf\020\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\024\uffbf\026\uffbf\027\100\030\uffbf" +
    "\031\uffbf\032\uffbf\035\uffbf\037\uffbf\040\uffbf\042\uffbf\043" +
    "\uffbf\045\uffbf\050\uffbf\053\uffbf\057\uffbf\064\uffbf\067\uffbf" +
    "\071\uffbf\073\uffbf\105\uffbf\106\uffbf\110\uffbf\111\uffbf\114" +
    "\uffbf\001\002\000\004\114\101\001\002\000\112\004\ufff2" +
    "\005\ufff2\006\ufff2\007\ufff2\013\ufff2\015\ufff2\017\ufff2\020" +
    "\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2" +
    "\027\ufff2\030\ufff2\031\ufff2\032\ufff2\035\ufff2\037\ufff2\040" +
    "\ufff2\042\ufff2\043\ufff2\045\ufff2\050\ufff2\053\ufff2\057\ufff2" +
    "\064\ufff2\067\ufff2\071\ufff2\073\ufff2\105\ufff2\106\ufff2\110" +
    "\ufff2\111\ufff2\114\ufff2\001\002\000\012\013\uffea\026\uffea" +
    "\032\107\057\110\001\002\000\006\013\105\026\104\001" +
    "\002\000\026\004\024\005\043\012\036\055\027\103\031" +
    "\104\023\114\054\115\046\116\042\117\021\001\002\000" +
    "\110\004\uffbe\005\uffbe\006\uffbe\007\uffbe\013\uffbe\015\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\035\uffbe\037\uffbe" +
    "\040\uffbe\042\uffbe\043\uffbe\045\uffbe\050\uffbe\053\uffbe\057" +
    "\uffbe\064\uffbe\067\uffbe\071\uffbe\073\uffbe\105\uffbe\106\uffbe" +
    "\110\uffbe\111\uffbe\114\uffbe\001\002\000\012\013\uffeb\026" +
    "\uffeb\032\107\057\110\001\002\000\030\004\024\005\043" +
    "\012\036\055\027\066\114\103\031\104\023\114\054\115" +
    "\046\116\042\117\021\001\002\000\030\004\024\005\043" +
    "\012\036\042\112\055\027\103\031\104\023\114\054\115" +
    "\046\116\042\117\021\001\002\000\060\013\uffd2\015\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\107\035\uffd2\040" +
    "\uffd2\042\uffd2\043\uffd2\045\uffd2\050\uffd2\057\uffd2\064\uffd2" +
    "\067\uffd2\071\uffd2\073\uffd2\105\uffd2\106\uffd2\110\uffd2\111" +
    "\uffd2\114\uffd2\001\002\000\026\004\024\005\043\012\036" +
    "\055\027\103\031\104\023\114\054\115\046\116\042\117" +
    "\021\001\002\000\060\013\uffd1\015\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\035\uffd1\040\uffd1\042\uffd1\043" +
    "\uffd1\045\uffd1\050\uffd1\057\uffd1\064\uffd1\067\uffd1\071\uffd1" +
    "\073\uffd1\105\uffd1\106\uffd1\110\uffd1\111\uffd1\114\uffd1\001" +
    "\002\000\026\004\024\005\043\012\036\055\027\103\031" +
    "\104\023\114\054\115\046\116\042\117\021\001\002\000" +
    "\060\013\uffd4\015\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\035\uffd4\040\uffd4\042\uffd4\043\uffd4\045\uffd4\050" +
    "\uffd4\057\uffd4\064\uffd4\067\uffd4\071\uffd4\073\uffd4\105\uffd4" +
    "\106\uffd4\110\uffd4\111\uffd4\114\uffd4\001\002\000\060\013" +
    "\uffd3\015\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\107" +
    "\035\uffd3\040\uffd3\042\uffd3\043\uffd3\045\uffd3\050\uffd3\057" +
    "\110\064\uffd3\067\uffd3\071\uffd3\073\uffd3\105\uffd3\106\uffd3" +
    "\110\uffd3\111\uffd3\114\uffd3\001\002\000\004\027\120\001" +
    "\002\000\026\004\024\005\043\012\036\055\027\103\031" +
    "\104\023\114\054\115\046\116\042\117\021\001\002\000" +
    "\010\015\122\032\107\057\110\001\002\000\004\056\ufff3" +
    "\001\002\000\020\075\044\076\045\077\033\100\025\101" +
    "\035\102\050\114\125\001\002\000\004\030\126\001\002" +
    "\000\010\013\ufff7\026\ufff7\030\ufff7\001\002\000\016\034" +
    "\uffe3\036\uffe3\046\uffe3\061\uffe3\072\uffe3\114\uffe3\001\002" +
    "\000\110\004\uffba\005\uffba\006\067\007\063\013\uffba\015" +
    "\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba" +
    "\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\035\uffba\037" +
    "\066\040\uffba\042\uffba\043\uffba\045\uffba\050\uffba\053\061" +
    "\057\uffba\064\uffba\067\uffba\071\uffba\073\uffba\105\uffba\106" +
    "\uffba\110\uffba\111\uffba\114\uffba\001\002\000\004\031\140" +
    "\001\002\000\006\043\uffec\114\130\001\002\000\004\043" +
    "\133\001\002\000\004\030\134\001\002\000\016\034\uffe2" +
    "\036\uffe2\046\uffe2\061\uffe2\072\uffe2\114\uffe2\001\002\000" +
    "\006\043\uffec\114\130\001\002\000\004\043\ufff0\001\002" +
    "\000\004\043\uffed\001\002\000\022\060\141\075\044\076" +
    "\045\077\033\100\025\101\035\102\050\114\125\001\002" +
    "\000\004\033\144\001\002\000\004\030\143\001\002\000" +
    "\006\043\uffef\114\uffef\001\002\000\004\014\052\001\002" +
    "\000\004\056\146\001\002\000\020\075\044\076\045\077" +
    "\033\100\025\101\035\102\050\114\125\001\002\000\004" +
    "\030\150\001\002\000\006\043\uffee\114\uffee\001\002\000" +
    "\016\034\uffe4\036\uffe4\046\uffe4\061\uffe4\072\uffe4\114\uffe4" +
    "\001\002\000\004\027\153\001\002\000\004\027\154\001" +
    "\002\000\026\004\024\005\043\012\036\055\027\103\031" +
    "\104\023\114\054\115\046\116\042\117\021\001\002\000" +
    "\010\030\ufff4\032\107\057\110\001\002\000\010\013\157" +
    "\032\107\057\110\001\002\000\110\004\uffbc\005\uffbc\006" +
    "\uffbc\007\uffbc\013\uffbc\015\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\026\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\032\uffbc\035\uffbc\037\uffbc\040\uffbc\042\uffbc\043\uffbc" +
    "\045\uffbc\050\uffbc\053\uffbc\057\uffbc\064\uffbc\067\uffbc\071" +
    "\uffbc\073\uffbc\105\uffbc\106\uffbc\110\uffbc\111\uffbc\114\uffbc" +
    "\001\002\000\024\004\024\005\043\012\036\103\031\104" +
    "\023\114\054\115\046\116\042\117\021\001\002\000\024" +
    "\004\024\005\043\012\036\103\031\104\023\114\054\115" +
    "\046\116\042\117\021\001\002\000\024\004\024\005\043" +
    "\012\036\103\031\104\023\114\054\115\046\116\042\117" +
    "\021\001\002\000\024\004\024\005\043\012\036\103\031" +
    "\104\023\114\054\115\046\116\042\117\021\001\002\000" +
    "\024\004\024\005\043\012\036\103\031\104\023\114\054" +
    "\115\046\116\042\117\021\001\002\000\024\004\024\005" +
    "\043\012\036\103\031\104\023\114\054\115\046\116\042" +
    "\117\021\001\002\000\074\004\062\005\065\006\067\007" +
    "\063\013\uffc9\015\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\035\uffc9\037\066\040\uffc9\042\uffc9\043\uffc9\045" +
    "\uffc9\050\uffc9\053\061\057\uffc9\064\uffc9\067\uffc9\071\uffc9" +
    "\073\uffc9\105\uffc9\106\uffc9\110\uffc9\111\uffc9\114\uffc9\001" +
    "\002\000\074\004\062\005\065\006\067\007\063\013\uffce" +
    "\015\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\035" +
    "\uffce\037\066\040\uffce\042\uffce\043\uffce\045\uffce\050\uffce" +
    "\053\061\057\uffce\064\uffce\067\uffce\071\uffce\073\uffce\105" +
    "\uffce\106\uffce\110\uffce\111\uffce\114\uffce\001\002\000\074" +
    "\004\062\005\065\006\067\007\063\013\uffcb\015\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\035\uffcb\037\066" +
    "\040\uffcb\042\uffcb\043\uffcb\045\uffcb\050\uffcb\053\061\057" +
    "\uffcb\064\uffcb\067\uffcb\071\uffcb\073\uffcb\105\uffcb\106\uffcb" +
    "\110\uffcb\111\uffcb\114\uffcb\001\002\000\074\004\062\005" +
    "\065\006\067\007\063\013\uffcd\015\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\031\uffcd\032\uffcd\035\uffcd\037\066\040\uffcd\042" +
    "\uffcd\043\uffcd\045\uffcd\050\uffcd\053\061\057\uffcd\064\uffcd" +
    "\067\uffcd\071\uffcd\073\uffcd\105\uffcd\106\uffcd\110\uffcd\111" +
    "\uffcd\114\uffcd\001\002\000\074\004\062\005\065\006\067" +
    "\007\063\013\uffcc\015\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\035\uffcc\037\066\040\uffcc\042\uffcc\043\uffcc" +
    "\045\uffcc\050\uffcc\053\061\057\uffcc\064\uffcc\067\uffcc\071" +
    "\uffcc\073\uffcc\105\uffcc\106\uffcc\110\uffcc\111\uffcc\114\uffcc" +
    "\001\002\000\074\004\062\005\065\006\067\007\063\013" +
    "\uffca\015\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca" +
    "\035\uffca\037\066\040\uffca\042\uffca\043\uffca\045\uffca\050" +
    "\uffca\053\061\057\uffca\064\uffca\067\uffca\071\uffca\073\uffca" +
    "\105\uffca\106\uffca\110\uffca\111\uffca\114\uffca\001\002\000" +
    "\016\034\uffe5\036\uffe5\046\uffe5\061\uffe5\072\uffe5\114\uffe5" +
    "\001\002\000\060\013\uffd0\015\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\035\uffd0\040\uffd0\042\uffd0\043\uffd0" +
    "\045\uffd0\050\uffd0\057\uffd0\064\uffd0\067\uffd0\071\uffd0\073" +
    "\uffd0\105\uffd0\106\uffd0\110\uffd0\111\uffd0\114\uffd0\001\002" +
    "\000\110\004\uffbb\005\uffbb\006\uffbb\007\uffbb\013\uffbb\015" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\035\uffbb\037" +
    "\uffbb\040\uffbb\042\uffbb\043\uffbb\045\uffbb\050\uffbb\053\uffbb" +
    "\057\uffbb\064\uffbb\067\uffbb\071\uffbb\073\uffbb\105\uffbb\106" +
    "\uffbb\110\uffbb\111\uffbb\114\uffbb\001\002\000\010\017\ufff6" +
    "\026\ufff6\031\ufff6\001\002\000\014\034\uffe7\036\uffe7\046" +
    "\uffe7\061\uffe7\072\uffe7\001\002\000\004\114\u0143\001\002" +
    "\000\012\034\uffdb\046\uffdb\061\uffdb\072\203\001\002\000" +
    "\004\114\013\001\002\000\010\034\uff7a\046\207\061\uff7a" +
    "\001\002\000\010\034\uff78\046\uff78\061\uff78\001\002\000" +
    "\010\034\uff7b\046\207\061\uff7b\001\002\000\004\114\u0123" +
    "\001\002\000\006\034\uff75\061\211\001\002\000\004\114" +
    "\u010f\001\002\000\004\034\217\001\002\000\006\034\uff73" +
    "\061\uff73\001\002\000\006\034\uff76\061\211\001\002\000" +
    "\006\034\uff74\061\uff74\001\002\000\004\002\000\001\002" +
    "\000\030\035\237\043\uff91\045\244\050\231\064\245\073" +
    "\225\105\226\106\246\110\235\111\223\114\232\001\002" +
    "\000\036\030\uff7c\035\uff7c\042\uff7c\043\uff7c\045\uff7c\050" +
    "\uff7c\064\uff7c\071\uff7c\073\uff7c\105\uff7c\106\uff7c\110\uff7c" +
    "\111\uff7c\114\uff7c\001\002\000\036\030\uff7f\035\uff7f\042" +
    "\uff7f\043\uff7f\045\uff7f\050\uff7f\064\uff7f\071\uff7f\073\uff7f" +
    "\105\uff7f\106\uff7f\110\uff7f\111\uff7f\114\uff7f\001\002\000" +
    "\036\030\uff7e\035\uff7e\042\uff7e\043\uff7e\045\uff7e\050\uff7e" +
    "\064\uff7e\071\uff7e\073\uff7e\105\uff7e\106\uff7e\110\uff7e\111" +
    "\uff7e\114\uff7e\001\002\000\036\030\uff85\035\uff85\042\uff85" +
    "\043\uff85\045\uff85\050\uff85\064\uff85\071\uff85\073\uff85\105" +
    "\uff85\106\uff85\110\uff85\111\uff85\114\uff85\001\002\000\036" +
    "\030\uff6b\035\uff6b\042\uff6b\043\uff6b\045\uff6b\050\uff6b\064" +
    "\uff6b\071\uff6b\073\uff6b\105\uff6b\106\uff6b\110\uff6b\111\uff6b" +
    "\114\uff6b\001\002\000\004\012\u010a\001\002\000\004\012" +
    "\u0107\001\002\000\006\030\u0105\043\uff90\001\002\000\004" +
    "\043\uff92\001\002\000\004\012\u0101\001\002\000\010\012" +
    "\371\025\370\027\372\001\002\000\036\030\uff6a\035\uff6a" +
    "\042\uff6a\043\uff6a\045\uff6a\050\uff6a\064\uff6a\071\uff6a\073" +
    "\uff6a\105\uff6a\106\uff6a\110\uff6a\111\uff6a\114\uff6a\001\002" +
    "\000\030\035\237\043\uff8e\045\244\050\231\064\245\073" +
    "\225\105\226\106\246\110\235\111\223\114\232\001\002" +
    "\000\036\030\uff86\035\uff86\042\uff86\043\uff86\045\uff86\050" +
    "\uff86\064\uff86\071\uff86\073\uff86\105\uff86\106\uff86\110\uff86" +
    "\111\uff86\114\uff86\001\002\000\036\030\uff81\035\uff81\042" +
    "\uff81\043\uff81\045\uff81\050\uff81\064\uff81\071\uff81\073\uff81" +
    "\105\uff81\106\uff81\110\uff81\111\uff81\114\uff81\001\002\000" +
    "\004\012\322\001\002\000\036\030\uff80\035\uff80\042\uff80" +
    "\043\uff80\045\uff80\050\uff80\064\uff80\071\uff80\073\uff80\105" +
    "\uff80\106\uff80\110\uff80\111\uff80\114\uff80\001\002\000\004" +
    "\043\320\001\002\000\030\034\275\035\237\045\244\050" +
    "\231\064\245\073\225\105\226\106\246\110\235\111\223" +
    "\114\232\001\002\000\036\030\uff7d\035\uff7d\042\uff7d\043" +
    "\uff7d\045\uff7d\050\uff7d\064\uff7d\071\uff7d\073\uff7d\105\uff7d" +
    "\106\uff7d\110\uff7d\111\uff7d\114\uff7d\001\002\000\004\114" +
    "\264\001\002\000\030\034\253\035\237\045\244\050\231" +
    "\064\245\073\225\105\226\106\246\110\235\111\223\114" +
    "\232\001\002\000\004\012\247\001\002\000\026\004\024" +
    "\005\043\012\036\055\027\103\031\104\023\114\054\115" +
    "\046\116\042\117\021\001\002\000\006\013\251\026\104" +
    "\001\002\000\036\030\uff68\035\uff68\042\uff68\043\uff68\045" +
    "\uff68\050\uff68\064\uff68\071\uff68\073\uff68\105\uff68\106\uff68" +
    "\110\uff68\111\uff68\114\uff68\001\002\000\004\030\263\001" +
    "\002\000\030\035\237\043\uff91\045\244\050\231\064\245" +
    "\073\225\105\226\106\246\110\235\111\223\114\232\001" +
    "\002\000\036\030\uff94\035\uff94\042\uff94\043\uff94\045\uff94" +
    "\050\uff94\064\uff94\071\uff94\073\uff94\105\uff94\106\uff94\110" +
    "\uff94\111\uff94\114\uff94\001\002\000\004\071\256\001\002" +
    "\000\026\004\024\005\043\012\036\055\027\103\031\104" +
    "\023\114\054\115\046\116\042\117\021\001\002\000\042" +
    "\030\uff96\032\107\035\uff96\042\uff96\043\uff96\045\uff96\050" +
    "\uff96\057\110\064\uff96\071\uff96\073\uff96\105\uff96\106\uff96" +
    "\110\uff96\111\uff96\114\uff96\001\002\000\004\043\261\001" +
    "\002\000\004\030\262\001\002\000\036\030\uff93\035\uff93" +
    "\042\uff93\043\uff93\045\uff93\050\uff93\064\uff93\071\uff93\073" +
    "\uff93\105\uff93\106\uff93\110\uff93\111\uff93\114\uff93\001\002" +
    "\000\036\030\uff95\035\uff95\042\uff95\043\uff95\045\uff95\050" +
    "\uff95\064\uff95\071\uff95\073\uff95\105\uff95\106\uff95\110\uff95" +
    "\111\uff95\114\uff95\001\002\000\004\025\265\001\002\000" +
    "\026\004\024\005\043\012\036\055\027\103\031\104\023" +
    "\114\054\115\046\116\042\117\021\001\002\000\010\032" +
    "\107\057\110\067\267\001\002\000\026\004\024\005\043" +
    "\012\036\055\027\103\031\104\023\114\054\115\046\116" +
    "\042\117\021\001\002\000\010\032\107\040\271\057\110" +
    "\001\002\000\030\034\253\035\237\045\244\050\231\064" +
    "\245\073\225\105\226\106\246\110\235\111\223\114\232" +
    "\001\002\000\036\030\uff97\035\uff97\042\uff97\043\uff97\045" +
    "\uff97\050\uff97\064\uff97\071\uff97\073\uff97\105\uff97\106\uff97" +
    "\110\uff97\111\uff97\114\uff97\001\002\000\036\030\uffb0\035" +
    "\uffb0\042\uffb0\043\uffb0\045\uffb0\050\uffb0\064\uffb0\071\uffb0" +
    "\073\uffb0\105\uffb0\106\uffb0\110\uffb0\111\uffb0\114\uffb0\001" +
    "\002\000\036\030\301\035\uffb4\042\302\043\uffb4\045\uffb4" +
    "\050\uffb4\064\uffb4\071\uffb4\073\uffb4\105\uffb4\106\uffb4\110" +
    "\uffb4\111\uffb4\114\uffb4\001\002\000\030\035\237\043\uff91" +
    "\045\244\050\231\064\245\073\225\105\226\106\246\110" +
    "\235\111\223\114\232\001\002\000\036\030\uffaf\035\uffaf" +
    "\042\uffaf\043\uffaf\045\uffaf\050\uffaf\064\uffaf\071\uffaf\073" +
    "\uffaf\105\uffaf\106\uffaf\110\uffaf\111\uffaf\114\uffaf\001\002" +
    "\000\004\043\300\001\002\000\036\030\uffae\035\uffae\042" +
    "\uffae\043\uffae\045\uffae\050\uffae\064\uffae\071\uffae\073\uffae" +
    "\105\uffae\106\uffae\110\uffae\111\uffae\114\uffae\001\002\000" +
    "\036\030\uffb3\035\uffb3\042\uffb3\043\uffb3\045\uffb3\050\uffb3" +
    "\064\uffb3\071\uffb3\073\uffb3\105\uffb3\106\uffb3\110\uffb3\111" +
    "\uffb3\114\uffb3\001\002\000\030\034\312\035\237\045\244" +
    "\050\231\064\245\073\225\105\226\106\246\110\235\111" +
    "\223\114\232\001\002\000\004\030\uffa8\001\002\000\004" +
    "\030\uffa5\001\002\000\004\030\uffa7\001\002\000\004\030" +
    "\317\001\002\000\004\030\uffaa\001\002\000\036\030\uffb2" +
    "\035\uffb2\042\uffb2\043\uffb2\045\uffb2\050\uffb2\064\uffb2\071" +
    "\uffb2\073\uffb2\105\uffb2\106\uffb2\110\uffb2\111\uffb2\114\uffb2" +
    "\001\002\000\004\030\uffab\001\002\000\030\035\237\043" +
    "\uff91\045\244\050\231\064\245\073\225\105\226\106\246" +
    "\110\235\111\223\114\232\001\002\000\036\030\uffac\035" +
    "\uffac\042\uffac\043\uffac\045\uffac\050\uffac\064\uffac\071\uffac" +
    "\073\uffac\105\uffac\106\uffac\110\uffac\111\uffac\114\uffac\001" +
    "\002\000\004\030\uffa6\001\002\000\004\043\316\001\002" +
    "\000\004\030\uffa9\001\002\000\036\030\uffad\035\uffad\042" +
    "\uffad\043\uffad\045\uffad\050\uffad\064\uffad\071\uffad\073\uffad" +
    "\105\uffad\106\uffad\110\uffad\111\uffad\114\uffad\001\002\000" +
    "\004\027\321\001\002\000\004\002\uff6c\001\002\000\026" +
    "\004\024\005\043\012\036\055\027\103\031\104\023\114" +
    "\054\115\046\116\042\117\021\001\002\000\010\013\324" +
    "\032\107\057\110\001\002\000\004\056\325\001\002\000" +
    "\026\004\024\005\043\012\036\055\027\103\031\104\023" +
    "\114\054\115\046\116\042\117\021\001\002\000\030\004" +
    "\024\005\043\012\036\042\346\055\027\103\031\104\023" +
    "\114\054\115\046\116\042\117\021\001\002\000\006\026" +
    "\331\031\332\001\002\000\012\026\uffa0\031\uffa0\032\107" +
    "\057\110\001\002\000\026\004\024\005\043\012\036\055" +
    "\027\103\031\104\023\114\054\115\046\116\042\117\021" +
    "\001\002\000\030\034\335\035\237\045\244\050\231\064" +
    "\245\073\225\105\226\106\246\110\235\111\223\114\232" +
    "\001\002\000\004\030\343\001\002\000\004\030\342\001" +
    "\002\000\030\035\237\043\uff91\045\244\050\231\064\245" +
    "\073\225\105\226\106\246\110\235\111\223\114\232\001" +
    "\002\000\004\030\uff9e\001\002\000\004\043\340\001\002" +
    "\000\004\030\341\001\002\000\004\030\uff9d\001\002\000" +
    "\004\030\uff9f\001\002\000\030\004\uffa2\005\uffa2\012\uffa2" +
    "\042\uffa2\055\uffa2\103\uffa2\104\uffa2\114\uffa2\115\uffa2\116" +
    "\uffa2\117\uffa2\001\002\000\012\026\uffa1\031\uffa1\032\107" +
    "\057\110\001\002\000\006\026\331\031\357\001\002\000" +
    "\030\034\350\035\237\045\244\050\231\064\245\073\225" +
    "\105\226\106\246\110\235\111\223\114\232\001\002\000" +
    "\006\030\356\043\uff9c\001\002\000\030\035\237\043\uff91" +
    "\045\244\050\231\064\245\073\225\105\226\106\246\110" +
    "\235\111\223\114\232\001\002\000\004\043\uff9a\001\002" +
    "\000\004\043\353\001\002\000\004\030\354\001\002\000" +
    "\036\030\uffa4\035\uffa4\042\uffa4\043\uffa4\045\uffa4\050\uffa4" +
    "\064\uffa4\071\uffa4\073\uffa4\105\uffa4\106\uffa4\110\uffa4\111" +
    "\uffa4\114\uffa4\001\002\000\004\043\uff99\001\002\000\004" +
    "\043\uff9b\001\002\000\030\034\335\035\237\045\244\050" +
    "\231\064\245\073\225\105\226\106\246\110\235\111\223" +
    "\114\232\001\002\000\004\030\361\001\002\000\030\004" +
    "\uffa3\005\uffa3\012\uffa3\042\uffa3\055\uffa3\103\uffa3\104\uffa3" +
    "\114\uffa3\115\uffa3\116\uffa3\117\uffa3\001\002\000\006\030" +
    "\366\043\uff8b\001\002\000\030\035\237\043\uff87\045\244" +
    "\050\231\064\245\073\225\105\226\106\246\110\235\111" +
    "\223\114\232\001\002\000\004\043\uff8c\001\002\000\004" +
    "\043\uff88\001\002\000\030\035\237\043\uff8a\045\244\050" +
    "\231\064\245\073\225\105\226\106\246\110\235\111\223" +
    "\114\232\001\002\000\004\043\uff89\001\002\000\026\004" +
    "\024\005\043\012\036\055\027\103\031\104\023\114\054" +
    "\115\046\116\042\117\021\001\002\000\026\004\024\005" +
    "\043\012\036\055\027\103\031\104\023\114\054\115\046" +
    "\116\042\117\021\001\002\000\004\114\076\001\002\000" +
    "\006\025\374\027\100\001\002\000\026\004\024\005\043" +
    "\012\036\055\027\103\031\104\023\114\054\115\046\116" +
    "\042\117\021\001\002\000\042\030\uff82\032\107\035\uff82" +
    "\042\uff82\043\uff82\045\uff82\050\uff82\057\110\064\uff82\071" +
    "\uff82\073\uff82\105\uff82\106\uff82\110\uff82\111\uff82\114\uff82" +
    "\001\002\000\006\013\377\026\104\001\002\000\036\030" +
    "\uff83\035\uff83\042\uff83\043\uff83\045\uff83\050\uff83\064\uff83" +
    "\071\uff83\073\uff83\105\uff83\106\uff83\110\uff83\111\uff83\114" +
    "\uff83\001\002\000\042\030\uff84\032\107\035\uff84\042\uff84" +
    "\043\uff84\045\uff84\050\uff84\057\110\064\uff84\071\uff84\073" +
    "\uff84\105\uff84\106\uff84\110\uff84\111\uff84\114\uff84\001\002" +
    "\000\026\004\024\005\043\012\036\055\027\103\031\104" +
    "\023\114\054\115\046\116\042\117\021\001\002\000\010" +
    "\013\u0103\032\107\057\110\001\002\000\004\066\u0104\001" +
    "\002\000\030\034\uffb1\035\uffb1\045\uffb1\050\uffb1\064\uffb1" +
    "\073\uffb1\105\uffb1\106\uffb1\110\uffb1\111\uffb1\114\uffb1\001" +
    "\002\000\030\035\237\043\uff8f\045\244\050\231\064\245" +
    "\073\225\105\226\106\246\110\235\111\223\114\232\001" +
    "\002\000\004\043\uff8d\001\002\000\026\004\024\005\043" +
    "\012\036\055\027\103\031\104\023\114\054\115\046\116" +
    "\042\117\021\001\002\000\006\013\u0109\026\104\001\002" +
    "\000\036\030\uff69\035\uff69\042\uff69\043\uff69\045\uff69\050" +
    "\uff69\064\uff69\071\uff69\073\uff69\105\uff69\106\uff69\110\uff69" +
    "\111\uff69\114\uff69\001\002\000\026\004\024\005\043\012" +
    "\036\055\027\103\031\104\023\114\054\115\046\116\042" +
    "\117\021\001\002\000\010\013\u010c\032\107\057\110\001" +
    "\002\000\004\040\u010d\001\002\000\030\034\253\035\237" +
    "\045\244\050\231\064\245\073\225\105\226\106\246\110" +
    "\235\111\223\114\232\001\002\000\036\030\uff98\035\uff98" +
    "\042\uff98\043\uff98\045\uff98\050\uff98\064\uff98\071\uff98\073" +
    "\uff98\105\uff98\106\uff98\110\uff98\111\uff98\114\uff98\001\002" +
    "\000\004\012\u0110\001\002\000\012\013\uff6f\026\uff6f\072" +
    "\u0111\114\013\001\002\000\004\114\013\001\002\000\006" +
    "\013\uff70\026\uff70\001\002\000\006\026\017\031\u011e\001" +
    "\002\000\006\013\u0115\026\u0116\001\002\000\004\030\u0118" +
    "\001\002\000\006\072\u0111\114\013\001\002\000\006\013" +
    "\uff71\026\uff71\001\002\000\006\034\uffdb\072\203\001\002" +
    "\000\004\034\u011a\001\002\000\030\035\237\043\uff91\045" +
    "\244\050\231\064\245\073\225\105\226\106\246\110\235" +
    "\111\223\114\232\001\002\000\004\043\u011c\001\002\000" +
    "\004\030\u011d\001\002\000\006\034\uff72\061\uff72\001\002" +
    "\000\020\075\044\076\045\077\033\100\025\101\035\102" +
    "\050\114\125\001\002\000\006\013\uff6d\026\uff6d\001\002" +
    "\000\006\026\017\031\u0121\001\002\000\020\075\044\076" +
    "\045\077\033\100\025\101\035\102\050\114\125\001\002" +
    "\000\006\013\uff6e\026\uff6e\001\002\000\004\012\u0124\001" +
    "\002\000\012\013\uff6f\026\uff6f\072\u0111\114\013\001\002" +
    "\000\006\013\u0126\026\u0116\001\002\000\004\031\u0127\001" +
    "\002\000\020\075\044\076\045\077\033\100\025\101\035" +
    "\102\050\114\125\001\002\000\004\030\u0129\001\002\000" +
    "\006\034\uffdb\072\203\001\002\000\004\034\u012b\001\002" +
    "\000\030\035\237\043\uff91\045\244\050\231\064\245\073" +
    "\225\105\226\106\246\110\235\111\223\114\232\001\002" +
    "\000\004\043\u012d\001\002\000\004\030\u012e\001\002\000" +
    "\010\034\uff77\046\uff77\061\uff77\001\002\000\010\034\uff79" +
    "\046\uff79\061\uff79\001\002\000\012\034\uffdc\046\uffdc\061" +
    "\uffdc\114\013\001\002\000\010\017\u0133\026\017\031\u0134" +
    "\001\002\000\012\034\uffd9\046\uffd9\061\uffd9\114\uffd9\001" +
    "\002\000\004\063\u013e\001\002\000\044\004\024\005\043" +
    "\012\036\033\u0137\055\027\075\044\076\045\077\033\100" +
    "\025\101\035\102\050\103\031\104\023\114\030\115\046" +
    "\116\042\117\021\001\002\000\004\030\u013d\001\002\000" +
    "\004\030\u013c\001\002\000\004\014\052\001\002\000\004" +
    "\056\u0139\001\002\000\020\075\044\076\045\077\033\100" +
    "\025\101\035\102\050\114\125\001\002\000\004\030\u013b" +
    "\001\002\000\012\034\uffd6\046\uffd6\061\uffd6\114\uffd6\001" +
    "\002\000\012\034\uffd7\046\uffd7\061\uffd7\114\uffd7\001\002" +
    "\000\012\034\uffd8\046\uffd8\061\uffd8\114\uffd8\001\002\000" +
    "\004\114\130\001\002\000\004\043\u0140\001\002\000\004" +
    "\030\u0141\001\002\000\012\034\uffd5\046\uffd5\061\uffd5\114" +
    "\uffd5\001\002\000\012\034\uffda\046\uffda\061\uffda\114\uffda" +
    "\001\002\000\004\017\u0147\001\002\000\014\034\uffe1\046" +
    "\uffe1\061\uffe1\072\uffe1\114\u0143\001\002\000\014\034\uffde" +
    "\046\uffde\061\uffde\072\uffde\114\uffde\001\002\000\014\034" +
    "\uffdf\046\uffdf\061\uffdf\072\uffdf\114\uffdf\001\002\000\026" +
    "\004\024\005\043\012\036\055\027\103\031\104\023\114" +
    "\054\115\046\116\042\117\021\001\002\000\010\030\u0149" +
    "\032\107\057\110\001\002\000\014\034\uffdd\046\uffdd\061" +
    "\uffdd\072\uffdd\114\uffdd\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0148\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\007\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\201\001\001\000" +
    "\010\004\014\010\015\011\013\001\001\000\002\001\001" +
    "\000\010\004\014\010\177\011\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\031" +
    "\023\036\024\021\025\033\026\025\032\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\175\026\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\023\174\024\021\025\033\026\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\023\155\024\021\025\033\026\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\131\021\130\001\001" +
    "\000\002\001\001\000\006\025\126\026\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\023\052\024\021\025\033\026\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\023\101\024\021\025" +
    "\033\026\025\030\102\001\001\000\004\005\076\001\001" +
    "\000\006\025\057\026\025\001\001\000\002\001\001\000" +
    "\006\025\074\026\025\001\001\000\006\025\073\026\025" +
    "\001\001\000\006\025\072\026\025\001\001\000\002\001" +
    "\001\000\006\025\071\026\025\001\001\000\006\025\070" +
    "\026\025\001\001\000\006\025\067\026\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\023\105\024" +
    "\021\025\033\026\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\023\114\024\021\025\033\026\025\001" +
    "\001\000\012\023\110\024\021\025\033\026\025\001\001" +
    "\000\002\001\001\000\012\023\112\024\021\025\033\026" +
    "\025\001\001\000\002\001\001\000\012\023\115\024\021" +
    "\025\033\026\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\023\120\024\021\025\033" +
    "\026\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\135\021\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\136\021\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\144\001\001\000\002\001\001\000\004" +
    "\006\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\023\154\024\021\025\033\026\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\172" +
    "\026\025\001\001\000\006\025\171\026\025\001\001\000" +
    "\006\025\170\026\025\001\001\000\006\025\167\026\025" +
    "\001\001\000\006\025\166\026\025\001\001\000\006\025" +
    "\165\026\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\u0143\022\u0144\001\001\000\004\017\203\001\001\000\010" +
    "\004\u0130\016\u012f\020\u0131\001\001\000\010\057\204\063" +
    "\207\064\205\001\001\000\002\001\001\000\004\057\u012e" +
    "\001\001\000\002\001\001\000\010\060\212\061\211\062" +
    "\213\001\001\000\002\001\001\000\004\046\215\001\001" +
    "\000\002\001\001\000\004\060\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\027\241\034\226\035\233" +
    "\037\227\041\240\047\221\050\242\051\217\052\220\054" +
    "\235\055\223\056\232\070\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\027\241\034\361\035\362" +
    "\040\363\047\221\050\242\051\217\052\220\054\235\055" +
    "\223\056\232\070\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\027\241\034\272\035\275\043\273\047\221" +
    "\050\242\051\217\052\220\054\235\055\223\056\232\070" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\027\241\034\251\035\253\042\254\047\221\050\242\051" +
    "\217\052\220\054\235\055\223\056\232\070\237\001\001" +
    "\000\002\001\001\000\014\023\101\024\021\025\033\026" +
    "\025\030\247\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\027\241\034\226\035\233\037" +
    "\227\041\257\047\221\050\242\051\217\052\220\054\235" +
    "\055\223\056\232\070\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\023\256\024\021\025\033\026\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\023\265\024\021\025\033\026\025\001\001\000" +
    "\002\001\001\000\012\023\267\024\021\025\033\026\025" +
    "\001\001\000\002\001\001\000\032\027\241\034\251\035" +
    "\253\042\271\047\221\050\242\051\217\052\220\054\235" +
    "\055\223\056\232\070\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\027\241\034\226" +
    "\035\233\037\227\041\276\047\221\050\242\051\217\052" +
    "\220\054\235\055\223\056\232\070\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\027\241\034\306\036\310\047\304\050\313" +
    "\051\303\052\302\053\305\054\235\055\223\056\232\067" +
    "\307\070\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\027\241\034\226" +
    "\035\233\037\227\041\314\047\221\050\242\051\217\052" +
    "\220\054\235\055\223\056\232\070\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\023\322\024\021\025\033\026\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\023\327\024\021" +
    "\025\033\026\025\031\326\071\325\001\001\000\014\023" +
    "\327\024\021\025\033\026\025\031\344\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\023\343\024\021\025" +
    "\033\026\025\001\001\000\032\027\241\034\333\035\335" +
    "\044\332\047\221\050\242\051\217\052\220\054\235\055" +
    "\223\056\232\070\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\027\241\034\226\035\233\037\227\041" +
    "\336\047\221\050\242\051\217\052\220\054\235\055\223" +
    "\056\232\070\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\027\241\034\346\035\350\045\351\047\221\050\242" +
    "\051\217\052\220\054\235\055\223\056\232\070\237\001" +
    "\001\000\002\001\001\000\034\027\241\034\226\035\233" +
    "\037\227\041\354\047\221\050\242\051\217\052\220\054" +
    "\235\055\223\056\232\070\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\027\241\034\333" +
    "\035\335\044\357\047\221\050\242\051\217\052\220\054" +
    "\235\055\223\056\232\070\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\027\241\034" +
    "\361\035\362\040\364\047\221\050\242\051\217\052\220" +
    "\054\235\055\223\056\232\070\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\027\241\034\361\035\362" +
    "\040\366\047\221\050\242\051\217\052\220\054\235\055" +
    "\223\056\232\070\237\001\001\000\002\001\001\000\012" +
    "\023\377\024\021\025\033\026\025\001\001\000\014\023" +
    "\101\024\021\025\033\026\025\030\375\001\001\000\004" +
    "\005\372\001\001\000\002\001\001\000\012\023\374\024" +
    "\021\025\033\026\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\023" +
    "\u0101\024\021\025\033\026\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\027\241\034" +
    "\361\035\362\040\u0105\047\221\050\242\051\217\052\220" +
    "\054\235\055\223\056\232\070\237\001\001\000\002\001" +
    "\001\000\014\023\101\024\021\025\033\026\025\030\u0107" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\023" +
    "\u010a\024\021\025\033\026\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\027\241\034\251\035\253\042" +
    "\u010d\047\221\050\242\051\217\052\220\054\235\055\223" +
    "\056\232\070\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\u0112\065\u0113\066\u0111\001\001\000\004" +
    "\004\u011f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\u0112\066\u0116" +
    "\001\001\000\002\001\001\000\004\017\u0118\001\001\000" +
    "\002\001\001\000\034\027\241\034\226\035\233\037\227" +
    "\041\u011a\047\221\050\242\051\217\052\220\054\235\055" +
    "\223\056\232\070\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u011e\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\u0121\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\u0112\065" +
    "\u0124\066\u0111\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u0127\001\001\000\002\001\001\000\004\017" +
    "\u0129\001\001\000\002\001\001\000\034\027\241\034\226" +
    "\035\233\037\227\041\u012b\047\221\050\242\051\217\052" +
    "\220\054\235\055\223\056\232\070\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\u0130\020\u0141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\u0134\023" +
    "\036\024\021\025\033\026\025\032\u0135\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\u0137\001\001\000" +
    "\002\001\001\000\004\006\u0139\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\u013e\021\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\u0145\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\023\u0147\024\021\025\033\026\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //fields
    Lexer lex;
    private List<String> syntaxErrors;
    private GenTypeTab genTypeTab;
    private AstGen astGen;
    private Analyzator analyzator;

    //conect the parser with the lexer
    public Parser(Lexer lex, Analyzator analyzator){
        super(lex);
        syntaxErrors = new LinkedList<>();
        genTypeTab = new GenTypeTab();
        astGen = new AstGen();
        this.analyzator = analyzator;
    }

    //getters
    public Lexer getLexer(){
        return this.lex;
    }
    public List<String> getSyntaxErrors(){
        return this.syntaxErrors;
    }
    
    /*SOBREESCRIBIR LOS METODOS DE ERROR*/
    public void syntax_error(Symbol cur_token) {
        String mss = "Simbolo: " + symbl_name_from_id(cur_token.sym)
                    + ", linea: " + cur_token.left
                    + ", columna: " + cur_token.right;
        if (expected_token_ids().isEmpty()) {
            mss += " -- ya no se esperaba ningun simbolo";
        }
        syntaxErrors.add(mss);
    }
    public void unrecovered_syntax_error(Symbol cur_token) {
        syntaxErrors.add("Errores de sintaxis severos detectados, revisa municiosamente el codigo");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= header type_b const_b var_b functions_b procedure_b main 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<DefAst> lt = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<DefAst> lc = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<DefAst> lv = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<FunctionDec> lf = (List<FunctionDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ProcedureDec> lp = (List<ProcedureDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            analyzator.semanticAnalysis(lt, lc, lv, lf, lp, ls);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= PROGRAM ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= PROGRAM ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var_type ::= INTEGER 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.IntegerPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // var_type ::= REAL 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.RealPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_type ::= LONGINT 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Label(
                            PrimitiveType.LongintPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_type ::= BOOLEAN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.BooleanPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_type ::= CHAR 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.CharPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_type ::= STRING 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.StringPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_type ::= ID 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            t, 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // id_list ::= id_list COMA ID 
            {
              List<Label> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l.add(new Label(i, new Position(ileft, iright)));
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // id_list ::= ID 
            {
              List<Label> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        List<Label> list = new ArrayList<>();
                        list.add(new Label(i, new Position(ileft, iright)));
                        RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // range ::= expression DOT DOT DOT expression 
            {
              Range RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Range(e1, e2);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arr_range ::= CORCHETE_L expression DOT DOT expression CORCHETE_R 
            {
              Range RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                         RESULT = new Range(e1, e2);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr_range",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // list_access ::= list_access DOT ID 
            {
              List<Label> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l.add(new Label(i, new Position(ileft, iright)));
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_access",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list_access ::= ID 
            {
              List<Label> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        ArrayList<Label> access = new ArrayList<>();
                        access.add(new Label(i, new Position(ileft, iright)));
                        RESULT = access;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_access",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // record_b ::= def_record more_records 
            {
              List<DefAst> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DefAst d = (DefAst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l.add(0, d);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_b",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // def_record ::= ID COLON var_type SEMICOLON 
            {
              DefAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new SingleDef(new Label(i, new Position(ileft, iright)), t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_record",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // def_record ::= ID COLON PACKED ARRAY arr_range OF var_type SEMICOLON 
            {
              DefAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new ArrayDef(new Label(i, new Position(ileft, iright)), t, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_record",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // more_records ::= def_record more_records 
            {
              List<DefAst> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DefAst d = (DefAst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l.add(0, d);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_records",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // more_records ::= 
            {
              List<DefAst> RESULT =null;
		
                        RESULT = new LinkedList<DefAst>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_records",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression_list ::= expression_list COMA expression 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l.add(e);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression_list ::= expression 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        LinkedList<Expression> list = new LinkedList<Expression>();
                        list.add(e);
                        RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type_b ::= TYPE list_typedec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l; 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_b",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type_b ::= 
            {
              List<DefAst> RESULT =null;
		
                        RESULT = new ArrayList<DefAst>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_b",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // list_typedec ::= type_dec list_typedec 
            {
              List<DefAst> RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l1 = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l2 = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l1.addAll(l2);
                        RESULT = l1;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_typedec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // list_typedec ::= type_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_typedec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_dec ::= id_list EQUALS var_type SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.userDef(l, t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_dec ::= id_list EQUALS range SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.rangeDef(l, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_dec ::= id_list EQUALS ARRAY arr_range OF var_type SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.arrayDef(l, t, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type_dec ::= id_list EQUALS RECORD record_b END SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Label> ids = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = genTypeTab.recordDef(ids, l);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // const_b ::= CONST list_constdec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_b",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // const_b ::= 
            {
              List<DefAst> RESULT =null;
		  RESULT = new LinkedList<DefAst>();   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_b",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // list_constdec ::= list_constdec const_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefAst d = (DefAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l.add(d);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_constdec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // list_constdec ::= const_dec 
            {
              List<DefAst> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefAst d = (DefAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        LinkedList<DefAst> list = new LinkedList<>();
                        list.add(d);
                        RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_constdec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // const_dec ::= ID EQUALS expression SEMICOLON 
            {
              DefAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new ConstDef(
                            new Label(i, new Position(ileft, iright)),
                            e
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_dec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var_b ::= VAR list_vardec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_b",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var_b ::= 
            {
              List<DefAst> RESULT =null;
		
                        RESULT = new LinkedList<DefAst>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_b",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // list_vardec ::= list_vardec var_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> dl = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l.addAll(dl);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // list_vardec ::= var_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // var_dec ::= id_list COLON var_type SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.userDef(l, t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // var_dec ::= id_list COLON range SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.rangeDef(l, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // var_dec ::= id_list COLON ARRAY arr_range OF var_type SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.arrayDef(l, t, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // var_dec ::= id_list EQUALS RECORD record_b END SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Label> ids = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = genTypeTab.recordDef(ids, l);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.And, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression AND THEN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.AndThen, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Or, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression OR ELSE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.OrElse, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= NOT expression 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Not,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= bool_exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bool_exp ::= arit_exp EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.EqualsTo, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bool_exp ::= arit_exp DIFFERENT arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.DifferentTo, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bool_exp ::= arit_exp GRATER arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.GraterThan, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bool_exp ::= arit_exp LESS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.LessThan, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bool_exp ::= arit_exp GRATER_EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.GraterEq, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bool_exp ::= arit_exp LESS_EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.LessEq, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bool_exp ::= arit_exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arit_exp ::= arit_exp PLUS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Addition, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arit_exp ::= arit_exp MINUS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Substraction, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arit_exp ::= arit_exp TIMES arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Multiplication, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arit_exp ::= arit_exp DIV arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.IntDivision, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arit_exp ::= arit_exp BARRA arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Division, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arit_exp ::= arit_exp MOD arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Module, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arit_exp ::= literals 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arit_exp ::= ID CORCHETE_L arit_exp CORCHETE_R 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new VectorUse(
                            i, e, new Position(ileft, iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arit_exp ::= ID DOT list_access 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l.add(0, new Label(i, new Position(ileft, iright)));
                        RESULT = new RecordUse(l);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arit_exp ::= ID PARENTESIS_L expression_list PARENTESIS_R 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new FunctionUse(
                            i, l, new Position(ileft, iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arit_exp ::= ID 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            i, new Position(ileft,iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arit_exp ::= PARENTESIS_L expression PARENTESIS_R 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arit_exp ::= PLUS arit_exp 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Addition,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arit_exp ::= MINUS arit_exp 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Substraction,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // literals ::= BOOLEAN_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean l = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.BooleanPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // literals ::= INTEGER_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.IntegerPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // literals ::= REAL_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.RealPT, 
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // literals ::= CHAR_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character l = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.CharPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // literals ::= STRING_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.StringPT, 
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // conditional ::= if_stmt block_cond 
            {
              PassIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new PassIf(new IfAst(e, ls));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // conditional ::= if_stmt block_cond SEMICOLON 
            {
              PassIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new PassIf(new IfAst(e, ls));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // conditional ::= if_stmt block_cond ELSE elif 
            {
              PassIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PassIf pi = (PassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		          
                    RESULT = astGen.genPassIf(
                        pi, 
                        new IfAst(e, ls)
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // if_stmt ::= IF PARENTESIS_L expression PARENTESIS_R THEN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = e;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // block_cond ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_cond",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // block_cond ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_cond",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // block_cond ::= BEGIN block_stmt END 
            {
              List<Statement> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = ls;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_cond",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // elif ::= else_block SEMICOLON 
            {
              PassIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ElseAst e = (ElseAst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new PassIf(e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // elif ::= conditional 
            {
              PassIf RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PassIf pi = (PassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = pi;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // else_block ::= complex_else 
            {
              ElseAst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new ElseAst(astGen.oneStmtInList(s)); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // else_block ::= simple_stmt 
            {
              ElseAst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new ElseAst(astGen.oneStmtInList(s)); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // else_block ::= BEGIN block_stmt END 
            {
              ElseAst RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new ElseAst(ls);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // complex_else ::= case_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseAst s = (CaseAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // complex_else ::= while_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileAst s = (WhileAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // complex_else ::= for_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForAst s = (ForAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // complex_else ::= repeat_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RepeatAst s = (RepeatAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // case_stmt ::= CASE PARENTESIS_L expression PARENTESIS_R OF case_block ELSE case_else_stmts END SEMICOLON 
            {
              CaseAst RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int lscleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lscright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<SimpleCase> lsc = (List<SimpleCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = new CaseAst(e, lsc, new ElseAst(ls));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // case_block ::= case_block labels COLON case_stmts SEMICOLON 
            {
              List<SimpleCase> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<SimpleCase> l = (List<SimpleCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int labsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int labsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Expression> labs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    l.add(new SimpleCase(labs, ls));
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_block",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // case_block ::= labels COLON case_stmts SEMICOLON 
            {
              List<SimpleCase> RESULT =null;
		int labsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int labsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Expression> labs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.genSimpleCaseList(labs, ls);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_block",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // labels ::= labels COMA expression 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    l.add(e);
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // labels ::= expression 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    LinkedList<Expression> list = new LinkedList<>();
                    list.add(e);
                    RESULT = list;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // case_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // case_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // case_stmts ::= BEGIN block_stmt END SEMICOLON 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // case_else_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // case_else_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // case_else_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // case_else_stmts ::= BEGIN block_stmt 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // while_stmt ::= WHILE PARENTESIS_L expression PARENTESIS_R DO statements 
            {
              WhileAst RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new WhileAst(e, l);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // for_stmt ::= FOR ID ASSIGNATION expression TO expression DO statements 
            {
              ForAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Range range = new Range(e1, e2);
                    Label variable = new Label(i, new Position(ileft, iright));
                    RESULT = new ForAst(variable, range, l);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // repeat_stmt ::= REPEAT statements UNTIL expression 
            {
              RepeatAst RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new RepeatAst(e, l);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // statements ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // statements ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // statements ::= BEGIN block_stmt END SEMICOLON 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // block_stmt ::= list_stmts 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // block_stmt ::= 
            {
              List<Statement> RESULT =null;
		
                    RESULT = new LinkedList<Statement>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // list_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // list_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // list_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // list_stmts ::= simple_stmt SEMICOLON more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    l.add(0, s);
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // list_stmts ::= complex_stmt more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    l.add(0, s);
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // more_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // more_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // more_stmts ::= simple_stmt SEMICOLON more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    l.add(0, s);
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // more_stmts ::= complex_stmt more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    l.add(0, s);
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // more_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // simple_stmt ::= BREAK 
            {
              Statement RESULT =null;
		  
                    RESULT = new SimpleStruct(SimpleStruct.BREAK);  
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // simple_stmt ::= CONTINUE 
            {
              Statement RESULT =null;
		  
                    RESULT = new SimpleStruct(SimpleStruct.CONTINUE);  
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // simple_stmt ::= ID ASSIGNATION expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new Assignation(
                        new Label(i, new Position(ileft, iright)), e
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // simple_stmt ::= ID PARENTESIS_L expression_list PARENTESIS_R 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new FunctionUseStmt(
                        new Label(i, new Position(ileft, iright)),
                        el
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // simple_stmt ::= ID DOT list_access ASSIGNATION expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    l.add(0, new Label(i, new Position(ileft, iright)));
                    RESULT = new RecAssignation(l, e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // simple_stmt ::= definite_fun 
            {
              Statement RESULT =null;
		int fuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int furight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionUseStmt fu = (FunctionUseStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fu; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // complex_stmt ::= conditional 
            {
              Statement RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PassIf pi = (PassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT =  astGen.transformPassIf(pi); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // complex_stmt ::= case_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseAst s = (CaseAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // complex_stmt ::= while_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileAst s = (WhileAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // complex_stmt ::= for_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForAst s = (ForAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // complex_stmt ::= repeat_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RepeatAst s = (RepeatAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // functions_b ::= functions 
            {
              List<FunctionDec> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<FunctionDec> l = (List<FunctionDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_b",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // functions_b ::= 
            {
              List<FunctionDec> RESULT =null;
		
                    RESULT = new LinkedList<FunctionDec>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_b",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // functions ::= functions function_dec 
            {
              List<FunctionDec> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<FunctionDec> l = (List<FunctionDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDec d = (FunctionDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    l.add(d);
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // functions ::= function_dec 
            {
              List<FunctionDec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDec d = (FunctionDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    LinkedList<FunctionDec> list = new LinkedList<>();
                    list.add(d);
                    RESULT = list;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // function_dec ::= FUNCTION ID PARENTESIS_L arguments PARENTESIS_R COLON var_type SEMICOLON var_b BEGIN block_stmt END SEMICOLON 
            {
              FunctionDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		List<Argument> a = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<DefAst> lv = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new FunctionDec(
                        new Label(i, new Position(ileft, iright)),
                        t, a, lv, ls
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_dec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // procedure_b ::= procedures 
            {
              List<ProcedureDec> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ProcedureDec> p = (List<ProcedureDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = p;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_b",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // procedure_b ::= 
            {
              List<ProcedureDec> RESULT =null;
		  
                    RESULT = new LinkedList<ProcedureDec>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_b",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // procedures ::= procedures procedure_dec 
            {
              List<ProcedureDec> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ProcedureDec> l = (List<ProcedureDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcedureDec d = (ProcedureDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    l.add(d);
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // procedures ::= procedure_dec 
            {
              List<ProcedureDec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcedureDec d = (ProcedureDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    LinkedList<ProcedureDec> list = new LinkedList<>();
                    list.add(d);
                    RESULT = list;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // procedure_dec ::= PROCEDURE ID PARENTESIS_L arguments PARENTESIS_R SEMICOLON var_b BEGIN block_stmt END SEMICOLON 
            {
              ProcedureDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<Argument> a = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<DefAst> lv = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = new ProcedureDec(
                        new Label(i, new Position(ileft, iright)),
                        a, lv, ls
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_dec",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // arguments ::= arguments COMA type_arg 
            {
              List<Argument> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Argument> l = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Argument> args = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    l.addAll(args);
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // arguments ::= type_arg 
            {
              List<Argument> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Argument> args = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = args;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // arguments ::= 
            {
              List<Argument> RESULT =null;
		
                    RESULT = new LinkedList<Argument>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // type_arg ::= VAR id_list COLON var_type 
            {
              List<Argument> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.generateArgs(l, t, true);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arg",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // type_arg ::= id_list COLON var_type 
            {
              List<Argument> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.generateArgs(l, t, false);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arg",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // main ::= BEGIN block_stmt END DOT 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = l;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // definite_fun ::= writefn 
            {
              FunctionUseStmt RESULT =null;
		int fuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int furight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionUseStmt fu = (FunctionUseStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fu;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definite_fun",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // definite_fun ::= readfn 
            {
              FunctionUseStmt RESULT =null;
		int fuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int furight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionUseStmt fu = (FunctionUseStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fu;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definite_fun",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // writefn ::= WRITELN PARENTESIS_L expression_list PARENTESIS_R 
            {
              FunctionUseStmt RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new FunctionUseStmt(el);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writefn",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // readfn ::= READLN PARENTESIS_L expression_list PARENTESIS_R 
            {
              FunctionUseStmt RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new FunctionUseStmt(el);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readfn",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
