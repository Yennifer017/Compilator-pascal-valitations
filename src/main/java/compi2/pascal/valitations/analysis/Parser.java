
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compi2.pascal.valitations.analysis;

import java_cup.runtime.*;
import java.util.*;
import compi2.pascal.valitations.analysis.typet.*;
import compi2.pascal.valitations.analyzator.*;
import compi2.pascal.valitations.semantic.*;
import compi2.pascal.valitations.semantic.expr.*;
import compi2.pascal.valitations.semantic.obj.*;
import compi2.pascal.valitations.semantic.ast.*;
import compi2.pascal.valitations.semantic.module.*;
import compi2.pascal.valitations.util.Position;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\276\000\002\002\004\000\002\002\011\000\002\003" +
    "\005\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\004\005\000\002\004" +
    "\003\000\002\032\007\000\002\033\010\000\002\005\005" +
    "\000\002\005\003\000\002\013\004\000\002\021\006\000" +
    "\002\021\012\000\002\012\004\000\002\012\002\000\002" +
    "\030\005\000\002\030\003\000\002\007\004\000\002\007" +
    "\002\000\002\010\004\000\002\010\003\000\002\011\006" +
    "\000\002\011\006\000\002\011\011\000\002\011\010\000" +
    "\002\011\006\000\002\011\006\000\002\011\011\000\002" +
    "\011\010\000\002\014\004\000\002\014\002\000\002\015" +
    "\004\000\002\015\003\000\002\022\006\000\002\022\006" +
    "\000\002\017\004\000\002\017\002\000\002\016\005\000" +
    "\002\016\004\000\002\016\006\000\002\016\004\000\002" +
    "\016\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\010\000\002\020\007\000\002\020\007\000\002\020\005" +
    "\000\002\020\005\000\002\020\010\000\002\020\007\000" +
    "\002\023\005\000\002\023\006\000\002\023\005\000\002" +
    "\023\006\000\002\023\004\000\002\023\003\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\003\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\003\000" +
    "\002\025\006\000\002\025\005\000\002\025\006\000\002" +
    "\025\003\000\002\025\005\000\002\025\004\000\002\025" +
    "\004\000\002\025\005\000\002\025\004\000\002\025\004" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\070\004\000\002" +
    "\070\005\000\002\070\006\000\002\027\007\000\002\027" +
    "\007\000\002\027\007\000\002\027\007\000\002\027\007" +
    "\000\002\043\003\000\002\043\003\000\002\043\005\000" +
    "\002\067\004\000\002\067\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\005\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\052\014" +
    "\000\002\071\006\000\002\071\005\000\002\031\005\000" +
    "\002\031\003\000\002\044\004\000\002\044\003\000\002" +
    "\044\006\000\002\045\003\000\002\045\004\000\002\045" +
    "\003\000\002\045\004\000\002\047\010\000\002\047\010" +
    "\000\002\050\012\000\002\050\012\000\002\050\012\000" +
    "\002\051\006\000\002\042\004\000\002\042\003\000\002" +
    "\042\006\000\002\041\003\000\002\041\002\000\002\037" +
    "\003\000\002\037\004\000\002\037\003\000\002\037\005" +
    "\000\002\037\004\000\002\040\004\000\002\040\003\000" +
    "\002\040\004\000\002\040\005\000\002\040\004\000\002" +
    "\040\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\005\000\002\034\006\000\002\034\007\000\002\034\010" +
    "\000\002\034\003\000\002\034\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\063\003\000\002\063\002\000\002\064" +
    "\004\000\002\064\003\000\002\057\017\000\002\061\003" +
    "\000\002\061\002\000\002\062\004\000\002\062\003\000" +
    "\002\060\015\000\002\065\005\000\002\065\003\000\002" +
    "\065\002\000\002\066\006\000\002\066\005\000\002\046" +
    "\006\000\002\046\006\000\002\054\003\000\002\054\003" +
    "\000\002\055\006\000\002\056\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019e\000\006\003\004\062\007\001\002\000\004\114" +
    "\u01a0\001\002\000\004\002\u019f\001\002\000\016\034\uffe5" +
    "\036\uffe5\046\uffe5\061\uffe5\070\014\072\uffe5\001\002\000" +
    "\006\003\011\114\010\001\002\000\020\030\012\034\ufffe" +
    "\036\ufffe\046\ufffe\061\ufffe\070\ufffe\072\ufffe\001\002\000" +
    "\016\034\ufffc\036\ufffc\046\ufffc\061\ufffc\070\ufffc\072\ufffc" +
    "\001\002\000\016\034\uffff\036\uffff\046\uffff\061\uffff\070" +
    "\uffff\072\uffff\001\002\000\014\034\uffd9\036\244\046\uffd9" +
    "\061\uffd9\072\uffd9\001\002\000\004\114\015\001\002\000" +
    "\012\003\ufff2\017\ufff2\026\ufff2\031\ufff2\001\002\000\016" +
    "\034\uffe3\036\uffe3\046\uffe3\061\uffe3\072\uffe3\114\015\001" +
    "\002\000\010\003\023\017\022\026\021\001\002\000\014" +
    "\034\uffe6\036\uffe6\046\uffe6\061\uffe6\072\uffe6\001\002\000" +
    "\004\114\242\001\002\000\050\003\047\004\027\005\046" +
    "\012\041\033\230\055\032\063\227\075\050\076\051\077" +
    "\036\100\030\101\040\102\054\103\034\104\026\114\033" +
    "\115\052\116\045\117\024\001\002\000\050\003\047\004" +
    "\027\005\046\012\041\033\053\055\032\063\044\075\050" +
    "\076\051\077\036\100\030\101\040\102\054\103\034\104" +
    "\026\114\033\115\052\116\045\117\024\001\002\000\136" +
    "\003\uffa0\004\uffa0\005\uffa0\006\uffa0\007\uffa0\012\uffa0\013" +
    "\uffa0\015\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0" +
    "\024\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\034" +
    "\uffa0\035\uffa0\037\uffa0\040\uffa0\042\uffa0\043\uffa0\045\uffa0" +
    "\046\uffa0\050\uffa0\053\uffa0\055\uffa0\057\uffa0\061\uffa0\064" +
    "\uffa0\067\uffa0\071\uffa0\073\uffa0\103\uffa0\104\uffa0\105\uffa0" +
    "\106\uffa0\110\uffa0\111\uffa0\114\uffa0\115\uffa0\116\uffa0\117" +
    "\uffa0\001\002\000\112\003\uffbf\004\uffbf\005\uffbf\012\uffbf" +
    "\013\uffbf\015\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\034\uffbf\035\uffbf\040\uffbf\042\uffbf\043\uffbf\045\uffbf" +
    "\046\uffbf\050\uffbf\055\uffbf\057\uffbf\061\uffbf\064\uffbf\067" +
    "\uffbf\071\uffbf\073\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf" +
    "\110\uffbf\111\uffbf\114\uffbf\115\uffbf\116\uffbf\117\uffbf\001" +
    "\002\000\136\003\uff9c\004\uff9c\005\uff9c\006\uff9c\007\uff9c" +
    "\012\uff9c\013\uff9c\015\uff9c\017\uff9c\020\uff9c\021\uff9c\022" +
    "\uff9c\023\uff9c\024\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c" +
    "\032\uff9c\034\uff9c\035\uff9c\037\uff9c\040\uff9c\042\uff9c\043" +
    "\uff9c\045\uff9c\046\uff9c\050\uff9c\053\uff9c\055\uff9c\057\uff9c" +
    "\061\uff9c\064\uff9c\067\uff9c\071\uff9c\073\uff9c\103\uff9c\104" +
    "\uff9c\105\uff9c\106\uff9c\110\uff9c\111\uff9c\114\uff9c\115\uff9c" +
    "\116\uff9c\117\uff9c\001\002\000\026\003\224\004\027\005" +
    "\046\012\041\103\034\104\026\114\060\115\052\116\045" +
    "\117\024\001\002\000\022\003\ufff7\013\ufff7\026\ufff7\030" +
    "\ufff7\034\ufff7\046\ufff7\061\ufff7\114\ufff7\001\002\000\136" +
    "\003\uffab\004\uffab\005\uffab\006\uffab\007\uffab\012\uffab\013" +
    "\uffab\015\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab" +
    "\024\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\034" +
    "\uffab\035\uffab\037\uffab\040\uffab\042\uffab\043\uffab\045\uffab" +
    "\046\uffab\050\uffab\053\uffab\055\uffab\057\uffab\061\uffab\064" +
    "\uffab\067\uffab\071\uffab\073\uffab\103\uffab\104\uffab\105\uffab" +
    "\106\uffab\110\uffab\111\uffab\114\uffab\115\uffab\116\uffab\117" +
    "\uffab\001\002\000\030\003\061\004\027\005\046\012\041" +
    "\055\032\103\034\104\026\114\060\115\052\116\045\117" +
    "\024\001\002\000\060\003\ufff5\004\uffa7\005\uffa7\006\uffa7" +
    "\007\uffa7\012\076\014\100\017\uffa7\020\uffa7\021\uffa7\022" +
    "\uffa7\023\uffa7\024\uffa7\027\077\030\ufff5\032\uffa7\034\ufff5" +
    "\037\uffa7\046\ufff5\053\uffa7\057\uffa7\061\ufff5\114\ufff5\001" +
    "\002\000\136\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e" +
    "\012\uff9e\013\uff9e\015\uff9e\017\uff9e\020\uff9e\021\uff9e\022" +
    "\uff9e\023\uff9e\024\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e" +
    "\032\uff9e\034\uff9e\035\uff9e\037\uff9e\040\uff9e\042\uff9e\043" +
    "\uff9e\045\uff9e\046\uff9e\050\uff9e\053\uff9e\055\uff9e\057\uff9e" +
    "\061\uff9e\064\uff9e\067\uff9e\071\uff9e\073\uff9e\103\uff9e\104" +
    "\uff9e\105\uff9e\106\uff9e\110\uff9e\111\uff9e\114\uff9e\115\uff9e" +
    "\116\uff9e\117\uff9e\001\002\000\004\030\221\001\002\000" +
    "\022\003\ufff8\013\ufff8\026\ufff8\030\ufff8\034\ufff8\046\ufff8" +
    "\061\ufff8\114\ufff8\001\002\000\136\003\uffb8\004\103\005" +
    "\106\006\110\007\104\012\uffb8\013\uffb8\015\uffb8\017\211" +
    "\020\207\021\206\022\210\023\205\024\212\026\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\034\uffb8\035\uffb8\037\107" +
    "\040\uffb8\042\uffb8\043\uffb8\045\uffb8\046\uffb8\050\uffb8\053" +
    "\102\055\uffb8\057\uffb8\061\uffb8\064\uffb8\067\uffb8\071\uffb8" +
    "\073\uffb8\103\uffb8\104\uffb8\105\uffb8\106\uffb8\110\uffb8\111" +
    "\uffb8\114\uffb8\115\uffb8\116\uffb8\117\uffb8\001\002\000\022" +
    "\003\ufff6\013\ufff6\026\ufff6\030\ufff6\034\ufff6\046\ufff6\061" +
    "\ufff6\114\ufff6\001\002\000\030\003\202\004\027\005\046" +
    "\012\041\055\032\103\034\104\026\114\060\115\052\116" +
    "\045\117\024\001\002\000\004\030\200\001\002\000\010" +
    "\027\174\032\130\057\131\001\002\000\004\114\153\001" +
    "\002\000\136\003\uff9f\004\uff9f\005\uff9f\006\uff9f\007\uff9f" +
    "\012\uff9f\013\uff9f\015\uff9f\017\uff9f\020\uff9f\021\uff9f\022" +
    "\uff9f\023\uff9f\024\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\032\uff9f\034\uff9f\035\uff9f\037\uff9f\040\uff9f\042\uff9f\043" +
    "\uff9f\045\uff9f\046\uff9f\050\uff9f\053\uff9f\055\uff9f\057\uff9f" +
    "\061\uff9f\064\uff9f\067\uff9f\071\uff9f\073\uff9f\103\uff9f\104" +
    "\uff9f\105\uff9f\106\uff9f\110\uff9f\111\uff9f\114\uff9f\115\uff9f" +
    "\116\uff9f\117\uff9f\001\002\000\026\003\152\004\027\005" +
    "\046\012\041\103\034\104\026\114\060\115\052\116\045" +
    "\117\024\001\002\000\032\003\ufff4\004\063\005\065\006" +
    "\067\007\064\030\ufff4\034\ufff4\037\066\046\ufff4\053\062" +
    "\061\ufff4\114\ufff4\001\002\000\022\003\ufffb\013\ufffb\026" +
    "\ufffb\030\ufffb\034\ufffb\046\ufffb\061\ufffb\114\ufffb\001\002" +
    "\000\022\003\ufffa\013\ufffa\026\ufffa\030\ufffa\034\ufffa\046" +
    "\ufffa\061\ufffa\114\ufffa\001\002\000\136\003\uff9d\004\uff9d" +
    "\005\uff9d\006\uff9d\007\uff9d\012\uff9d\013\uff9d\015\uff9d\017" +
    "\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\026\uff9d" +
    "\027\uff9d\030\uff9d\031\uff9d\032\uff9d\034\uff9d\035\uff9d\037" +
    "\uff9d\040\uff9d\042\uff9d\043\uff9d\045\uff9d\046\uff9d\050\uff9d" +
    "\053\uff9d\055\uff9d\057\uff9d\061\uff9d\064\uff9d\067\uff9d\071" +
    "\uff9d\073\uff9d\103\uff9d\104\uff9d\105\uff9d\106\uff9d\110\uff9d" +
    "\111\uff9d\114\uff9d\115\uff9d\116\uff9d\117\uff9d\001\002\000" +
    "\004\014\056\001\002\000\022\003\ufff9\013\ufff9\026\ufff9" +
    "\030\ufff9\034\ufff9\046\ufff9\061\ufff9\114\ufff9\001\002\000" +
    "\004\056\144\001\002\000\030\003\061\004\027\005\046" +
    "\012\041\055\032\103\034\104\026\114\060\115\052\116" +
    "\045\117\024\001\002\000\010\027\140\032\130\057\131" +
    "\001\002\000\140\003\uffa7\004\uffa7\005\uffa7\006\uffa7\007" +
    "\uffa7\012\uffa7\013\uffa7\014\100\015\uffa7\017\uffa7\020\uffa7" +
    "\021\uffa7\022\uffa7\023\uffa7\024\uffa7\026\uffa7\027\077\030" +
    "\uffa7\031\uffa7\032\uffa7\034\uffa7\035\uffa7\037\uffa7\040\uffa7" +
    "\042\uffa7\043\uffa7\045\uffa7\046\uffa7\050\uffa7\053\uffa7\055" +
    "\uffa7\057\uffa7\061\uffa7\064\uffa7\067\uffa7\071\uffa7\073\uffa7" +
    "\103\uffa7\104\uffa7\105\uffa7\106\uffa7\110\uffa7\111\uffa7\114" +
    "\uffa7\115\uffa7\116\uffa7\117\uffa7\001\002\000\016\004\063" +
    "\005\065\006\067\007\064\037\066\053\062\001\002\000" +
    "\004\003\075\001\002\000\004\003\074\001\002\000\004" +
    "\003\073\001\002\000\004\003\072\001\002\000\004\003" +
    "\071\001\002\000\004\003\070\001\002\000\136\003\uffb5" +
    "\004\uffb5\005\uffb5\006\uffb5\007\uffb5\012\uffb5\013\uffb5\015" +
    "\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5" +
    "\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\034\uffb5\035" +
    "\uffb5\037\uffb5\040\uffb5\042\uffb5\043\uffb5\045\uffb5\046\uffb5" +
    "\050\uffb5\053\uffb5\055\uffb5\057\uffb5\061\uffb5\064\uffb5\067" +
    "\uffb5\071\uffb5\073\uffb5\103\uffb5\104\uffb5\105\uffb5\106\uffb5" +
    "\110\uffb5\111\uffb5\114\uffb5\115\uffb5\116\uffb5\117\uffb5\001" +
    "\002\000\136\003\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4" +
    "\012\uffb4\013\uffb4\015\uffb4\017\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\034\uffb4\035\uffb4\037\uffb4\040\uffb4\042\uffb4\043" +
    "\uffb4\045\uffb4\046\uffb4\050\uffb4\053\uffb4\055\uffb4\057\uffb4" +
    "\061\uffb4\064\uffb4\067\uffb4\071\uffb4\073\uffb4\103\uffb4\104" +
    "\uffb4\105\uffb4\106\uffb4\110\uffb4\111\uffb4\114\uffb4\115\uffb4" +
    "\116\uffb4\117\uffb4\001\002\000\136\003\uffb6\004\uffb6\005" +
    "\uffb6\006\uffb6\007\uffb6\012\uffb6\013\uffb6\015\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\026\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\034\uffb6\035\uffb6\037\uffb6" +
    "\040\uffb6\042\uffb6\043\uffb6\045\uffb6\046\uffb6\050\uffb6\053" +
    "\uffb6\055\uffb6\057\uffb6\061\uffb6\064\uffb6\067\uffb6\071\uffb6" +
    "\073\uffb6\103\uffb6\104\uffb6\105\uffb6\106\uffb6\110\uffb6\111" +
    "\uffb6\114\uffb6\115\uffb6\116\uffb6\117\uffb6\001\002\000\136" +
    "\003\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3\012\uffb3\013" +
    "\uffb3\015\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\034" +
    "\uffb3\035\uffb3\037\uffb3\040\uffb3\042\uffb3\043\uffb3\045\uffb3" +
    "\046\uffb3\050\uffb3\053\uffb3\055\uffb3\057\uffb3\061\uffb3\064" +
    "\uffb3\067\uffb3\071\uffb3\073\uffb3\103\uffb3\104\uffb3\105\uffb3" +
    "\106\uffb3\110\uffb3\111\uffb3\114\uffb3\115\uffb3\116\uffb3\117" +
    "\uffb3\001\002\000\136\003\uffb7\004\uffb7\005\uffb7\006\uffb7" +
    "\007\uffb7\012\uffb7\013\uffb7\015\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\026\uffb7\027\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\034\uffb7\035\uffb7\037\uffb7\040\uffb7\042" +
    "\uffb7\043\uffb7\045\uffb7\046\uffb7\050\uffb7\053\uffb7\055\uffb7" +
    "\057\uffb7\061\uffb7\064\uffb7\067\uffb7\071\uffb7\073\uffb7\103" +
    "\uffb7\104\uffb7\105\uffb7\106\uffb7\110\uffb7\111\uffb7\114\uffb7" +
    "\115\uffb7\116\uffb7\117\uffb7\001\002\000\136\003\uffb2\004" +
    "\uffb2\005\uffb2\006\uffb2\007\uffb2\012\uffb2\013\uffb2\015\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\034\uffb2\035\uffb2" +
    "\037\uffb2\040\uffb2\042\uffb2\043\uffb2\045\uffb2\046\uffb2\050" +
    "\uffb2\053\uffb2\055\uffb2\057\uffb2\061\uffb2\064\uffb2\067\uffb2" +
    "\071\uffb2\073\uffb2\103\uffb2\104\uffb2\105\uffb2\106\uffb2\110" +
    "\uffb2\111\uffb2\114\uffb2\115\uffb2\116\uffb2\117\uffb2\001\002" +
    "\000\030\003\061\004\027\005\046\012\041\055\032\103" +
    "\034\104\026\114\060\115\052\116\045\117\024\001\002" +
    "\000\004\114\117\001\002\000\026\003\061\004\027\005" +
    "\046\012\041\103\034\104\026\114\060\115\052\116\045" +
    "\117\024\001\002\000\020\004\103\005\106\006\110\007" +
    "\104\015\105\037\107\053\102\001\002\000\026\003\061" +
    "\004\027\005\046\012\041\103\034\104\026\114\060\115" +
    "\052\116\045\117\024\001\002\000\026\003\061\004\027" +
    "\005\046\012\041\103\034\104\026\114\060\115\052\116" +
    "\045\117\024\001\002\000\026\003\061\004\027\005\046" +
    "\012\041\103\034\104\026\114\060\115\052\116\045\117" +
    "\024\001\002\000\136\003\uffaa\004\uffaa\005\uffaa\006\uffaa" +
    "\007\uffaa\012\uffaa\013\uffaa\015\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\026\uffaa\027\uffaa\030\uffaa" +
    "\031\uffaa\032\uffaa\034\uffaa\035\uffaa\037\uffaa\040\uffaa\042" +
    "\uffaa\043\uffaa\045\uffaa\046\uffaa\050\uffaa\053\uffaa\055\uffaa" +
    "\057\uffaa\061\uffaa\064\uffaa\067\uffaa\071\uffaa\073\uffaa\103" +
    "\uffaa\104\uffaa\105\uffaa\106\uffaa\110\uffaa\111\uffaa\114\uffaa" +
    "\115\uffaa\116\uffaa\117\uffaa\001\002\000\026\003\061\004" +
    "\027\005\046\012\041\103\034\104\026\114\060\115\052" +
    "\116\045\117\024\001\002\000\026\003\061\004\027\005" +
    "\046\012\041\103\034\104\026\114\060\115\052\116\045" +
    "\117\024\001\002\000\026\003\061\004\027\005\046\012" +
    "\041\103\034\104\026\114\060\115\052\116\045\117\024" +
    "\001\002\000\136\003\uffaf\004\uffaf\005\uffaf\006\uffaf\007" +
    "\uffaf\012\uffaf\013\uffaf\015\uffaf\017\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\026\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\032\uffaf\034\uffaf\035\uffaf\037\uffaf\040\uffaf\042\uffaf" +
    "\043\uffaf\045\uffaf\046\uffaf\050\uffaf\053\uffaf\055\uffaf\057" +
    "\uffaf\061\uffaf\064\uffaf\067\uffaf\071\uffaf\073\uffaf\103\uffaf" +
    "\104\uffaf\105\uffaf\106\uffaf\110\uffaf\111\uffaf\114\uffaf\115" +
    "\uffaf\116\uffaf\117\uffaf\001\002\000\136\003\uffae\004\uffae" +
    "\005\uffae\006\uffae\007\uffae\012\uffae\013\uffae\015\uffae\017" +
    "\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\026\uffae" +
    "\027\uffae\030\uffae\031\uffae\032\uffae\034\uffae\035\uffae\037" +
    "\uffae\040\uffae\042\uffae\043\uffae\045\uffae\046\uffae\050\uffae" +
    "\053\uffae\055\uffae\057\uffae\061\uffae\064\uffae\067\uffae\071" +
    "\uffae\073\uffae\103\uffae\104\uffae\105\uffae\106\uffae\110\uffae" +
    "\111\uffae\114\uffae\115\uffae\116\uffae\117\uffae\001\002\000" +
    "\136\003\uffb0\004\uffb0\005\uffb0\006\110\007\104\012\uffb0" +
    "\013\uffb0\015\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\024\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\034\uffb0\035\uffb0\037\107\040\uffb0\042\uffb0\043\uffb0\045" +
    "\uffb0\046\uffb0\050\uffb0\053\102\055\uffb0\057\uffb0\061\uffb0" +
    "\064\uffb0\067\uffb0\071\uffb0\073\uffb0\103\uffb0\104\uffb0\105" +
    "\uffb0\106\uffb0\110\uffb0\111\uffb0\114\uffb0\115\uffb0\116\uffb0" +
    "\117\uffb0\001\002\000\136\003\uffad\004\uffad\005\uffad\006" +
    "\uffad\007\uffad\012\uffad\013\uffad\015\uffad\017\uffad\020\uffad" +
    "\021\uffad\022\uffad\023\uffad\024\uffad\026\uffad\027\uffad\030" +
    "\uffad\031\uffad\032\uffad\034\uffad\035\uffad\037\uffad\040\uffad" +
    "\042\uffad\043\uffad\045\uffad\046\uffad\050\uffad\053\uffad\055" +
    "\uffad\057\uffad\061\uffad\064\uffad\067\uffad\071\uffad\073\uffad" +
    "\103\uffad\104\uffad\105\uffad\106\uffad\110\uffad\111\uffad\114" +
    "\uffad\115\uffad\116\uffad\117\uffad\001\002\000\136\003\uffb1" +
    "\004\uffb1\005\uffb1\006\110\007\104\012\uffb1\013\uffb1\015" +
    "\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1" +
    "\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\034\uffb1\035" +
    "\uffb1\037\107\040\uffb1\042\uffb1\043\uffb1\045\uffb1\046\uffb1" +
    "\050\uffb1\053\102\055\uffb1\057\uffb1\061\uffb1\064\uffb1\067" +
    "\uffb1\071\uffb1\073\uffb1\103\uffb1\104\uffb1\105\uffb1\106\uffb1" +
    "\110\uffb1\111\uffb1\114\uffb1\115\uffb1\116\uffb1\117\uffb1\001" +
    "\002\000\136\003\uffac\004\uffac\005\uffac\006\uffac\007\uffac" +
    "\012\uffac\013\uffac\015\uffac\017\uffac\020\uffac\021\uffac\022" +
    "\uffac\023\uffac\024\uffac\026\uffac\027\uffac\030\uffac\031\uffac" +
    "\032\uffac\034\uffac\035\uffac\037\uffac\040\uffac\042\uffac\043" +
    "\uffac\045\uffac\046\uffac\050\uffac\053\uffac\055\uffac\057\uffac" +
    "\061\uffac\064\uffac\067\uffac\071\uffac\073\uffac\103\uffac\104" +
    "\uffac\105\uffac\106\uffac\110\uffac\111\uffac\114\uffac\115\uffac" +
    "\116\uffac\117\uffac\001\002\000\140\003\uffee\004\uffee\005" +
    "\uffee\006\uffee\007\uffee\012\uffee\013\uffee\015\uffee\017\uffee" +
    "\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\034\uffee\035\uffee" +
    "\037\uffee\040\uffee\042\uffee\043\uffee\045\uffee\046\uffee\050" +
    "\uffee\053\uffee\055\uffee\057\uffee\061\uffee\064\uffee\067\uffee" +
    "\071\uffee\073\uffee\103\uffee\104\uffee\105\uffee\106\uffee\110" +
    "\uffee\111\uffee\114\uffee\115\uffee\116\uffee\117\uffee\001\002" +
    "\000\136\003\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9\012" +
    "\uffa9\013\uffa9\015\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9" +
    "\023\uffa9\024\uffa9\026\uffa9\027\121\030\uffa9\031\uffa9\032" +
    "\uffa9\034\uffa9\035\uffa9\037\uffa9\040\uffa9\042\uffa9\043\uffa9" +
    "\045\uffa9\046\uffa9\050\uffa9\053\uffa9\055\uffa9\057\uffa9\061" +
    "\uffa9\064\uffa9\067\uffa9\071\uffa9\073\uffa9\103\uffa9\104\uffa9" +
    "\105\uffa9\106\uffa9\110\uffa9\111\uffa9\114\uffa9\115\uffa9\116" +
    "\uffa9\117\uffa9\001\002\000\004\114\122\001\002\000\140" +
    "\003\uffef\004\uffef\005\uffef\006\uffef\007\uffef\012\uffef\013" +
    "\uffef\015\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef" +
    "\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032" +
    "\uffef\034\uffef\035\uffef\037\uffef\040\uffef\042\uffef\043\uffef" +
    "\045\uffef\046\uffef\050\uffef\053\uffef\055\uffef\057\uffef\061" +
    "\uffef\064\uffef\067\uffef\071\uffef\073\uffef\103\uffef\104\uffef" +
    "\105\uffef\106\uffef\110\uffef\111\uffef\114\uffef\115\uffef\116" +
    "\uffef\117\uffef\001\002\000\012\013\uffe7\026\uffe7\032\130" +
    "\057\131\001\002\000\006\013\126\026\125\001\002\000" +
    "\030\003\061\004\027\005\046\012\041\055\032\103\034" +
    "\104\026\114\060\115\052\116\045\117\024\001\002\000" +
    "\136\003\uffa8\004\uffa8\005\uffa8\006\uffa8\007\uffa8\012\uffa8" +
    "\013\uffa8\015\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023" +
    "\uffa8\024\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8" +
    "\034\uffa8\035\uffa8\037\uffa8\040\uffa8\042\uffa8\043\uffa8\045" +
    "\uffa8\046\uffa8\050\uffa8\053\uffa8\055\uffa8\057\uffa8\061\uffa8" +
    "\064\uffa8\067\uffa8\071\uffa8\073\uffa8\103\uffa8\104\uffa8\105" +
    "\uffa8\106\uffa8\110\uffa8\111\uffa8\114\uffa8\115\uffa8\116\uffa8" +
    "\117\uffa8\001\002\000\012\013\uffe8\026\uffe8\032\130\057" +
    "\131\001\002\000\032\003\061\004\027\005\046\012\041" +
    "\055\032\066\135\103\034\104\026\114\060\115\052\116" +
    "\045\117\024\001\002\000\032\003\061\004\027\005\046" +
    "\012\041\042\133\055\032\103\034\104\026\114\060\115" +
    "\052\116\045\117\024\001\002\000\112\003\uffc2\004\uffc2" +
    "\005\uffc2\012\uffc2\013\uffc2\015\uffc2\026\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\032\130\034\uffc2\035\uffc2\040\uffc2\042\uffc2" +
    "\043\uffc2\045\uffc2\046\uffc2\050\uffc2\055\uffc2\057\uffc2\061" +
    "\uffc2\064\uffc2\067\uffc2\071\uffc2\073\uffc2\103\uffc2\104\uffc2" +
    "\105\uffc2\106\uffc2\110\uffc2\111\uffc2\114\uffc2\115\uffc2\116" +
    "\uffc2\117\uffc2\001\002\000\030\003\061\004\027\005\046" +
    "\012\041\055\032\103\034\104\026\114\060\115\052\116" +
    "\045\117\024\001\002\000\112\003\uffc1\004\uffc1\005\uffc1" +
    "\012\uffc1\013\uffc1\015\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\034\uffc1\035\uffc1\040\uffc1\042\uffc1\043\uffc1" +
    "\045\uffc1\046\uffc1\050\uffc1\055\uffc1\057\uffc1\061\uffc1\064" +
    "\uffc1\067\uffc1\071\uffc1\073\uffc1\103\uffc1\104\uffc1\105\uffc1" +
    "\106\uffc1\110\uffc1\111\uffc1\114\uffc1\115\uffc1\116\uffc1\117" +
    "\uffc1\001\002\000\030\003\061\004\027\005\046\012\041" +
    "\055\032\103\034\104\026\114\060\115\052\116\045\117" +
    "\024\001\002\000\112\003\uffc4\004\uffc4\005\uffc4\012\uffc4" +
    "\013\uffc4\015\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\034\uffc4\035\uffc4\040\uffc4\042\uffc4\043\uffc4\045\uffc4" +
    "\046\uffc4\050\uffc4\055\uffc4\057\uffc4\061\uffc4\064\uffc4\067" +
    "\uffc4\071\uffc4\073\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4" +
    "\110\uffc4\111\uffc4\114\uffc4\115\uffc4\116\uffc4\117\uffc4\001" +
    "\002\000\112\003\uffc3\004\uffc3\005\uffc3\012\uffc3\013\uffc3" +
    "\015\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\130\034" +
    "\uffc3\035\uffc3\040\uffc3\042\uffc3\043\uffc3\045\uffc3\046\uffc3" +
    "\050\uffc3\055\uffc3\057\131\061\uffc3\064\uffc3\067\uffc3\071" +
    "\uffc3\073\uffc3\103\uffc3\104\uffc3\105\uffc3\106\uffc3\110\uffc3" +
    "\111\uffc3\114\uffc3\115\uffc3\116\uffc3\117\uffc3\001\002\000" +
    "\004\027\141\001\002\000\030\003\061\004\027\005\046" +
    "\012\041\055\032\103\034\104\026\114\060\115\052\116" +
    "\045\117\024\001\002\000\010\015\143\032\130\057\131" +
    "\001\002\000\004\056\ufff0\001\002\000\022\003\146\075" +
    "\050\076\051\077\036\100\030\101\040\102\054\114\145" +
    "\001\002\000\022\003\ufff5\013\ufff5\026\ufff5\030\ufff5\034" +
    "\ufff5\046\ufff5\061\ufff5\114\ufff5\001\002\000\022\003\ufff4" +
    "\013\ufff4\026\ufff4\030\ufff4\034\ufff4\046\ufff4\061\ufff4\114" +
    "\ufff4\001\002\000\004\030\150\001\002\000\016\034\uffdc" +
    "\036\uffdc\046\uffdc\061\uffdc\072\uffdc\114\uffdc\001\002\000" +
    "\136\003\uffa4\004\uffa4\005\uffa4\006\uffa4\007\uffa4\012\uffa4" +
    "\013\uffa4\015\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023" +
    "\uffa4\024\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\034\uffa4\035\uffa4\037\uffa4\040\uffa4\042\uffa4\043\uffa4\045" +
    "\uffa4\046\uffa4\050\uffa4\053\uffa4\055\uffa4\057\uffa4\061\uffa4" +
    "\064\uffa4\067\uffa4\071\uffa4\073\uffa4\103\uffa4\104\uffa4\105" +
    "\uffa4\106\uffa4\110\uffa4\111\uffa4\114\uffa4\115\uffa4\116\uffa4" +
    "\117\uffa4\001\002\000\136\003\uffa2\004\uffa2\005\uffa2\006" +
    "\uffa2\007\uffa2\012\uffa2\013\uffa2\015\uffa2\017\uffa2\020\uffa2" +
    "\021\uffa2\022\uffa2\023\uffa2\024\uffa2\026\uffa2\027\uffa2\030" +
    "\uffa2\031\uffa2\032\uffa2\034\uffa2\035\uffa2\037\uffa2\040\uffa2" +
    "\042\uffa2\043\uffa2\045\uffa2\046\uffa2\050\uffa2\053\uffa2\055" +
    "\uffa2\057\uffa2\061\uffa2\064\uffa2\067\uffa2\071\uffa2\073\uffa2" +
    "\103\uffa2\104\uffa2\105\uffa2\106\uffa2\110\uffa2\111\uffa2\114" +
    "\uffa2\115\uffa2\116\uffa2\117\uffa2\001\002\000\004\031\163" +
    "\001\002\000\006\043\uffe9\114\153\001\002\000\004\043" +
    "\156\001\002\000\004\030\157\001\002\000\016\034\uffdb" +
    "\036\uffdb\046\uffdb\061\uffdb\072\uffdb\114\uffdb\001\002\000" +
    "\006\043\uffe9\114\153\001\002\000\004\043\uffed\001\002" +
    "\000\004\043\uffea\001\002\000\024\003\146\060\164\075" +
    "\050\076\051\077\036\100\030\101\040\102\054\114\145" +
    "\001\002\000\004\033\167\001\002\000\004\030\166\001" +
    "\002\000\006\043\uffec\114\uffec\001\002\000\004\014\056" +
    "\001\002\000\004\056\171\001\002\000\022\003\146\075" +
    "\050\076\051\077\036\100\030\101\040\102\054\114\145" +
    "\001\002\000\004\030\173\001\002\000\006\043\uffeb\114" +
    "\uffeb\001\002\000\004\027\175\001\002\000\004\027\176" +
    "\001\002\000\030\003\061\004\027\005\046\012\041\055" +
    "\032\103\034\104\026\114\060\115\052\116\045\117\024" +
    "\001\002\000\022\003\ufff1\030\ufff1\032\130\034\ufff1\046" +
    "\ufff1\057\131\061\ufff1\114\ufff1\001\002\000\016\034\uffdd" +
    "\036\uffdd\046\uffdd\061\uffdd\072\uffdd\114\uffdd\001\002\000" +
    "\010\013\204\032\130\057\131\001\002\000\020\004\063" +
    "\005\065\006\067\007\064\013\203\037\066\053\062\001" +
    "\002\000\136\003\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3" +
    "\012\uffa3\013\uffa3\015\uffa3\017\uffa3\020\uffa3\021\uffa3\022" +
    "\uffa3\023\uffa3\024\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3" +
    "\032\uffa3\034\uffa3\035\uffa3\037\uffa3\040\uffa3\042\uffa3\043" +
    "\uffa3\045\uffa3\046\uffa3\050\uffa3\053\uffa3\055\uffa3\057\uffa3" +
    "\061\uffa3\064\uffa3\067\uffa3\071\uffa3\073\uffa3\103\uffa3\104" +
    "\uffa3\105\uffa3\106\uffa3\110\uffa3\111\uffa3\114\uffa3\115\uffa3" +
    "\116\uffa3\117\uffa3\001\002\000\136\003\uffa6\004\uffa6\005" +
    "\uffa6\006\uffa6\007\uffa6\012\uffa6\013\uffa6\015\uffa6\017\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\026\uffa6\027" +
    "\uffa6\030\uffa6\031\uffa6\032\uffa6\034\uffa6\035\uffa6\037\uffa6" +
    "\040\uffa6\042\uffa6\043\uffa6\045\uffa6\046\uffa6\050\uffa6\053" +
    "\uffa6\055\uffa6\057\uffa6\061\uffa6\064\uffa6\067\uffa6\071\uffa6" +
    "\073\uffa6\103\uffa6\104\uffa6\105\uffa6\106\uffa6\110\uffa6\111" +
    "\uffa6\114\uffa6\115\uffa6\116\uffa6\117\uffa6\001\002\000\026" +
    "\003\061\004\027\005\046\012\041\103\034\104\026\114" +
    "\060\115\052\116\045\117\024\001\002\000\026\003\061" +
    "\004\027\005\046\012\041\103\034\104\026\114\060\115" +
    "\052\116\045\117\024\001\002\000\026\003\061\004\027" +
    "\005\046\012\041\103\034\104\026\114\060\115\052\116" +
    "\045\117\024\001\002\000\026\003\061\004\027\005\046" +
    "\012\041\103\034\104\026\114\060\115\052\116\045\117" +
    "\024\001\002\000\026\003\061\004\027\005\046\012\041" +
    "\103\034\104\026\114\060\115\052\116\045\117\024\001" +
    "\002\000\026\003\061\004\027\005\046\012\041\103\034" +
    "\104\026\114\060\115\052\116\045\117\024\001\002\000" +
    "\122\003\uffb9\004\103\005\106\006\110\007\104\012\uffb9" +
    "\013\uffb9\015\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\034\uffb9\035\uffb9\037\107\040\uffb9\042\uffb9\043\uffb9" +
    "\045\uffb9\046\uffb9\050\uffb9\053\102\055\uffb9\057\uffb9\061" +
    "\uffb9\064\uffb9\067\uffb9\071\uffb9\073\uffb9\103\uffb9\104\uffb9" +
    "\105\uffb9\106\uffb9\110\uffb9\111\uffb9\114\uffb9\115\uffb9\116" +
    "\uffb9\117\uffb9\001\002\000\122\003\uffbe\004\103\005\106" +
    "\006\110\007\104\012\uffbe\013\uffbe\015\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\034\uffbe\035\uffbe\037\107" +
    "\040\uffbe\042\uffbe\043\uffbe\045\uffbe\046\uffbe\050\uffbe\053" +
    "\102\055\uffbe\057\uffbe\061\uffbe\064\uffbe\067\uffbe\071\uffbe" +
    "\073\uffbe\103\uffbe\104\uffbe\105\uffbe\106\uffbe\110\uffbe\111" +
    "\uffbe\114\uffbe\115\uffbe\116\uffbe\117\uffbe\001\002\000\122" +
    "\003\uffbb\004\103\005\106\006\110\007\104\012\uffbb\013" +
    "\uffbb\015\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb" +
    "\034\uffbb\035\uffbb\037\107\040\uffbb\042\uffbb\043\uffbb\045" +
    "\uffbb\046\uffbb\050\uffbb\053\102\055\uffbb\057\uffbb\061\uffbb" +
    "\064\uffbb\067\uffbb\071\uffbb\073\uffbb\103\uffbb\104\uffbb\105" +
    "\uffbb\106\uffbb\110\uffbb\111\uffbb\114\uffbb\115\uffbb\116\uffbb" +
    "\117\uffbb\001\002\000\122\003\uffbd\004\103\005\106\006" +
    "\110\007\104\012\uffbd\013\uffbd\015\uffbd\026\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\034\uffbd\035\uffbd\037\107\040" +
    "\uffbd\042\uffbd\043\uffbd\045\uffbd\046\uffbd\050\uffbd\053\102" +
    "\055\uffbd\057\uffbd\061\uffbd\064\uffbd\067\uffbd\071\uffbd\073" +
    "\uffbd\103\uffbd\104\uffbd\105\uffbd\106\uffbd\110\uffbd\111\uffbd" +
    "\114\uffbd\115\uffbd\116\uffbd\117\uffbd\001\002\000\122\003" +
    "\uffbc\004\103\005\106\006\110\007\104\012\uffbc\013\uffbc" +
    "\015\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\034" +
    "\uffbc\035\uffbc\037\107\040\uffbc\042\uffbc\043\uffbc\045\uffbc" +
    "\046\uffbc\050\uffbc\053\102\055\uffbc\057\uffbc\061\uffbc\064" +
    "\uffbc\067\uffbc\071\uffbc\073\uffbc\103\uffbc\104\uffbc\105\uffbc" +
    "\106\uffbc\110\uffbc\111\uffbc\114\uffbc\115\uffbc\116\uffbc\117" +
    "\uffbc\001\002\000\122\003\uffba\004\103\005\106\006\110" +
    "\007\104\012\uffba\013\uffba\015\uffba\026\uffba\027\uffba\030" +
    "\uffba\031\uffba\032\uffba\034\uffba\035\uffba\037\107\040\uffba" +
    "\042\uffba\043\uffba\045\uffba\046\uffba\050\uffba\053\102\055" +
    "\uffba\057\uffba\061\uffba\064\uffba\067\uffba\071\uffba\073\uffba" +
    "\103\uffba\104\uffba\105\uffba\106\uffba\110\uffba\111\uffba\114" +
    "\uffba\115\uffba\116\uffba\117\uffba\001\002\000\016\034\uffde" +
    "\036\uffde\046\uffde\061\uffde\072\uffde\114\uffde\001\002\000" +
    "\112\003\uffc0\004\uffc0\005\uffc0\012\uffc0\013\uffc0\015\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\034\uffc0\035" +
    "\uffc0\040\uffc0\042\uffc0\043\uffc0\045\uffc0\046\uffc0\050\uffc0" +
    "\055\uffc0\057\uffc0\061\uffc0\064\uffc0\067\uffc0\071\uffc0\073" +
    "\uffc0\103\uffc0\104\uffc0\105\uffc0\106\uffc0\110\uffc0\111\uffc0" +
    "\114\uffc0\115\uffc0\116\uffc0\117\uffc0\001\002\000\136\003" +
    "\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\012\uffa5\013\uffa5" +
    "\015\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\034\uffa5" +
    "\035\uffa5\037\uffa5\040\uffa5\042\uffa5\043\uffa5\045\uffa5\046" +
    "\uffa5\050\uffa5\053\uffa5\055\uffa5\057\uffa5\061\uffa5\064\uffa5" +
    "\067\uffa5\071\uffa5\073\uffa5\103\uffa5\104\uffa5\105\uffa5\106" +
    "\uffa5\110\uffa5\111\uffa5\114\uffa5\115\uffa5\116\uffa5\117\uffa5" +
    "\001\002\000\136\003\uffa1\004\063\005\065\006\067\007" +
    "\064\012\uffa1\013\uffa1\015\uffa1\017\uffa1\020\uffa1\021\uffa1" +
    "\022\uffa1\023\uffa1\024\uffa1\026\uffa1\027\uffa1\030\uffa1\031" +
    "\uffa1\032\uffa1\034\uffa1\035\uffa1\037\066\040\uffa1\042\uffa1" +
    "\043\uffa1\045\uffa1\046\uffa1\050\uffa1\053\062\055\uffa1\057" +
    "\uffa1\061\uffa1\064\uffa1\067\uffa1\071\uffa1\073\uffa1\103\uffa1" +
    "\104\uffa1\105\uffa1\106\uffa1\110\uffa1\111\uffa1\114\uffa1\115" +
    "\uffa1\116\uffa1\117\uffa1\001\002\000\004\030\241\001\002" +
    "\000\004\030\240\001\002\000\004\114\153\001\002\000" +
    "\004\014\056\001\002\000\004\056\232\001\002\000\022" +
    "\003\146\075\050\076\051\077\036\100\030\101\040\102" +
    "\054\114\145\001\002\000\004\030\234\001\002\000\016" +
    "\034\uffe0\036\uffe0\046\uffe0\061\uffe0\072\uffe0\114\uffe0\001" +
    "\002\000\004\043\236\001\002\000\004\030\237\001\002" +
    "\000\016\034\uffdf\036\uffdf\046\uffdf\061\uffdf\072\uffdf\114" +
    "\uffdf\001\002\000\016\034\uffe1\036\uffe1\046\uffe1\061\uffe1" +
    "\072\uffe1\114\uffe1\001\002\000\016\034\uffe2\036\uffe2\046" +
    "\uffe2\061\uffe2\072\uffe2\114\uffe2\001\002\000\012\003\ufff3" +
    "\017\ufff3\026\ufff3\031\ufff3\001\002\000\014\034\uffe4\036" +
    "\uffe4\046\uffe4\061\uffe4\072\uffe4\001\002\000\004\114\u0197" +
    "\001\002\000\012\034\uffd3\046\uffd3\061\uffd3\072\246\001" +
    "\002\000\006\003\u0174\114\015\001\002\000\010\034\uff57" +
    "\046\253\061\uff57\001\002\000\010\034\uff55\046\uff55\061" +
    "\uff55\001\002\000\010\034\uff58\046\253\061\uff58\001\002" +
    "\000\006\034\uff52\061\u015d\001\002\000\004\114\254\001" +
    "\002\000\004\012\255\001\002\000\012\013\uff4c\026\uff4c" +
    "\072\256\114\015\001\002\000\004\114\015\001\002\000" +
    "\006\013\uff4d\026\uff4d\001\002\000\006\026\021\031\u0158" +
    "\001\002\000\006\013\263\026\262\001\002\000\006\072" +
    "\256\114\015\001\002\000\004\031\264\001\002\000\022" +
    "\003\146\075\050\076\051\077\036\100\030\101\040\102" +
    "\054\114\145\001\002\000\004\030\266\001\002\000\006" +
    "\034\uffd3\072\246\001\002\000\004\034\270\001\002\000" +
    "\032\003\311\035\310\043\uff71\045\316\050\302\064\317" +
    "\073\276\105\277\106\320\110\306\111\273\114\303\001" +
    "\002\000\062\003\uff5c\004\uff5c\005\uff5c\012\uff5c\030\uff5c" +
    "\035\uff5c\042\uff5c\043\uff5c\045\uff5c\050\uff5c\055\uff5c\064" +
    "\uff5c\071\uff5c\073\uff5c\103\uff5c\104\uff5c\105\uff5c\106\uff5c" +
    "\110\uff5c\111\uff5c\114\uff5c\115\uff5c\116\uff5c\117\uff5c\001" +
    "\002\000\062\003\uff59\004\uff59\005\uff59\012\uff59\030\uff59" +
    "\035\uff59\042\uff59\043\uff59\045\uff59\050\uff59\055\uff59\064" +
    "\uff59\071\uff59\073\uff59\103\uff59\104\uff59\105\uff59\106\uff59" +
    "\110\uff59\111\uff59\114\uff59\115\uff59\116\uff59\117\uff59\001" +
    "\002\000\062\003\uff64\004\uff64\005\uff64\012\uff64\030\uff64" +
    "\035\uff64\042\uff64\043\uff64\045\uff64\050\uff64\055\uff64\064" +
    "\uff64\071\uff64\073\uff64\103\uff64\104\uff64\105\uff64\106\uff64" +
    "\110\uff64\111\uff64\114\uff64\115\uff64\116\uff64\117\uff64\001" +
    "\002\000\062\003\uff5b\004\uff5b\005\uff5b\012\uff5b\030\uff5b" +
    "\035\uff5b\042\uff5b\043\uff5b\045\uff5b\050\uff5b\055\uff5b\064" +
    "\uff5b\071\uff5b\073\uff5b\103\uff5b\104\uff5b\105\uff5b\106\uff5b" +
    "\110\uff5b\111\uff5b\114\uff5b\115\uff5b\116\uff5b\117\uff5b\001" +
    "\002\000\062\003\uff47\004\uff47\005\uff47\012\uff47\030\uff47" +
    "\035\uff47\042\uff47\043\uff47\045\uff47\050\uff47\055\uff47\064" +
    "\uff47\071\uff47\073\uff47\103\uff47\104\uff47\105\uff47\106\uff47" +
    "\110\uff47\111\uff47\114\uff47\115\uff47\116\uff47\117\uff47\001" +
    "\002\000\004\012\u014e\001\002\000\004\012\u014b\001\002" +
    "\000\006\030\u0149\043\uff70\001\002\000\004\043\uff72\001" +
    "\002\000\006\003\u013a\012\u013b\001\002\000\012\012\u012d" +
    "\014\u012f\025\u012c\027\u012e\001\002\000\062\003\uff46\004" +
    "\uff46\005\uff46\012\uff46\030\uff46\035\uff46\042\uff46\043\uff46" +
    "\045\uff46\050\uff46\055\uff46\064\uff46\071\uff46\073\uff46\103" +
    "\uff46\104\uff46\105\uff46\106\uff46\110\uff46\111\uff46\114\uff46" +
    "\115\uff46\116\uff46\117\uff46\001\002\000\032\003\311\035" +
    "\310\043\uff6e\045\316\050\302\064\317\073\276\105\277" +
    "\106\320\110\306\111\273\114\303\001\002\000\062\003" +
    "\uff65\004\uff65\005\uff65\012\uff65\030\uff65\035\uff65\042\uff65" +
    "\043\uff65\045\uff65\050\uff65\055\uff65\064\uff65\071\uff65\073" +
    "\uff65\103\uff65\104\uff65\105\uff65\106\uff65\110\uff65\111\uff65" +
    "\114\uff65\115\uff65\116\uff65\117\uff65\001\002\000\062\003" +
    "\uff5f\004\uff5f\005\uff5f\012\uff5f\030\uff5f\035\uff5f\042\uff5f" +
    "\043\uff5f\045\uff5f\050\uff5f\055\uff5f\064\uff5f\071\uff5f\073" +
    "\uff5f\103\uff5f\104\uff5f\105\uff5f\106\uff5f\110\uff5f\111\uff5f" +
    "\114\uff5f\115\uff5f\116\uff5f\117\uff5f\001\002\000\004\012" +
    "\u0107\001\002\000\062\003\uff5e\004\uff5e\005\uff5e\012\uff5e" +
    "\030\uff5e\035\uff5e\042\uff5e\043\uff5e\045\uff5e\050\uff5e\055" +
    "\uff5e\064\uff5e\071\uff5e\073\uff5e\103\uff5e\104\uff5e\105\uff5e" +
    "\106\uff5e\110\uff5e\111\uff5e\114\uff5e\115\uff5e\116\uff5e\117" +
    "\uff5e\001\002\000\062\003\uff5d\004\uff5d\005\uff5d\012\uff5d" +
    "\030\uff5d\035\uff5d\042\uff5d\043\uff5d\045\uff5d\050\uff5d\055" +
    "\uff5d\064\uff5d\071\uff5d\073\uff5d\103\uff5d\104\uff5d\105\uff5d" +
    "\106\uff5d\110\uff5d\111\uff5d\114\uff5d\115\uff5d\116\uff5d\117" +
    "\uff5d\001\002\000\004\043\u0105\001\002\000\032\003\311" +
    "\034\362\035\310\045\316\050\302\064\317\073\276\105" +
    "\277\106\320\110\306\111\273\114\303\001\002\000\062" +
    "\003\uff5a\004\uff5a\005\uff5a\012\uff5a\030\uff5a\035\uff5a\042" +
    "\uff5a\043\uff5a\045\uff5a\050\uff5a\055\uff5a\064\uff5a\071\uff5a" +
    "\073\uff5a\103\uff5a\104\uff5a\105\uff5a\106\uff5a\110\uff5a\111" +
    "\uff5a\114\uff5a\115\uff5a\116\uff5a\117\uff5a\001\002\000\004" +
    "\114\336\001\002\000\032\003\311\034\325\035\310\045" +
    "\316\050\302\064\317\073\276\105\277\106\320\110\306" +
    "\111\273\114\303\001\002\000\004\012\321\001\002\000" +
    "\030\003\061\004\027\005\046\012\041\055\032\103\034" +
    "\104\026\114\060\115\052\116\045\117\024\001\002\000" +
    "\006\013\323\026\125\001\002\000\062\003\uff44\004\uff44" +
    "\005\uff44\012\uff44\030\uff44\035\uff44\042\uff44\043\uff44\045" +
    "\uff44\050\uff44\055\uff44\064\uff44\071\uff44\073\uff44\103\uff44" +
    "\104\uff44\105\uff44\106\uff44\110\uff44\111\uff44\114\uff44\115" +
    "\uff44\116\uff44\117\uff44\001\002\000\004\030\335\001\002" +
    "\000\032\003\311\035\310\043\uff71\045\316\050\302\064" +
    "\317\073\276\105\277\106\320\110\306\111\273\114\303" +
    "\001\002\000\062\003\uff74\004\uff74\005\uff74\012\uff74\030" +
    "\uff74\035\uff74\042\uff74\043\uff74\045\uff74\050\uff74\055\uff74" +
    "\064\uff74\071\uff74\073\uff74\103\uff74\104\uff74\105\uff74\106" +
    "\uff74\110\uff74\111\uff74\114\uff74\115\uff74\116\uff74\117\uff74" +
    "\001\002\000\004\071\330\001\002\000\030\003\061\004" +
    "\027\005\046\012\041\055\032\103\034\104\026\114\060" +
    "\115\052\116\045\117\024\001\002\000\066\003\uff76\004" +
    "\uff76\005\uff76\012\uff76\030\uff76\032\130\035\uff76\042\uff76" +
    "\043\uff76\045\uff76\050\uff76\055\uff76\057\131\064\uff76\071" +
    "\uff76\073\uff76\103\uff76\104\uff76\105\uff76\106\uff76\110\uff76" +
    "\111\uff76\114\uff76\115\uff76\116\uff76\117\uff76\001\002\000" +
    "\004\043\333\001\002\000\004\030\334\001\002\000\062" +
    "\003\uff73\004\uff73\005\uff73\012\uff73\030\uff73\035\uff73\042" +
    "\uff73\043\uff73\045\uff73\050\uff73\055\uff73\064\uff73\071\uff73" +
    "\073\uff73\103\uff73\104\uff73\105\uff73\106\uff73\110\uff73\111" +
    "\uff73\114\uff73\115\uff73\116\uff73\117\uff73\001\002\000\062" +
    "\003\uff75\004\uff75\005\uff75\012\uff75\030\uff75\035\uff75\042" +
    "\uff75\043\uff75\045\uff75\050\uff75\055\uff75\064\uff75\071\uff75" +
    "\073\uff75\103\uff75\104\uff75\105\uff75\106\uff75\110\uff75\111" +
    "\uff75\114\uff75\115\uff75\116\uff75\117\uff75\001\002\000\006" +
    "\003\337\025\340\001\002\000\030\003\061\004\027\005" +
    "\046\012\041\055\032\103\034\104\026\114\060\115\052" +
    "\116\045\117\024\001\002\000\030\003\342\004\027\005" +
    "\046\012\041\055\032\103\034\104\026\114\060\115\052" +
    "\116\045\117\024\001\002\000\010\032\130\057\131\067" +
    "\347\001\002\000\020\004\063\005\065\006\067\007\064" +
    "\037\066\053\062\067\343\001\002\000\030\003\061\004" +
    "\027\005\046\012\041\055\032\103\034\104\026\114\060" +
    "\115\052\116\045\117\024\001\002\000\010\032\130\040" +
    "\345\057\131\001\002\000\032\003\311\034\325\035\310" +
    "\045\316\050\302\064\317\073\276\105\277\106\320\110" +
    "\306\111\273\114\303\001\002\000\062\003\uff78\004\uff78" +
    "\005\uff78\012\uff78\030\uff78\035\uff78\042\uff78\043\uff78\045" +
    "\uff78\050\uff78\055\uff78\064\uff78\071\uff78\073\uff78\103\uff78" +
    "\104\uff78\105\uff78\106\uff78\110\uff78\111\uff78\114\uff78\115" +
    "\uff78\116\uff78\117\uff78\001\002\000\030\003\061\004\027" +
    "\005\046\012\041\055\032\103\034\104\026\114\060\115" +
    "\052\116\045\117\024\001\002\000\010\032\130\040\351" +
    "\057\131\001\002\000\032\003\311\034\325\035\310\045" +
    "\316\050\302\064\317\073\276\105\277\106\320\110\306" +
    "\111\273\114\303\001\002\000\062\003\uff79\004\uff79\005" +
    "\uff79\012\uff79\030\uff79\035\uff79\042\uff79\043\uff79\045\uff79" +
    "\050\uff79\055\uff79\064\uff79\071\uff79\073\uff79\103\uff79\104" +
    "\uff79\105\uff79\106\uff79\110\uff79\111\uff79\114\uff79\115\uff79" +
    "\116\uff79\117\uff79\001\002\000\010\032\130\057\131\067" +
    "\354\001\002\000\030\003\061\004\027\005\046\012\041" +
    "\055\032\103\034\104\026\114\060\115\052\116\045\117" +
    "\024\001\002\000\010\032\130\040\356\057\131\001\002" +
    "\000\032\003\311\034\325\035\310\045\316\050\302\064" +
    "\317\073\276\105\277\106\320\110\306\111\273\114\303" +
    "\001\002\000\062\003\uff77\004\uff77\005\uff77\012\uff77\030" +
    "\uff77\035\uff77\042\uff77\043\uff77\045\uff77\050\uff77\055\uff77" +
    "\064\uff77\071\uff77\073\uff77\103\uff77\104\uff77\105\uff77\106" +
    "\uff77\110\uff77\111\uff77\114\uff77\115\uff77\116\uff77\117\uff77" +
    "\001\002\000\062\003\uff93\004\uff93\005\uff93\012\uff93\030" +
    "\uff93\035\uff93\042\uff93\043\uff93\045\uff93\050\uff93\055\uff93" +
    "\064\uff93\071\uff93\073\uff93\103\uff93\104\uff93\105\uff93\106" +
    "\uff93\110\uff93\111\uff93\114\uff93\115\uff93\116\uff93\117\uff93" +
    "\001\002\000\062\003\uff9b\004\uff9b\005\uff9b\012\uff9b\030" +
    "\366\035\uff9b\042\367\043\uff9b\045\uff9b\050\uff9b\055\uff9b" +
    "\064\uff9b\071\uff9b\073\uff9b\103\uff9b\104\uff9b\105\uff9b\106" +
    "\uff9b\110\uff9b\111\uff9b\114\uff9b\115\uff9b\116\uff9b\117\uff9b" +
    "\001\002\000\032\003\311\035\310\043\uff71\045\316\050" +
    "\302\064\317\073\276\105\277\106\320\110\306\111\273" +
    "\114\303\001\002\000\062\003\uff92\004\uff92\005\uff92\012" +
    "\uff92\030\uff92\035\uff92\042\uff92\043\uff92\045\uff92\050\uff92" +
    "\055\uff92\064\uff92\071\uff92\073\uff92\103\uff92\104\uff92\105" +
    "\uff92\106\uff92\110\uff92\111\uff92\114\uff92\115\uff92\116\uff92" +
    "\117\uff92\001\002\000\004\043\365\001\002\000\062\003" +
    "\uff91\004\uff91\005\uff91\012\uff91\030\uff91\035\uff91\042\uff91" +
    "\043\uff91\045\uff91\050\uff91\055\uff91\064\uff91\071\uff91\073" +
    "\uff91\103\uff91\104\uff91\105\uff91\106\uff91\110\uff91\111\uff91" +
    "\114\uff91\115\uff91\116\uff91\117\uff91\001\002\000\062\003" +
    "\uff9a\004\uff9a\005\uff9a\012\uff9a\030\uff9a\035\uff9a\042\uff9a" +
    "\043\uff9a\045\uff9a\050\uff9a\055\uff9a\064\uff9a\071\uff9a\073" +
    "\uff9a\103\uff9a\104\uff9a\105\uff9a\106\uff9a\110\uff9a\111\uff9a" +
    "\114\uff9a\115\uff9a\116\uff9a\117\uff9a\001\002\000\032\003" +
    "\311\034\377\035\310\045\316\050\302\064\317\073\276" +
    "\105\277\106\320\110\306\111\273\114\303\001\002\000" +
    "\004\030\uff88\001\002\000\004\030\uff8b\001\002\000\004" +
    "\030\uff8a\001\002\000\004\030\u0104\001\002\000\004\030" +
    "\uff8d\001\002\000\062\003\uff99\004\uff99\005\uff99\012\uff99" +
    "\030\uff99\035\uff99\042\uff99\043\uff99\045\uff99\050\uff99\055" +
    "\uff99\064\uff99\071\uff99\073\uff99\103\uff99\104\uff99\105\uff99" +
    "\106\uff99\110\uff99\111\uff99\114\uff99\115\uff99\116\uff99\117" +
    "\uff99\001\002\000\004\030\uff8e\001\002\000\032\003\311" +
    "\035\310\043\uff71\045\316\050\302\064\317\073\276\105" +
    "\277\106\320\110\306\111\273\114\303\001\002\000\062" +
    "\003\uff8f\004\uff8f\005\uff8f\012\uff8f\030\uff8f\035\uff8f\042" +
    "\uff8f\043\uff8f\045\uff8f\050\uff8f\055\uff8f\064\uff8f\071\uff8f" +
    "\073\uff8f\103\uff8f\104\uff8f\105\uff8f\106\uff8f\110\uff8f\111" +
    "\uff8f\114\uff8f\115\uff8f\116\uff8f\117\uff8f\001\002\000\004" +
    "\030\uff89\001\002\000\004\043\u0103\001\002\000\004\030" +
    "\uff8c\001\002\000\062\003\uff90\004\uff90\005\uff90\012\uff90" +
    "\030\uff90\035\uff90\042\uff90\043\uff90\045\uff90\050\uff90\055" +
    "\uff90\064\uff90\071\uff90\073\uff90\103\uff90\104\uff90\105\uff90" +
    "\106\uff90\110\uff90\111\uff90\114\uff90\115\uff90\116\uff90\117" +
    "\uff90\001\002\000\004\030\u0106\001\002\000\010\034\uff54" +
    "\046\uff54\061\uff54\001\002\000\030\003\061\004\027\005" +
    "\046\012\041\055\032\103\034\104\026\114\060\115\052" +
    "\116\045\117\024\001\002\000\010\013\u0109\032\130\057" +
    "\131\001\002\000\004\056\u010a\001\002\000\030\003\061" +
    "\004\027\005\046\012\041\055\032\103\034\104\026\114" +
    "\060\115\052\116\045\117\024\001\002\000\032\003\061" +
    "\004\027\005\046\012\041\042\u011a\055\032\103\034\104" +
    "\026\114\060\115\052\116\045\117\024\001\002\000\006" +
    "\026\u010e\031\u010f\001\002\000\012\026\uff83\031\uff83\032" +
    "\130\057\131\001\002\000\030\003\061\004\027\005\046" +
    "\012\041\055\032\103\034\104\026\114\060\115\052\116" +
    "\045\117\024\001\002\000\032\003\311\034\u0112\035\310" +
    "\045\316\050\302\064\317\073\276\105\277\106\320\110" +
    "\306\111\273\114\303\001\002\000\032\003\uff85\004\uff85" +
    "\005\uff85\012\uff85\042\uff85\055\uff85\103\uff85\104\uff85\114" +
    "\uff85\115\uff85\116\uff85\117\uff85\001\002\000\004\030\u0117" +
    "\001\002\000\032\003\311\035\310\043\uff71\045\316\050" +
    "\302\064\317\073\276\105\277\106\320\110\306\111\273" +
    "\114\303\001\002\000\032\003\uff81\004\uff81\005\uff81\012" +
    "\uff81\042\uff81\055\uff81\103\uff81\104\uff81\114\uff81\115\uff81" +
    "\116\uff81\117\uff81\001\002\000\004\043\u0115\001\002\000" +
    "\004\030\u0116\001\002\000\032\003\uff80\004\uff80\005\uff80" +
    "\012\uff80\042\uff80\055\uff80\103\uff80\104\uff80\114\uff80\115" +
    "\uff80\116\uff80\117\uff80\001\002\000\032\003\uff82\004\uff82" +
    "\005\uff82\012\uff82\042\uff82\055\uff82\103\uff82\104\uff82\114" +
    "\uff82\115\uff82\116\uff82\117\uff82\001\002\000\012\026\uff84" +
    "\031\uff84\032\130\057\131\001\002\000\006\026\u010e\031" +
    "\u0123\001\002\000\032\003\311\034\u011c\035\310\045\316" +
    "\050\302\064\317\073\276\105\277\106\320\110\306\111" +
    "\273\114\303\001\002\000\006\030\u0122\043\uff7f\001\002" +
    "\000\032\003\311\035\310\043\uff71\045\316\050\302\064" +
    "\317\073\276\105\277\106\320\110\306\111\273\114\303" +
    "\001\002\000\004\043\uff7d\001\002\000\004\043\u011f\001" +
    "\002\000\004\030\u0120\001\002\000\062\003\uff87\004\uff87" +
    "\005\uff87\012\uff87\030\uff87\035\uff87\042\uff87\043\uff87\045" +
    "\uff87\050\uff87\055\uff87\064\uff87\071\uff87\073\uff87\103\uff87" +
    "\104\uff87\105\uff87\106\uff87\110\uff87\111\uff87\114\uff87\115" +
    "\uff87\116\uff87\117\uff87\001\002\000\004\043\uff7c\001\002" +
    "\000\004\043\uff7e\001\002\000\032\003\311\034\u0112\035" +
    "\310\045\316\050\302\064\317\073\276\105\277\106\320" +
    "\110\306\111\273\114\303\001\002\000\032\003\uff86\004" +
    "\uff86\005\uff86\012\uff86\042\uff86\055\uff86\103\uff86\104\uff86" +
    "\114\uff86\115\uff86\116\uff86\117\uff86\001\002\000\010\003" +
    "\u012a\030\u0129\043\uff6a\001\002\000\004\043\uff6c\001\002" +
    "\000\032\003\311\035\310\043\uff66\045\316\050\302\064" +
    "\317\073\276\105\277\106\320\110\306\111\273\114\303" +
    "\001\002\000\004\043\uff67\001\002\000\032\003\311\035" +
    "\310\043\uff69\045\316\050\302\064\317\073\276\105\277" +
    "\106\320\110\306\111\273\114\303\001\002\000\004\043" +
    "\uff6b\001\002\000\004\043\uff68\001\002\000\030\003\061" +
    "\004\027\005\046\012\041\055\032\103\034\104\026\114" +
    "\060\115\052\116\045\117\024\001\002\000\030\003\061" +
    "\004\027\005\046\012\041\055\032\103\034\104\026\114" +
    "\060\115\052\116\045\117\024\001\002\000\004\114\117" +
    "\001\002\000\030\003\061\004\027\005\046\012\041\055" +
    "\032\103\034\104\026\114\060\115\052\116\045\117\024" +
    "\001\002\000\010\015\u0131\032\130\057\131\001\002\000" +
    "\004\025\u0132\001\002\000\030\003\061\004\027\005\046" +
    "\012\041\055\032\103\034\104\026\114\060\115\052\116" +
    "\045\117\024\001\002\000\066\003\uff60\004\uff60\005\uff60" +
    "\012\uff60\030\uff60\032\130\035\uff60\042\uff60\043\uff60\045" +
    "\uff60\050\uff60\055\uff60\057\131\064\uff60\071\uff60\073\uff60" +
    "\103\uff60\104\uff60\105\uff60\106\uff60\110\uff60\111\uff60\114" +
    "\uff60\115\uff60\116\uff60\117\uff60\001\002\000\006\025\u0135" +
    "\027\121\001\002\000\030\003\061\004\027\005\046\012" +
    "\041\055\032\103\034\104\026\114\060\115\052\116\045" +
    "\117\024\001\002\000\066\003\uff61\004\uff61\005\uff61\012" +
    "\uff61\030\uff61\032\130\035\uff61\042\uff61\043\uff61\045\uff61" +
    "\050\uff61\055\uff61\057\131\064\uff61\071\uff61\073\uff61\103" +
    "\uff61\104\uff61\105\uff61\106\uff61\110\uff61\111\uff61\114\uff61" +
    "\115\uff61\116\uff61\117\uff61\001\002\000\006\013\u0138\026" +
    "\125\001\002\000\062\003\uff62\004\uff62\005\uff62\012\uff62" +
    "\030\uff62\035\uff62\042\uff62\043\uff62\045\uff62\050\uff62\055" +
    "\uff62\064\uff62\071\uff62\073\uff62\103\uff62\104\uff62\105\uff62" +
    "\106\uff62\110\uff62\111\uff62\114\uff62\115\uff62\116\uff62\117" +
    "\uff62\001\002\000\066\003\uff63\004\uff63\005\uff63\012\uff63" +
    "\030\uff63\032\130\035\uff63\042\uff63\043\uff63\045\uff63\050" +
    "\uff63\055\uff63\057\131\064\uff63\071\uff63\073\uff63\103\uff63" +
    "\104\uff63\105\uff63\106\uff63\110\uff63\111\uff63\114\uff63\115" +
    "\uff63\116\uff63\117\uff63\001\002\000\030\003\061\004\027" +
    "\005\046\012\041\055\032\103\034\104\026\114\060\115" +
    "\052\116\045\117\024\001\002\000\030\003\u013d\004\027" +
    "\005\046\012\041\055\032\103\034\104\026\114\060\115" +
    "\052\116\045\117\024\001\002\000\012\003\u0141\013\u0140" +
    "\032\130\057\131\001\002\000\020\004\063\005\065\006" +
    "\067\007\064\013\u013e\037\066\053\062\001\002\000\004" +
    "\066\u013f\001\002\000\032\003\uff97\034\uff97\035\uff97\045" +
    "\uff97\050\uff97\064\uff97\073\uff97\105\uff97\106\uff97\110\uff97" +
    "\111\uff97\114\uff97\001\002\000\004\066\u0143\001\002\000" +
    "\004\066\u0142\001\002\000\032\003\uff96\034\uff96\035\uff96" +
    "\045\uff96\050\uff96\064\uff96\073\uff96\105\uff96\106\uff96\110" +
    "\uff96\111\uff96\114\uff96\001\002\000\032\003\uff98\034\uff98" +
    "\035\uff98\045\uff98\050\uff98\064\uff98\073\uff98\105\uff98\106" +
    "\uff98\110\uff98\111\uff98\114\uff98\001\002\000\012\003\u0146" +
    "\013\u0145\032\130\057\131\001\002\000\004\066\u0148\001" +
    "\002\000\004\066\u0147\001\002\000\032\003\uff94\034\uff94" +
    "\035\uff94\045\uff94\050\uff94\064\uff94\073\uff94\105\uff94\106" +
    "\uff94\110\uff94\111\uff94\114\uff94\001\002\000\032\003\uff95" +
    "\034\uff95\035\uff95\045\uff95\050\uff95\064\uff95\073\uff95\105" +
    "\uff95\106\uff95\110\uff95\111\uff95\114\uff95\001\002\000\032" +
    "\003\311\035\310\043\uff6f\045\316\050\302\064\317\073" +
    "\276\105\277\106\320\110\306\111\273\114\303\001\002" +
    "\000\004\043\uff6d\001\002\000\030\003\061\004\027\005" +
    "\046\012\041\055\032\103\034\104\026\114\060\115\052" +
    "\116\045\117\024\001\002\000\006\013\u014d\026\125\001" +
    "\002\000\062\003\uff45\004\uff45\005\uff45\012\uff45\030\uff45" +
    "\035\uff45\042\uff45\043\uff45\045\uff45\050\uff45\055\uff45\064" +
    "\uff45\071\uff45\073\uff45\103\uff45\104\uff45\105\uff45\106\uff45" +
    "\110\uff45\111\uff45\114\uff45\115\uff45\116\uff45\117\uff45\001" +
    "\002\000\030\003\u0150\004\027\005\046\012\041\055\032" +
    "\103\034\104\026\114\060\115\052\116\045\117\024\001" +
    "\002\000\010\013\u0154\032\130\057\131\001\002\000\020" +
    "\004\063\005\065\006\067\007\064\013\u0151\037\066\053" +
    "\062\001\002\000\004\040\u0152\001\002\000\032\003\311" +
    "\034\325\035\310\045\316\050\302\064\317\073\276\105" +
    "\277\106\320\110\306\111\273\114\303\001\002\000\062" +
    "\003\uff7a\004\uff7a\005\uff7a\012\uff7a\030\uff7a\035\uff7a\042" +
    "\uff7a\043\uff7a\045\uff7a\050\uff7a\055\uff7a\064\uff7a\071\uff7a" +
    "\073\uff7a\103\uff7a\104\uff7a\105\uff7a\106\uff7a\110\uff7a\111" +
    "\uff7a\114\uff7a\115\uff7a\116\uff7a\117\uff7a\001\002\000\004" +
    "\040\u0155\001\002\000\032\003\311\034\325\035\310\045" +
    "\316\050\302\064\317\073\276\105\277\106\320\110\306" +
    "\111\273\114\303\001\002\000\062\003\uff7b\004\uff7b\005" +
    "\uff7b\012\uff7b\030\uff7b\035\uff7b\042\uff7b\043\uff7b\045\uff7b" +
    "\050\uff7b\055\uff7b\064\uff7b\071\uff7b\073\uff7b\103\uff7b\104" +
    "\uff7b\105\uff7b\106\uff7b\110\uff7b\111\uff7b\114\uff7b\115\uff7b" +
    "\116\uff7b\117\uff7b\001\002\000\006\013\uff4e\026\uff4e\001" +
    "\002\000\022\003\146\075\050\076\051\077\036\100\030" +
    "\101\040\102\054\114\145\001\002\000\006\013\uff4a\026" +
    "\uff4a\001\002\000\006\026\021\031\u015b\001\002\000\022" +
    "\003\146\075\050\076\051\077\036\100\030\101\040\102" +
    "\054\114\145\001\002\000\006\013\uff4b\026\uff4b\001\002" +
    "\000\004\114\u0168\001\002\000\004\034\u0163\001\002\000" +
    "\006\034\uff50\061\uff50\001\002\000\006\034\uff53\061\u015d" +
    "\001\002\000\006\034\uff51\061\uff51\001\002\000\004\002" +
    "\000\001\002\000\032\003\311\035\310\043\uff71\045\316" +
    "\050\302\064\317\073\276\105\277\106\320\110\306\111" +
    "\273\114\303\001\002\000\004\043\u0165\001\002\000\006" +
    "\003\u0166\027\u0167\001\002\000\004\002\uff48\001\002\000" +
    "\004\002\uff49\001\002\000\004\012\u0169\001\002\000\012" +
    "\013\uff4c\026\uff4c\072\256\114\015\001\002\000\006\013" +
    "\u016b\026\262\001\002\000\004\030\u016c\001\002\000\006" +
    "\034\uffd3\072\246\001\002\000\004\034\u016e\001\002\000" +
    "\032\003\311\035\310\043\uff71\045\316\050\302\064\317" +
    "\073\276\105\277\106\320\110\306\111\273\114\303\001" +
    "\002\000\004\043\u0170\001\002\000\004\030\u0171\001\002" +
    "\000\006\034\uff4f\061\uff4f\001\002\000\010\034\uff56\046" +
    "\uff56\061\uff56\001\002\000\012\034\uffd4\046\uffd4\061\uffd4" +
    "\114\015\001\002\000\004\114\015\001\002\000\012\003" +
    "\u017b\017\u017a\026\021\031\u017c\001\002\000\006\003\u0178" +
    "\030\u0177\001\002\000\012\034\uffd1\046\uffd1\061\uffd1\114" +
    "\uffd1\001\002\000\004\114\015\001\002\000\012\034\uffce" +
    "\046\uffce\061\uffce\114\uffce\001\002\000\004\063\u018f\001" +
    "\002\000\050\003\047\004\027\005\046\012\041\033\u0189" +
    "\055\032\063\u0188\075\050\076\051\077\036\100\030\101" +
    "\040\102\054\103\034\104\026\114\033\115\052\116\045" +
    "\117\024\001\002\000\050\003\047\004\027\005\046\012" +
    "\041\033\u0180\055\032\063\u017f\075\050\076\051\077\036" +
    "\100\030\101\040\102\054\103\034\104\026\114\033\115" +
    "\052\116\045\117\024\001\002\000\016\003\uffcd\030\uffcd" +
    "\034\uffcd\046\uffcd\061\uffcd\114\uffcd\001\002\000\016\003" +
    "\uffcc\030\uffcc\034\uffcc\046\uffcc\061\uffcc\114\uffcc\001\002" +
    "\000\004\114\153\001\002\000\004\014\056\001\002\000" +
    "\004\056\u0182\001\002\000\022\003\146\075\050\076\051" +
    "\077\036\100\030\101\040\102\054\114\145\001\002\000" +
    "\016\003\uffcb\030\uffcb\034\uffcb\046\uffcb\061\uffcb\114\uffcb" +
    "\001\002\000\004\043\u0185\001\002\000\016\003\uffc9\030" +
    "\uffc9\034\uffc9\046\uffc9\061\uffc9\114\uffc9\001\002\000\016" +
    "\003\uffc8\030\uffc8\034\uffc8\046\uffc8\061\uffc8\114\uffc8\001" +
    "\002\000\016\003\uffc7\030\uffc7\034\uffc7\046\uffc7\061\uffc7" +
    "\114\uffc7\001\002\000\004\114\153\001\002\000\004\014" +
    "\056\001\002\000\004\056\u018b\001\002\000\022\003\146" +
    "\075\050\076\051\077\036\100\030\101\040\102\054\114" +
    "\145\001\002\000\016\003\uffc6\030\uffc6\034\uffc6\046\uffc6" +
    "\061\uffc6\114\uffc6\001\002\000\004\043\u018e\001\002\000" +
    "\016\003\uffc5\030\uffc5\034\uffc5\046\uffc5\061\uffc5\114\uffc5" +
    "\001\002\000\004\114\153\001\002\000\004\043\u0191\001" +
    "\002\000\016\003\uffca\030\uffca\034\uffca\046\uffca\061\uffca" +
    "\114\uffca\001\002\000\012\034\uffcf\046\uffcf\061\uffcf\114" +
    "\uffcf\001\002\000\006\003\u0195\030\u0194\001\002\000\012" +
    "\034\uffd2\046\uffd2\061\uffd2\114\uffd2\001\002\000\004\114" +
    "\015\001\002\000\012\034\uffd0\046\uffd0\061\uffd0\114\uffd0" +
    "\001\002\000\004\017\u019b\001\002\000\014\034\uffda\046" +
    "\uffda\061\uffda\072\uffda\114\u0197\001\002\000\014\034\uffd7" +
    "\046\uffd7\061\uffd7\072\uffd7\114\uffd7\001\002\000\014\034" +
    "\uffd8\046\uffd8\061\uffd8\072\uffd8\114\uffd8\001\002\000\030" +
    "\003\061\004\027\005\046\012\041\055\032\103\034\104" +
    "\026\114\060\115\052\116\045\117\024\001\002\000\012" +
    "\003\u019e\030\u019d\032\130\057\131\001\002\000\014\034" +
    "\uffd6\046\uffd6\061\uffd6\072\uffd6\114\uffd6\001\002\000\014" +
    "\034\uffd5\046\uffd5\061\uffd5\072\uffd5\114\uffd5\001\002\000" +
    "\004\002\001\001\002\000\016\034\ufffd\036\ufffd\046\ufffd" +
    "\061\ufffd\070\ufffd\072\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019e\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\244\001\001\000\010\004\016\010\017" +
    "\011\015\001\001\000\002\001\001\000\010\004\016\010" +
    "\242\011\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\224\023\042\024\024\025" +
    "\036\026\030\032\225\001\001\000\016\006\034\023\042" +
    "\024\024\025\036\026\030\032\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\222" +
    "\026\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\023\221\024\024\025\036\026\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\023\200" +
    "\024\024\025\036\026\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\154\021\153\001\001\000\002" +
    "\001\001\000\006\025\150\026\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\023\056\024\024\025\036\026\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\023\122\024" +
    "\024\025\036\026\030\030\123\001\001\000\004\005\117" +
    "\001\001\000\006\025\100\026\030\001\001\000\002\001" +
    "\001\000\006\025\115\026\030\001\001\000\006\025\114" +
    "\026\030\001\001\000\006\025\113\026\030\001\001\000" +
    "\002\001\001\000\006\025\112\026\030\001\001\000\006" +
    "\025\111\026\030\001\001\000\006\025\110\026\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\023" +
    "\126\024\024\025\036\026\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\023\135\024\024\025\036\026" +
    "\030\001\001\000\012\023\131\024\024\025\036\026\030" +
    "\001\001\000\002\001\001\000\012\023\133\024\024\025" +
    "\036\026\030\001\001\000\002\001\001\000\012\023\136" +
    "\024\024\025\036\026\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\023\141\024\024" +
    "\025\036\026\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\160" +
    "\021\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\161\021\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\167\001\001\000\002\001\001\000\004\006\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\023\176\024\024\025\036\026" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\217\026\030\001\001\000\006\025\216" +
    "\026\030\001\001\000\006\025\215\026\030\001\001\000" +
    "\006\025\214\026\030\001\001\000\006\025\213\026\030" +
    "\001\001\000\006\025\212\026\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\234\021\153\001" +
    "\001\000\004\033\230\001\001\000\002\001\001\000\004" +
    "\006\232\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\u0197\022\u0198\001\001\000\004\017\246" +
    "\001\001\000\010\004\u0174\016\u0172\020\u0175\001\001\000" +
    "\010\057\247\063\251\064\250\001\001\000\002\001\001" +
    "\000\004\057\u0171\001\001\000\010\060\u015e\061\u015d\062" +
    "\u015f\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\257\065\260\066\256\001\001\000\004\004\u0159\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\257\066\u0156\001\001\000\002\001\001\000" +
    "\004\006\264\001\001\000\002\001\001\000\004\017\266" +
    "\001\001\000\002\001\001\000\034\027\313\034\277\035" +
    "\304\037\300\041\312\047\273\050\314\051\271\052\270" +
    "\054\306\055\274\056\303\070\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\027\313\034\u0124\035" +
    "\u0126\040\u0125\047\273\050\314\051\271\052\270\054\306" +
    "\055\274\056\303\070\311\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\027\313\034\357\035" +
    "\362\043\360\047\273\050\314\051\271\052\270\054\306" +
    "\055\274\056\303\070\311\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\027\313\034\323\035\325\042\326" +
    "\047\273\050\314\051\271\052\270\054\306\055\274\056" +
    "\303\070\311\001\001\000\002\001\001\000\014\023\122" +
    "\024\024\025\036\026\030\030\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\027\313" +
    "\034\277\035\304\037\300\041\331\047\273\050\314\051" +
    "\271\052\270\054\306\055\274\056\303\070\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\023\330\024" +
    "\024\025\036\026\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\023\352\024\024\025\036" +
    "\026\030\001\001\000\012\023\340\024\024\025\036\026" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\023\343\024\024\025\036\026\030\001\001\000\002\001" +
    "\001\000\032\027\313\034\323\035\325\042\345\047\273" +
    "\050\314\051\271\052\270\054\306\055\274\056\303\070" +
    "\311\001\001\000\002\001\001\000\012\023\347\024\024" +
    "\025\036\026\030\001\001\000\002\001\001\000\032\027" +
    "\313\034\323\035\325\042\351\047\273\050\314\051\271" +
    "\052\270\054\306\055\274\056\303\070\311\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\023\354\024\024" +
    "\025\036\026\030\001\001\000\002\001\001\000\032\027" +
    "\313\034\323\035\325\042\356\047\273\050\314\051\271" +
    "\052\270\054\306\055\274\056\303\070\311\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\027\313\034\277\035\304\037\300\041\363\047\273\050" +
    "\314\051\271\052\270\054\306\055\274\056\303\070\311" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\027\313\034\373\036\375" +
    "\047\371\050\u0100\051\367\052\370\053\372\054\306\055" +
    "\274\056\303\067\374\070\377\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\027\313\034\277\035\304\037\300\041\u0101\047\273\050" +
    "\314\051\271\052\270\054\306\055\274\056\303\070\311" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\023\u0107\024\024\025\036\026" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\023\u010c\024\024\025\036\026\030\031\u010b\071\u010a\001" +
    "\001\000\014\023\u010c\024\024\025\036\026\030\031\u0118" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\023" +
    "\u0117\024\024\025\036\026\030\001\001\000\032\027\313" +
    "\034\u0110\035\u0112\044\u010f\047\273\050\314\051\271\052" +
    "\270\054\306\055\274\056\303\070\311\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\027\313\034\277\035" +
    "\304\037\300\041\u0113\047\273\050\314\051\271\052\270" +
    "\054\306\055\274\056\303\070\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\027\313\034\u011a\035\u011c\045\u011d\047\273\050\314" +
    "\051\271\052\270\054\306\055\274\056\303\070\311\001" +
    "\001\000\002\001\001\000\034\027\313\034\277\035\304" +
    "\037\300\041\u0120\047\273\050\314\051\271\052\270\054" +
    "\306\055\274\056\303\070\311\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\027\313\034\u0110" +
    "\035\u0112\044\u0123\047\273\050\314\051\271\052\270\054" +
    "\306\055\274\056\303\070\311\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\027\313\034" +
    "\u0124\035\u0126\040\u0127\047\273\050\314\051\271\052\270" +
    "\054\306\055\274\056\303\070\311\001\001\000\002\001" +
    "\001\000\032\027\313\034\u0124\035\u0126\040\u012a\047\273" +
    "\050\314\051\271\052\270\054\306\055\274\056\303\070" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\023\u0138\024\024\025\036\026\030\001\001\000\014\023" +
    "\122\024\024\025\036\026\030\030\u0136\001\001\000\004" +
    "\005\u0133\001\001\000\012\023\u012f\024\024\025\036\026" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\023\u0132\024\024\025\036\026\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\023\u0135\024\024\025\036" +
    "\026\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\023\u0143\024\024" +
    "\025\036\026\030\001\001\000\012\023\u013b\024\024\025" +
    "\036\026\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\027\313\034\u0124\035\u0126" +
    "\040\u0149\047\273\050\314\051\271\052\270\054\306\055" +
    "\274\056\303\070\311\001\001\000\002\001\001\000\014" +
    "\023\122\024\024\025\036\026\030\030\u014b\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\023\u014e\024\024" +
    "\025\036\026\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\027\313\034\323\035\325" +
    "\042\u0152\047\273\050\314\051\271\052\270\054\306\055" +
    "\274\056\303\070\311\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\027\313\034\323\035\325\042\u0155\047" +
    "\273\050\314\051\271\052\270\054\306\055\274\056\303" +
    "\070\311\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u0158\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u015b\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\u0161\001\001\000\002\001\001\000\004" +
    "\060\u0160\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\027\313\034\277\035\304\037\300\041\u0163\047\273" +
    "\050\314\051\271\052\270\054\306\055\274\056\303\070" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\257\065\u0169\066\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\u016c\001\001\000\002\001\001\000" +
    "\034\027\313\034\277\035\304\037\300\041\u016e\047\273" +
    "\050\314\051\271\052\270\054\306\055\274\056\303\070" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\u0174\020\u0192\001" +
    "\001\000\006\004\u0174\020\u0191\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\u0174\020" +
    "\u0178\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\u0185\023\042\024\024\025\036\026\030\032\u0186\001" +
    "\001\000\016\006\u017c\023\042\024\024\025\036\026\030" +
    "\032\u017d\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\u0183\021\153\001\001\000\004\033\u0180\001\001" +
    "\000\002\001\001\000\004\006\u0182\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\u018c\021\153\001\001\000" +
    "\004\033\u0189\001\001\000\002\001\001\000\004\006\u018b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\u018f\021\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\u0174\020\u0195\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u0199\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\023\u019b\024\024" +
    "\025\036\026\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //fields
    Lexer lex;
    private List<String> syntaxErrors;
    private GenTypeTab genTypeTab;
    private AstGen astGen;
    private Analyzator analyzator;

    //conect the parser with the lexer
    public Parser(Lexer lex, Analyzator analyzator){
        super(lex);
        syntaxErrors = new LinkedList<>();
        genTypeTab = new GenTypeTab();
        astGen = new AstGen();
        this.analyzator = analyzator;
    }

    //getters
    public Lexer getLexer(){
        return this.lex;
    }
    public List<String> getSyntaxErrors(){
        return this.syntaxErrors;
    }
    
    /*SOBREESCRIBIR LOS METODOS DE ERROR*/
    public void syntax_error(Symbol cur_token) {
        StringBuilder mssBuilder = new StringBuilder("Simbolo: ");
        mssBuilder.append(symbl_name_from_id(cur_token.sym));
        
        if(cur_token.value != null){
            mssBuilder.append(", lexema <");
            mssBuilder.append(cur_token.value.toString());
            mssBuilder.append(">");
        }
        mssBuilder.append(", linea: ");
        mssBuilder.append(cur_token.left);
        mssBuilder.append(", columna: ");
        mssBuilder.append(cur_token.right);
        
        if (expected_token_ids().isEmpty()) {
            mssBuilder.append(" -- ya no se esperaba ningun simbolo");
        } else {
            mssBuilder.append(" -- Se esperaba [");
            for (Integer expected_token_id : expected_token_ids()) {
                if(!symbl_name_from_id(expected_token_id).equals("error")){
                    mssBuilder.append(symbl_name_from_id(expected_token_id));
                    mssBuilder.append(" ");
                }
                
            }
            mssBuilder.append("]");
        }
        syntaxErrors.add(mssBuilder.toString());
    }
    
    public void report_error(String message, Object info){
        try{
            Symbol cur_token = (Symbol) info;
            StringBuilder mssBuilder = new StringBuilder("Simbolo: ");
            mssBuilder.append(symbl_name_from_id(cur_token.sym));
            mssBuilder.append(", linea: ");
            mssBuilder.append(cur_token.left);
            mssBuilder.append(", columna: ");
            mssBuilder.append(cur_token.right);
            if(cur_token != null){
                mssBuilder.append(", Lexema: ");
                mssBuilder.append(cur_token.value);
            }

            if(message != null){
                mssBuilder.append(", Info: ");
                mssBuilder.append(message);
            }
            
            syntaxErrors.add(mssBuilder.toString());
        } catch (Exception e){
            syntaxErrors.add(message);
        }
    }


    public void unrecovered_syntax_error(Symbol cur_token) {
        syntaxErrors.add("Errores de sintaxis severos detectados, revisa municiosamente el codigo");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= header type_b const_b var_b functions_b procedure_b main 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<DefAst> lt = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<DefAst> lc = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<DefAst> lv = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<FunctionDec> lf = (List<FunctionDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ProcedureDec> lp = (List<ProcedureDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            analyzator.semanticAnalysis(lt, lc, lv, lf, lp, ls);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= PROGRAM ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= PROGRAM ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= error ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header ::= PROGRAM error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_type ::= INTEGER 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.IntegerPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_type ::= REAL 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.RealPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_type ::= LONGINT 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Label(
                            PrimitiveType.LongintPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_type ::= BOOLEAN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.BooleanPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_type ::= CHAR 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.CharPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_type ::= STRING 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.StringPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_type ::= ID 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            t, 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_type ::= error 
            {
              Label RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // id_list ::= id_list COMA ID 
            {
              List<Label> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(new Label(i, new Position(ileft, iright)));
                        } else {
                            l = new ArrayList<>();
                        }
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // id_list ::= ID 
            {
              List<Label> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        List<Label> list = new ArrayList<>();
                        list.add(new Label(i, new Position(ileft, iright)));
                        RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // range ::= expression DOT DOT DOT expression 
            {
              Range RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Range(e1, e2);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arr_range ::= CORCHETE_L expression DOT DOT expression CORCHETE_R 
            {
              Range RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                         RESULT = new Range(e1, e2);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr_range",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // list_access ::= list_access DOT ID 
            {
              List<Label> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(new Label(i, new Position(ileft, iright)));
                        } else {
                            l = new LinkedList<>();
                        }
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_access",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // list_access ::= ID 
            {
              List<Label> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        ArrayList<Label> access = new ArrayList<>();
                        access.add(new Label(i, new Position(ileft, iright)));
                        RESULT = access;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_access",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // record_b ::= def_record more_records 
            {
              List<DefAst> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DefAst d = (DefAst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(0, d);
                        } else {
                            l = new LinkedList<>();
                        }
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_b",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // def_record ::= ID COLON var_type SEMICOLON 
            {
              DefAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new SingleDef(new Label(i, new Position(ileft, iright)), t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_record",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // def_record ::= ID COLON PACKED ARRAY arr_range OF var_type SEMICOLON 
            {
              DefAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new ArrayDef(new Label(i, new Position(ileft, iright)), t, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_record",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // more_records ::= def_record more_records 
            {
              List<DefAst> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DefAst d = (DefAst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(0, d);
                        } else {
                            l = new LinkedList<>();
                        }
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_records",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // more_records ::= 
            {
              List<DefAst> RESULT =null;
		
                        RESULT = new LinkedList<DefAst>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_records",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression_list ::= expression_list COMA expression 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(e);
                        } else {
                            l = new LinkedList<>();
                        }
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression_list ::= expression 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        LinkedList<Expression> list = new LinkedList<Expression>();
                        list.add(e);
                        RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_b ::= TYPE list_typedec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l; 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_b",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_b ::= 
            {
              List<DefAst> RESULT =null;
		
                        RESULT = new ArrayList<DefAst>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_b",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // list_typedec ::= type_dec list_typedec 
            {
              List<DefAst> RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l1 = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l2 = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l1.addAll(l2);
                        RESULT = l1;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_typedec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // list_typedec ::= type_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_typedec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type_dec ::= id_list EQUALS var_type SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.userDef(l, t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type_dec ::= id_list EQUALS range SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.rangeDef(l, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_dec ::= id_list EQUALS ARRAY arr_range OF var_type SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.arrayDef(l, t, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_dec ::= id_list EQUALS RECORD record_b END SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Label> ids = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = genTypeTab.recordDef(ids, l);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_dec ::= id_list error var_type SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.userDef(l, t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_dec ::= id_list error range SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.rangeDef(l, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_dec ::= id_list error ARRAY arr_range OF var_type SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.arrayDef(l, t, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type_dec ::= id_list error RECORD record_b END SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Label> ids = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = genTypeTab.recordDef(ids, l);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // const_b ::= CONST list_constdec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_b",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // const_b ::= 
            {
              List<DefAst> RESULT =null;
		  RESULT = new LinkedList<DefAst>();   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_b",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // list_constdec ::= list_constdec const_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefAst d = (DefAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(d);
                        } else {
                            l = new LinkedList<>();
                        }  
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_constdec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // list_constdec ::= const_dec 
            {
              List<DefAst> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefAst d = (DefAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        LinkedList<DefAst> list = new LinkedList<>();
                        list.add(d);
                        RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_constdec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // const_dec ::= ID EQUALS expression SEMICOLON 
            {
              DefAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new ConstDef(
                            new Label(i, new Position(ileft, iright)),
                            e
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_dec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // const_dec ::= ID EQUALS expression error 
            {
              DefAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new ConstDef(
                            new Label(i, new Position(ileft, iright)),
                            e
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_dec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // var_b ::= VAR list_vardec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_b",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // var_b ::= 
            {
              List<DefAst> RESULT =null;
		
                        RESULT = new LinkedList<DefAst>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_b",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // list_vardec ::= list_vardec var_dec SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> dl = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        try{
                            l.addAll(dl);
                        } catch (NullPointerException e){}    
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // list_vardec ::= var_dec SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // list_vardec ::= list_vardec var_dec error var_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> dl = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        try{
                            l.addAll(dl);
                        } catch (NullPointerException e){}    
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // list_vardec ::= error var_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // list_vardec ::= var_dec error var_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // var_dec ::= id_list COLON var_type 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.userDef(l, t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // var_dec ::= id_list COLON range 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.rangeDef(l, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // var_dec ::= id_list COLON ARRAY arr_range OF var_type 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.arrayDef(l, t, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // var_dec ::= id_list EQUALS RECORD record_b END 
            {
              List<DefAst> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Label> ids = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.recordDef(ids, l);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // var_dec ::= id_list COLON RECORD record_b END 
            {
              List<DefAst> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Label> ids = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.recordDef(ids, l);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // var_dec ::= id_list error var_type 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.userDef(l, t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // var_dec ::= id_list error range 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.rangeDef(l, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // var_dec ::= id_list error ARRAY arr_range OF var_type 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.arrayDef(l, t, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // var_dec ::= id_list error RECORD record_b END 
            {
              List<DefAst> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Label> ids = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.recordDef(ids, l);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.And, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= expression AND THEN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.AndThen, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Or, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= expression OR ELSE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.OrElse, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= NOT expression 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Not,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= bool_exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bool_exp ::= arit_exp EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.EqualsTo, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // bool_exp ::= arit_exp DIFFERENT arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.DifferentTo, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // bool_exp ::= arit_exp GRATER arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.GraterThan, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // bool_exp ::= arit_exp LESS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.LessThan, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bool_exp ::= arit_exp GRATER_EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.GraterEq, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bool_exp ::= arit_exp LESS_EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.LessEq, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bool_exp ::= arit_exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // arit_exp ::= error PLUS error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // arit_exp ::= error MINUS error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // arit_exp ::= error TIMES error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // arit_exp ::= error DIV error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // arit_exp ::= error BARRA error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // arit_exp ::= error MOD error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // arit_exp ::= arit_exp PLUS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Addition, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // arit_exp ::= arit_exp MINUS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Substraction, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // arit_exp ::= arit_exp TIMES arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Multiplication, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arit_exp ::= arit_exp DIV arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.IntDivision, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // arit_exp ::= arit_exp BARRA arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Division, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // arit_exp ::= arit_exp MOD arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Module, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // arit_exp ::= literals 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // arit_exp ::= ID CORCHETE_L arit_exp CORCHETE_R 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new VectorUse(
                            i, e, new Position(ileft, iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // arit_exp ::= ID DOT list_access 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(0, new Label(i, new Position(ileft, iright)));
                        } else {
                            l = new LinkedList<>();
                        }
                        RESULT = new RecordUse(l);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // arit_exp ::= ID PARENTESIS_L expression_list PARENTESIS_R 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new FunctionUse(
                            i, l, new Position(ileft, iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // arit_exp ::= ID 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            i, new Position(ileft,iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // arit_exp ::= PARENTESIS_L expression PARENTESIS_R 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // arit_exp ::= PLUS arit_exp 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Addition,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // arit_exp ::= MINUS arit_exp 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Substraction,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // arit_exp ::= PARENTESIS_L error PARENTESIS_R 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // arit_exp ::= MINUS error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // arit_exp ::= PLUS error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // literals ::= BOOLEAN_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean l = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.BooleanPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // literals ::= INTEGER_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.IntegerPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // literals ::= REAL_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.RealPT, 
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // literals ::= CHAR_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character l = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.CharPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // literals ::= STRING_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.StringPT, 
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // conditional ::= if_stmt block_cond 
            {
              PassIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InitIf i = (InitIf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new PassIf(new IfAst(
                        i.getExpression(), 
                        ls, 
                        i.getPosition()
                    ));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // conditional ::= if_stmt block_cond SEMICOLON 
            {
              PassIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InitIf i = (InitIf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new PassIf(new IfAst(
                        i.getExpression(), 
                        ls,
                        i.getPosition()
                    ));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // conditional ::= if_stmt block_cond ELSE elif 
            {
              PassIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		InitIf i = (InitIf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PassIf pi = (PassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    if(pi.getElseAst() != null && pi.getElseAst().getInitPos() == null){
                        pi.getElseAst().setInitPos(
                            new Position(eleft, eright)
                        );
                    }
                    RESULT = astGen.genPassIf(
                        pi, 
                        new IfAst(i.getExpression(), ls, i.getPosition())
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // if_stmt ::= IF PARENTESIS_L expression PARENTESIS_R THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // if_stmt ::= IF PARENTESIS_L error PARENTESIS_R THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		  
                    RESULT = new InitIf(null, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // if_stmt ::= IF PARENTESIS_L expression error THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // if_stmt ::= IF error expression PARENTESIS_R THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // if_stmt ::= IF error expression error THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // block_cond ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_cond",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // block_cond ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_cond",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // block_cond ::= BEGIN block_stmt END 
            {
              List<Statement> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = ls;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_cond",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // elif ::= else_block SEMICOLON 
            {
              PassIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ElseAst e = (ElseAst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new PassIf(e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // elif ::= conditional 
            {
              PassIf RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PassIf pi = (PassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = pi;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // else_block ::= complex_else 
            {
              ElseAst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new ElseAst(astGen.oneStmtInList(s)); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // else_block ::= simple_stmt 
            {
              ElseAst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new ElseAst(astGen.oneStmtInList(s)); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // else_block ::= BEGIN block_stmt END 
            {
              ElseAst RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new ElseAst(ls);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // complex_else ::= case_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseAst s = (CaseAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // complex_else ::= while_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileAst s = (WhileAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // complex_else ::= for_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForAst s = (ForAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // complex_else ::= repeat_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RepeatAst s = (RepeatAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // case_stmt ::= CASE PARENTESIS_L expression PARENTESIS_R OF case_block ELSE case_else_stmts END SEMICOLON 
            {
              CaseAst RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int lscleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lscright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<SimpleCase> lsc = (List<SimpleCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = new CaseAst(e, lsc, new ElseAst(ls), new Position(cleft, cright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // case_block ::= case_block labels COLON case_stmts 
            {
              List<SimpleCase> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<SimpleCase> l = (List<SimpleCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int labsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int labsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> labs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(new SimpleCase(labs, ls));
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_block",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // case_block ::= labels COLON case_stmts 
            {
              List<SimpleCase> RESULT =null;
		int labsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int labsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> labs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.genSimpleCaseList(labs, ls);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_block",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // labels ::= labels COMA expression 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(e);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // labels ::= expression 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    LinkedList<Expression> list = new LinkedList<>();
                    list.add(e);
                    RESULT = list;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // case_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // case_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // case_stmts ::= BEGIN block_stmt END SEMICOLON 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // case_else_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // case_else_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // case_else_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // case_else_stmts ::= BEGIN block_stmt 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // while_stmt ::= WHILE PARENTESIS_L expression PARENTESIS_R DO statements 
            {
              WhileAst RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new WhileAst(e, l, new Position(wleft, wright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // while_stmt ::= WHILE PARENTESIS_L error PARENTESIS_R DO statements 
            {
              WhileAst RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new WhileAst(null, l, new Position(wleft, wright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // for_stmt ::= FOR ID ASSIGNATION expression TO expression DO statements 
            {
              ForAst RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Range range = new Range(e1, e2);
                    Label variable = new Label(i, new Position(ileft, iright));
                    RESULT = new ForAst(variable, range, l, new Position(fleft, fright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // for_stmt ::= FOR ID ASSIGNATION error TO expression DO statements 
            {
              ForAst RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Range range = new Range(null, e2);
                    Label variable = new Label(i, new Position(ileft, iright));
                    RESULT = new ForAst(variable, range, l, new Position(fleft, fright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // for_stmt ::= FOR ID error expression TO expression DO statements 
            {
              ForAst RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Range range = new Range(e1, e2);
                    Label variable = new Label(i, new Position(ileft, iright));
                    RESULT = new ForAst(variable, range, l, new Position(fleft, fright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // repeat_stmt ::= REPEAT statements UNTIL expression 
            {
              RepeatAst RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new RepeatAst(e, l, new Position(rleft, rright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // statements ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // statements ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // statements ::= BEGIN block_stmt END SEMICOLON 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // block_stmt ::= list_stmts 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // block_stmt ::= 
            {
              List<Statement> RESULT =null;
		
                    RESULT = new LinkedList<Statement>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // list_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // list_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // list_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // list_stmts ::= simple_stmt SEMICOLON more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // list_stmts ::= complex_stmt more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // more_stmts ::= simple_stmt error 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // more_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // more_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // more_stmts ::= simple_stmt SEMICOLON more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // more_stmts ::= complex_stmt more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // more_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // simple_stmt ::= BREAK 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new SimpleStmt(
                        SimpleStmt.BREAK, 
                        new Position(bleft, bright)
                    );  
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // simple_stmt ::= CONTINUE 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new SimpleStmt(
                        SimpleStmt.CONTINUE,
                        new Position(cleft, cright)
                    );  
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // simple_stmt ::= ID ASSIGNATION expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new Assignation(
                        new Label(i, new Position(ileft, iright)), e
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // simple_stmt ::= ID PARENTESIS_L expression_list PARENTESIS_R 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new FunctionUseStmt(
                        new Label(i, new Position(ileft, iright)),
                        el
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // simple_stmt ::= ID DOT list_access ASSIGNATION expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, new Label(i, new Position(ileft, iright)));
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = new RecAssignation(l, e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // simple_stmt ::= ID CORCHETE_L expression CORCHETE_R ASSIGNATION expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new ArrayAssign(
                        new Label(i, new Position(ileft, iright)),
                        e1,
                        e2
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // simple_stmt ::= definite_fun 
            {
              Statement RESULT =null;
		int fuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int furight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionUseStmt fu = (FunctionUseStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fu; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // simple_stmt ::= error 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // complex_stmt ::= conditional 
            {
              Statement RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PassIf pi = (PassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT =  astGen.transformPassIf(pi); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // complex_stmt ::= case_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseAst s = (CaseAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // complex_stmt ::= while_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileAst s = (WhileAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // complex_stmt ::= for_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForAst s = (ForAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // complex_stmt ::= repeat_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RepeatAst s = (RepeatAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // functions_b ::= functions 
            {
              List<FunctionDec> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<FunctionDec> l = (List<FunctionDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_b",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // functions_b ::= 
            {
              List<FunctionDec> RESULT =null;
		
                    RESULT = new LinkedList<FunctionDec>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_b",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // functions ::= functions function_dec 
            {
              List<FunctionDec> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<FunctionDec> l = (List<FunctionDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDec d = (FunctionDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(d);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // functions ::= function_dec 
            {
              List<FunctionDec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDec d = (FunctionDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    LinkedList<FunctionDec> list = new LinkedList<>();
                    list.add(d);
                    RESULT = list;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // function_dec ::= FUNCTION ID PARENTESIS_L arguments PARENTESIS_R COLON var_type SEMICOLON var_b BEGIN block_stmt END SEMICOLON 
            {
              FunctionDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		List<Argument> a = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<DefAst> lv = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new FunctionDec(
                        new Label(i, new Position(ileft, iright)),
                        t, a, lv, ls
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_dec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // procedure_b ::= procedures 
            {
              List<ProcedureDec> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ProcedureDec> p = (List<ProcedureDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = p;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_b",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // procedure_b ::= 
            {
              List<ProcedureDec> RESULT =null;
		  
                    RESULT = new LinkedList<ProcedureDec>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_b",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // procedures ::= procedures procedure_dec 
            {
              List<ProcedureDec> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ProcedureDec> l = (List<ProcedureDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcedureDec d = (ProcedureDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(d);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // procedures ::= procedure_dec 
            {
              List<ProcedureDec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcedureDec d = (ProcedureDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    LinkedList<ProcedureDec> list = new LinkedList<>();
                    list.add(d);
                    RESULT = list;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // procedure_dec ::= PROCEDURE ID PARENTESIS_L arguments PARENTESIS_R SEMICOLON var_b BEGIN block_stmt END SEMICOLON 
            {
              ProcedureDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<Argument> a = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<DefAst> lv = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = new ProcedureDec(
                        new Label(i, new Position(ileft, iright)),
                        a, lv, ls
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_dec",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // arguments ::= arguments COMA type_arg 
            {
              List<Argument> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Argument> l = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Argument> args = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    try{
                        l.addAll(args);
                    } catch (NullPointerException e){

                    }
                    
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // arguments ::= type_arg 
            {
              List<Argument> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Argument> args = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = args;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // arguments ::= 
            {
              List<Argument> RESULT =null;
		
                    RESULT = new LinkedList<Argument>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // type_arg ::= VAR id_list COLON var_type 
            {
              List<Argument> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.generateArgs(l, t, true);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arg",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // type_arg ::= id_list COLON var_type 
            {
              List<Argument> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.generateArgs(l, t, false);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arg",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // main ::= BEGIN block_stmt END DOT 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = l;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // main ::= BEGIN block_stmt END error 
            {
              List<Statement> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // definite_fun ::= writefn 
            {
              FunctionUseStmt RESULT =null;
		int fuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int furight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionUseStmt fu = (FunctionUseStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fu;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definite_fun",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // definite_fun ::= readfn 
            {
              FunctionUseStmt RESULT =null;
		int fuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int furight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionUseStmt fu = (FunctionUseStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fu;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definite_fun",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // writefn ::= WRITELN PARENTESIS_L expression_list PARENTESIS_R 
            {
              FunctionUseStmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new FunctionUseStmt(el, new Position(fleft, fright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writefn",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // readfn ::= READLN PARENTESIS_L expression_list PARENTESIS_R 
            {
              FunctionUseStmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new FunctionUseStmt(el, new Position(fleft, fright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readfn",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
