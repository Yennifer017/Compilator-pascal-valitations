
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compi2.pascal.valitations.analysis;

import java_cup.runtime.*;
import java.util.*;
import compi2.pascal.valitations.analysis.typet.*;
import compi2.pascal.valitations.analyzator.*;
import compi2.pascal.valitations.semantic.expr.*;
import compi2.pascal.valitations.semantic.obj.*;
import compi2.pascal.valitations.semantic.ast.*;
import compi2.pascal.valitations.semantic.module.*;
import compi2.pascal.valitations.util.Position;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\235\000\002\002\004\000\002\002\011\000\002\003" +
    "\005\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\004\005\000\002\004\003\000\002\032" +
    "\007\000\002\033\010\000\002\005\005\000\002\005\003" +
    "\000\002\013\004\000\002\021\006\000\002\021\012\000" +
    "\002\012\004\000\002\012\002\000\002\030\005\000\002" +
    "\030\003\000\002\007\004\000\002\007\002\000\002\010" +
    "\004\000\002\010\003\000\002\011\006\000\002\011\006" +
    "\000\002\011\011\000\002\011\010\000\002\014\004\000" +
    "\002\014\002\000\002\015\004\000\002\015\003\000\002" +
    "\022\006\000\002\017\004\000\002\017\002\000\002\016" +
    "\004\000\002\016\003\000\002\020\006\000\002\020\006" +
    "\000\002\020\011\000\002\020\010\000\002\020\010\000" +
    "\002\023\005\000\002\023\006\000\002\023\005\000\002" +
    "\023\006\000\002\023\004\000\002\023\003\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\003\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\003\000\002\025\006\000\002\025\005\000\002\025\006" +
    "\000\002\025\003\000\002\025\005\000\002\025\004\000" +
    "\002\025\004\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\070" +
    "\004\000\002\070\005\000\002\070\006\000\002\027\007" +
    "\000\002\043\003\000\002\043\003\000\002\043\005\000" +
    "\002\067\004\000\002\067\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\005\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\052\014" +
    "\000\002\071\007\000\002\071\006\000\002\031\005\000" +
    "\002\031\003\000\002\044\004\000\002\044\003\000\002" +
    "\044\006\000\002\045\003\000\002\045\004\000\002\045" +
    "\003\000\002\045\004\000\002\047\010\000\002\050\012" +
    "\000\002\051\006\000\002\042\004\000\002\042\003\000" +
    "\002\042\006\000\002\041\003\000\002\041\002\000\002" +
    "\037\003\000\002\037\004\000\002\037\003\000\002\037" +
    "\005\000\002\037\004\000\002\040\003\000\002\040\004" +
    "\000\002\040\005\000\002\040\004\000\002\040\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\005\000\002" +
    "\034\006\000\002\034\007\000\002\034\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\063\003\000\002\063\002\000" +
    "\002\064\004\000\002\064\003\000\002\057\017\000\002" +
    "\061\003\000\002\061\002\000\002\062\004\000\002\062" +
    "\003\000\002\060\015\000\002\065\005\000\002\065\003" +
    "\000\002\065\002\000\002\066\006\000\002\066\005\000" +
    "\002\046\006\000\002\054\003\000\002\054\003\000\002" +
    "\055\006\000\002\056\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014f\000\006\003\004\062\007\001\002\000\004\114" +
    "\u0151\001\002\000\004\002\u0150\001\002\000\016\034\uffe6" +
    "\036\uffe6\046\uffe6\061\uffe6\070\014\072\uffe6\001\002\000" +
    "\006\003\011\114\010\001\002\000\020\030\012\034\ufffe" +
    "\036\ufffe\046\ufffe\061\ufffe\070\ufffe\072\ufffe\001\002\000" +
    "\016\034\ufffc\036\ufffc\046\ufffc\061\ufffc\070\ufffc\072\ufffc" +
    "\001\002\000\016\034\uffff\036\uffff\046\uffff\061\uffff\070" +
    "\uffff\072\uffff\001\002\000\014\034\uffde\036\203\046\uffde" +
    "\061\uffde\072\uffde\001\002\000\004\114\015\001\002\000" +
    "\010\017\ufff3\026\ufff3\031\ufff3\001\002\000\016\034\uffe4" +
    "\036\uffe4\046\uffe4\061\uffe4\072\uffe4\114\015\001\002\000" +
    "\006\017\022\026\021\001\002\000\014\034\uffe7\036\uffe7" +
    "\046\uffe7\061\uffe7\072\uffe7\001\002\000\004\114\201\001" +
    "\002\000\046\004\026\005\045\012\040\033\051\055\031" +
    "\063\043\075\046\076\047\077\035\100\030\101\037\102" +
    "\052\103\033\104\025\114\032\115\050\116\044\117\023" +
    "\001\002\000\110\004\uffb6\005\uffb6\006\uffb6\007\uffb6\013" +
    "\uffb6\015\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6" +
    "\024\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\035" +
    "\uffb6\037\uffb6\040\uffb6\042\uffb6\043\uffb6\045\uffb6\050\uffb6" +
    "\053\uffb6\057\uffb6\064\uffb6\067\uffb6\071\uffb6\073\uffb6\105" +
    "\uffb6\106\uffb6\110\uffb6\111\uffb6\114\uffb6\001\002\000\060" +
    "\013\uffcc\015\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\035\uffcc\040\uffcc\042\uffcc\043\uffcc\045\uffcc\050\uffcc" +
    "\057\uffcc\064\uffcc\067\uffcc\071\uffcc\073\uffcc\105\uffcc\106" +
    "\uffcc\110\uffcc\111\uffcc\114\uffcc\001\002\000\110\004\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\013\uffb2\015\uffb2\017\uffb2\020" +
    "\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\026\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\032\uffb2\035\uffb2\037\uffb2\040\uffb2\042" +
    "\uffb2\043\uffb2\045\uffb2\050\uffb2\053\uffb2\057\uffb2\064\uffb2" +
    "\067\uffb2\071\uffb2\073\uffb2\105\uffb2\106\uffb2\110\uffb2\111" +
    "\uffb2\114\uffb2\001\002\000\024\004\026\005\045\012\040" +
    "\103\033\104\025\114\056\115\050\116\044\117\023\001" +
    "\002\000\110\004\uffbe\005\uffbe\006\uffbe\007\uffbe\013\uffbe" +
    "\015\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\035\uffbe" +
    "\037\uffbe\040\uffbe\042\uffbe\043\uffbe\045\uffbe\050\uffbe\053" +
    "\uffbe\057\uffbe\064\uffbe\067\uffbe\071\uffbe\073\uffbe\105\uffbe" +
    "\106\uffbe\110\uffbe\111\uffbe\114\uffbe\001\002\000\010\013" +
    "\ufff7\026\ufff7\030\ufff7\001\002\000\026\004\026\005\045" +
    "\012\040\055\031\103\033\104\025\114\056\115\050\116" +
    "\044\117\023\001\002\000\046\004\uffba\005\uffba\006\uffba" +
    "\007\uffba\012\057\014\061\017\uffba\020\uffba\021\uffba\022" +
    "\uffba\023\uffba\024\uffba\027\060\030\ufff5\032\uffba\037\uffba" +
    "\053\uffba\057\uffba\001\002\000\110\004\uffb4\005\uffb4\006" +
    "\uffb4\007\uffb4\013\uffb4\015\uffb4\017\uffb4\020\uffb4\021\uffb4" +
    "\022\uffb4\023\uffb4\024\uffb4\026\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\035\uffb4\037\uffb4\040\uffb4\042\uffb4\043\uffb4" +
    "\045\uffb4\050\uffb4\053\uffb4\057\uffb4\064\uffb4\067\uffb4\071" +
    "\uffb4\073\uffb4\105\uffb4\106\uffb4\110\uffb4\111\uffb4\114\uffb4" +
    "\001\002\000\004\030\176\001\002\000\010\013\ufff8\026" +
    "\ufff8\030\ufff8\001\002\000\110\004\065\005\067\006\071" +
    "\007\066\013\uffc5\015\uffc5\017\166\020\164\021\163\022" +
    "\165\023\162\024\167\026\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\035\uffc5\037\070\040\uffc5\042\uffc5\043\uffc5\045" +
    "\uffc5\050\uffc5\053\063\057\uffc5\064\uffc5\067\uffc5\071\uffc5" +
    "\073\uffc5\105\uffc5\106\uffc5\110\uffc5\111\uffc5\114\uffc5\001" +
    "\002\000\010\013\ufff6\026\ufff6\030\ufff6\001\002\000\026" +
    "\004\026\005\045\012\040\055\031\103\033\104\025\114" +
    "\056\115\050\116\044\117\023\001\002\000\004\030\157" +
    "\001\002\000\010\027\153\032\111\057\112\001\002\000" +
    "\004\114\132\001\002\000\110\004\uffb5\005\uffb5\006\uffb5" +
    "\007\uffb5\013\uffb5\015\uffb5\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\024\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\035\uffb5\037\uffb5\040\uffb5\042\uffb5\043\uffb5\045" +
    "\uffb5\050\uffb5\053\uffb5\057\uffb5\064\uffb5\067\uffb5\071\uffb5" +
    "\073\uffb5\105\uffb5\106\uffb5\110\uffb5\111\uffb5\114\uffb5\001" +
    "\002\000\024\004\026\005\045\012\040\103\033\104\025" +
    "\114\056\115\050\116\044\117\023\001\002\000\010\013" +
    "\ufffb\026\ufffb\030\ufffb\001\002\000\010\013\ufffa\026\ufffa" +
    "\030\ufffa\001\002\000\110\004\uffb3\005\uffb3\006\uffb3\007" +
    "\uffb3\013\uffb3\015\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032" +
    "\uffb3\035\uffb3\037\uffb3\040\uffb3\042\uffb3\043\uffb3\045\uffb3" +
    "\050\uffb3\053\uffb3\057\uffb3\064\uffb3\067\uffb3\071\uffb3\073" +
    "\uffb3\105\uffb3\106\uffb3\110\uffb3\111\uffb3\114\uffb3\001\002" +
    "\000\004\014\054\001\002\000\010\013\ufff9\026\ufff9\030" +
    "\ufff9\001\002\000\004\056\125\001\002\000\026\004\026" +
    "\005\045\012\040\055\031\103\033\104\025\114\056\115" +
    "\050\116\044\117\023\001\002\000\010\027\121\032\111" +
    "\057\112\001\002\000\114\004\uffba\005\uffba\006\uffba\007" +
    "\uffba\012\057\013\uffba\014\061\015\uffba\017\uffba\020\uffba" +
    "\021\uffba\022\uffba\023\uffba\024\uffba\026\uffba\027\060\030" +
    "\uffba\031\uffba\032\uffba\035\uffba\037\uffba\040\uffba\042\uffba" +
    "\043\uffba\045\uffba\050\uffba\053\uffba\057\uffba\064\uffba\067" +
    "\uffba\071\uffba\073\uffba\105\uffba\106\uffba\110\uffba\111\uffba" +
    "\114\uffba\001\002\000\026\004\026\005\045\012\040\055" +
    "\031\103\033\104\025\114\056\115\050\116\044\117\023" +
    "\001\002\000\004\114\100\001\002\000\024\004\026\005" +
    "\045\012\040\103\033\104\025\114\056\115\050\116\044" +
    "\117\023\001\002\000\020\004\065\005\067\006\071\007" +
    "\066\015\064\037\070\053\063\001\002\000\024\004\026" +
    "\005\045\012\040\103\033\104\025\114\056\115\050\116" +
    "\044\117\023\001\002\000\110\004\uffbd\005\uffbd\006\uffbd" +
    "\007\uffbd\013\uffbd\015\uffbd\017\uffbd\020\uffbd\021\uffbd\022" +
    "\uffbd\023\uffbd\024\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\035\uffbd\037\uffbd\040\uffbd\042\uffbd\043\uffbd\045" +
    "\uffbd\050\uffbd\053\uffbd\057\uffbd\064\uffbd\067\uffbd\071\uffbd" +
    "\073\uffbd\105\uffbd\106\uffbd\110\uffbd\111\uffbd\114\uffbd\001" +
    "\002\000\024\004\026\005\045\012\040\103\033\104\025" +
    "\114\056\115\050\116\044\117\023\001\002\000\024\004" +
    "\026\005\045\012\040\103\033\104\025\114\056\115\050" +
    "\116\044\117\023\001\002\000\024\004\026\005\045\012" +
    "\040\103\033\104\025\114\056\115\050\116\044\117\023" +
    "\001\002\000\024\004\026\005\045\012\040\103\033\104" +
    "\025\114\056\115\050\116\044\117\023\001\002\000\024" +
    "\004\026\005\045\012\040\103\033\104\025\114\056\115" +
    "\050\116\044\117\023\001\002\000\110\004\uffc2\005\uffc2" +
    "\006\uffc2\007\uffc2\013\uffc2\015\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\035\uffc2\037\uffc2\040\uffc2\042\uffc2\043" +
    "\uffc2\045\uffc2\050\uffc2\053\uffc2\057\uffc2\064\uffc2\067\uffc2" +
    "\071\uffc2\073\uffc2\105\uffc2\106\uffc2\110\uffc2\111\uffc2\114" +
    "\uffc2\001\002\000\110\004\uffc1\005\uffc1\006\uffc1\007\uffc1" +
    "\013\uffc1\015\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\035\uffc1\037\uffc1\040\uffc1\042\uffc1\043\uffc1\045\uffc1\050" +
    "\uffc1\053\uffc1\057\uffc1\064\uffc1\067\uffc1\071\uffc1\073\uffc1" +
    "\105\uffc1\106\uffc1\110\uffc1\111\uffc1\114\uffc1\001\002\000" +
    "\110\004\uffc3\005\uffc3\006\071\007\066\013\uffc3\015\uffc3" +
    "\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\026" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\035\uffc3\037\070" +
    "\040\uffc3\042\uffc3\043\uffc3\045\uffc3\050\uffc3\053\063\057" +
    "\uffc3\064\uffc3\067\uffc3\071\uffc3\073\uffc3\105\uffc3\106\uffc3" +
    "\110\uffc3\111\uffc3\114\uffc3\001\002\000\110\004\uffc0\005" +
    "\uffc0\006\uffc0\007\uffc0\013\uffc0\015\uffc0\017\uffc0\020\uffc0" +
    "\021\uffc0\022\uffc0\023\uffc0\024\uffc0\026\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\035\uffc0\037\uffc0\040\uffc0\042\uffc0" +
    "\043\uffc0\045\uffc0\050\uffc0\053\uffc0\057\uffc0\064\uffc0\067" +
    "\uffc0\071\uffc0\073\uffc0\105\uffc0\106\uffc0\110\uffc0\111\uffc0" +
    "\114\uffc0\001\002\000\110\004\uffc4\005\uffc4\006\071\007" +
    "\066\013\uffc4\015\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\035\uffc4\037\070\040\uffc4\042\uffc4\043\uffc4\045\uffc4" +
    "\050\uffc4\053\063\057\uffc4\064\uffc4\067\uffc4\071\uffc4\073" +
    "\uffc4\105\uffc4\106\uffc4\110\uffc4\111\uffc4\114\uffc4\001\002" +
    "\000\110\004\uffbf\005\uffbf\006\uffbf\007\uffbf\013\uffbf\015" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\035\uffbf\037" +
    "\uffbf\040\uffbf\042\uffbf\043\uffbf\045\uffbf\050\uffbf\053\uffbf" +
    "\057\uffbf\064\uffbf\067\uffbf\071\uffbf\073\uffbf\105\uffbf\106" +
    "\uffbf\110\uffbf\111\uffbf\114\uffbf\001\002\000\112\004\uffef" +
    "\005\uffef\006\uffef\007\uffef\013\uffef\015\uffef\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\035\uffef\037\uffef\040" +
    "\uffef\042\uffef\043\uffef\045\uffef\050\uffef\053\uffef\057\uffef" +
    "\064\uffef\067\uffef\071\uffef\073\uffef\105\uffef\106\uffef\110" +
    "\uffef\111\uffef\114\uffef\001\002\000\110\004\uffbc\005\uffbc" +
    "\006\uffbc\007\uffbc\013\uffbc\015\uffbc\017\uffbc\020\uffbc\021" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\026\uffbc\027\102\030\uffbc" +
    "\031\uffbc\032\uffbc\035\uffbc\037\uffbc\040\uffbc\042\uffbc\043" +
    "\uffbc\045\uffbc\050\uffbc\053\uffbc\057\uffbc\064\uffbc\067\uffbc" +
    "\071\uffbc\073\uffbc\105\uffbc\106\uffbc\110\uffbc\111\uffbc\114" +
    "\uffbc\001\002\000\004\114\103\001\002\000\112\004\ufff0" +
    "\005\ufff0\006\ufff0\007\ufff0\013\ufff0\015\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\031\ufff0\032\ufff0\035\ufff0\037\ufff0\040" +
    "\ufff0\042\ufff0\043\ufff0\045\ufff0\050\ufff0\053\ufff0\057\ufff0" +
    "\064\ufff0\067\ufff0\071\ufff0\073\ufff0\105\ufff0\106\ufff0\110" +
    "\ufff0\111\ufff0\114\ufff0\001\002\000\012\013\uffe8\026\uffe8" +
    "\032\111\057\112\001\002\000\006\013\106\026\107\001" +
    "\002\000\110\004\uffbb\005\uffbb\006\uffbb\007\uffbb\013\uffbb" +
    "\015\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\035\uffbb" +
    "\037\uffbb\040\uffbb\042\uffbb\043\uffbb\045\uffbb\050\uffbb\053" +
    "\uffbb\057\uffbb\064\uffbb\067\uffbb\071\uffbb\073\uffbb\105\uffbb" +
    "\106\uffbb\110\uffbb\111\uffbb\114\uffbb\001\002\000\026\004" +
    "\026\005\045\012\040\055\031\103\033\104\025\114\056" +
    "\115\050\116\044\117\023\001\002\000\012\013\uffe9\026" +
    "\uffe9\032\111\057\112\001\002\000\030\004\026\005\045" +
    "\012\040\055\031\066\116\103\033\104\025\114\056\115" +
    "\050\116\044\117\023\001\002\000\030\004\026\005\045" +
    "\012\040\042\113\055\031\103\033\104\025\114\056\115" +
    "\050\116\044\117\023\001\002\000\026\004\026\005\045" +
    "\012\040\055\031\103\033\104\025\114\056\115\050\116" +
    "\044\117\023\001\002\000\060\013\uffcf\015\uffcf\026\uffcf" +
    "\027\uffcf\030\uffcf\031\uffcf\032\111\035\uffcf\040\uffcf\042" +
    "\uffcf\043\uffcf\045\uffcf\050\uffcf\057\uffcf\064\uffcf\067\uffcf" +
    "\071\uffcf\073\uffcf\105\uffcf\106\uffcf\110\uffcf\111\uffcf\114" +
    "\uffcf\001\002\000\060\013\uffce\015\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\032\uffce\035\uffce\040\uffce\042\uffce\043" +
    "\uffce\045\uffce\050\uffce\057\uffce\064\uffce\067\uffce\071\uffce" +
    "\073\uffce\105\uffce\106\uffce\110\uffce\111\uffce\114\uffce\001" +
    "\002\000\026\004\026\005\045\012\040\055\031\103\033" +
    "\104\025\114\056\115\050\116\044\117\023\001\002\000" +
    "\060\013\uffd1\015\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\035\uffd1\040\uffd1\042\uffd1\043\uffd1\045\uffd1\050" +
    "\uffd1\057\uffd1\064\uffd1\067\uffd1\071\uffd1\073\uffd1\105\uffd1" +
    "\106\uffd1\110\uffd1\111\uffd1\114\uffd1\001\002\000\060\013" +
    "\uffd0\015\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\111" +
    "\035\uffd0\040\uffd0\042\uffd0\043\uffd0\045\uffd0\050\uffd0\057" +
    "\112\064\uffd0\067\uffd0\071\uffd0\073\uffd0\105\uffd0\106\uffd0" +
    "\110\uffd0\111\uffd0\114\uffd0\001\002\000\004\027\122\001" +
    "\002\000\026\004\026\005\045\012\040\055\031\103\033" +
    "\104\025\114\056\115\050\116\044\117\023\001\002\000" +
    "\010\015\124\032\111\057\112\001\002\000\004\056\ufff1" +
    "\001\002\000\020\075\046\076\047\077\035\100\030\101" +
    "\037\102\052\114\127\001\002\000\004\030\130\001\002" +
    "\000\010\013\ufff5\026\ufff5\030\ufff5\001\002\000\016\034" +
    "\uffe1\036\uffe1\046\uffe1\061\uffe1\072\uffe1\114\uffe1\001\002" +
    "\000\110\004\uffb7\005\uffb7\006\071\007\066\013\uffb7\015" +
    "\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\035\uffb7\037" +
    "\070\040\uffb7\042\uffb7\043\uffb7\045\uffb7\050\uffb7\053\063" +
    "\057\uffb7\064\uffb7\067\uffb7\071\uffb7\073\uffb7\105\uffb7\106" +
    "\uffb7\110\uffb7\111\uffb7\114\uffb7\001\002\000\004\031\142" +
    "\001\002\000\006\043\uffea\114\132\001\002\000\004\043" +
    "\135\001\002\000\004\030\136\001\002\000\016\034\uffe0" +
    "\036\uffe0\046\uffe0\061\uffe0\072\uffe0\114\uffe0\001\002\000" +
    "\006\043\uffea\114\132\001\002\000\004\043\uffee\001\002" +
    "\000\004\043\uffeb\001\002\000\022\060\143\075\046\076" +
    "\047\077\035\100\030\101\037\102\052\114\127\001\002" +
    "\000\004\033\146\001\002\000\004\030\145\001\002\000" +
    "\006\043\uffed\114\uffed\001\002\000\004\014\054\001\002" +
    "\000\004\056\150\001\002\000\020\075\046\076\047\077" +
    "\035\100\030\101\037\102\052\114\127\001\002\000\004" +
    "\030\152\001\002\000\006\043\uffec\114\uffec\001\002\000" +
    "\004\027\154\001\002\000\004\027\155\001\002\000\026" +
    "\004\026\005\045\012\040\055\031\103\033\104\025\114" +
    "\056\115\050\116\044\117\023\001\002\000\010\030\ufff2" +
    "\032\111\057\112\001\002\000\016\034\uffe2\036\uffe2\046" +
    "\uffe2\061\uffe2\072\uffe2\114\uffe2\001\002\000\010\013\161" +
    "\032\111\057\112\001\002\000\110\004\uffb9\005\uffb9\006" +
    "\uffb9\007\uffb9\013\uffb9\015\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\035\uffb9\037\uffb9\040\uffb9\042\uffb9\043\uffb9" +
    "\045\uffb9\050\uffb9\053\uffb9\057\uffb9\064\uffb9\067\uffb9\071" +
    "\uffb9\073\uffb9\105\uffb9\106\uffb9\110\uffb9\111\uffb9\114\uffb9" +
    "\001\002\000\024\004\026\005\045\012\040\103\033\104" +
    "\025\114\056\115\050\116\044\117\023\001\002\000\024" +
    "\004\026\005\045\012\040\103\033\104\025\114\056\115" +
    "\050\116\044\117\023\001\002\000\024\004\026\005\045" +
    "\012\040\103\033\104\025\114\056\115\050\116\044\117" +
    "\023\001\002\000\024\004\026\005\045\012\040\103\033" +
    "\104\025\114\056\115\050\116\044\117\023\001\002\000" +
    "\024\004\026\005\045\012\040\103\033\104\025\114\056" +
    "\115\050\116\044\117\023\001\002\000\024\004\026\005" +
    "\045\012\040\103\033\104\025\114\056\115\050\116\044" +
    "\117\023\001\002\000\074\004\065\005\067\006\071\007" +
    "\066\013\uffc6\015\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\035\uffc6\037\070\040\uffc6\042\uffc6\043\uffc6\045" +
    "\uffc6\050\uffc6\053\063\057\uffc6\064\uffc6\067\uffc6\071\uffc6" +
    "\073\uffc6\105\uffc6\106\uffc6\110\uffc6\111\uffc6\114\uffc6\001" +
    "\002\000\074\004\065\005\067\006\071\007\066\013\uffcb" +
    "\015\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\035" +
    "\uffcb\037\070\040\uffcb\042\uffcb\043\uffcb\045\uffcb\050\uffcb" +
    "\053\063\057\uffcb\064\uffcb\067\uffcb\071\uffcb\073\uffcb\105" +
    "\uffcb\106\uffcb\110\uffcb\111\uffcb\114\uffcb\001\002\000\074" +
    "\004\065\005\067\006\071\007\066\013\uffc8\015\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\035\uffc8\037\070" +
    "\040\uffc8\042\uffc8\043\uffc8\045\uffc8\050\uffc8\053\063\057" +
    "\uffc8\064\uffc8\067\uffc8\071\uffc8\073\uffc8\105\uffc8\106\uffc8" +
    "\110\uffc8\111\uffc8\114\uffc8\001\002\000\074\004\065\005" +
    "\067\006\071\007\066\013\uffca\015\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\032\uffca\035\uffca\037\070\040\uffca\042" +
    "\uffca\043\uffca\045\uffca\050\uffca\053\063\057\uffca\064\uffca" +
    "\067\uffca\071\uffca\073\uffca\105\uffca\106\uffca\110\uffca\111" +
    "\uffca\114\uffca\001\002\000\074\004\065\005\067\006\071" +
    "\007\066\013\uffc9\015\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\035\uffc9\037\070\040\uffc9\042\uffc9\043\uffc9" +
    "\045\uffc9\050\uffc9\053\063\057\uffc9\064\uffc9\067\uffc9\071" +
    "\uffc9\073\uffc9\105\uffc9\106\uffc9\110\uffc9\111\uffc9\114\uffc9" +
    "\001\002\000\074\004\065\005\067\006\071\007\066\013" +
    "\uffc7\015\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\035\uffc7\037\070\040\uffc7\042\uffc7\043\uffc7\045\uffc7\050" +
    "\uffc7\053\063\057\uffc7\064\uffc7\067\uffc7\071\uffc7\073\uffc7" +
    "\105\uffc7\106\uffc7\110\uffc7\111\uffc7\114\uffc7\001\002\000" +
    "\016\034\uffe3\036\uffe3\046\uffe3\061\uffe3\072\uffe3\114\uffe3" +
    "\001\002\000\060\013\uffcd\015\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\035\uffcd\040\uffcd\042\uffcd\043\uffcd" +
    "\045\uffcd\050\uffcd\057\uffcd\064\uffcd\067\uffcd\071\uffcd\073" +
    "\uffcd\105\uffcd\106\uffcd\110\uffcd\111\uffcd\114\uffcd\001\002" +
    "\000\110\004\uffb8\005\uffb8\006\uffb8\007\uffb8\013\uffb8\015" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\035\uffb8\037" +
    "\uffb8\040\uffb8\042\uffb8\043\uffb8\045\uffb8\050\uffb8\053\uffb8" +
    "\057\uffb8\064\uffb8\067\uffb8\071\uffb8\073\uffb8\105\uffb8\106" +
    "\uffb8\110\uffb8\111\uffb8\114\uffb8\001\002\000\010\017\ufff4" +
    "\026\ufff4\031\ufff4\001\002\000\014\034\uffe5\036\uffe5\046" +
    "\uffe5\061\uffe5\072\uffe5\001\002\000\004\114\u0149\001\002" +
    "\000\012\034\uffd9\046\uffd9\061\uffd9\072\205\001\002\000" +
    "\004\114\015\001\002\000\010\034\uff77\046\211\061\uff77" +
    "\001\002\000\010\034\uff75\046\uff75\061\uff75\001\002\000" +
    "\010\034\uff78\046\211\061\uff78\001\002\000\004\114\u0125" +
    "\001\002\000\006\034\uff72\061\213\001\002\000\004\114" +
    "\u0111\001\002\000\004\034\221\001\002\000\006\034\uff70" +
    "\061\uff70\001\002\000\006\034\uff73\061\213\001\002\000" +
    "\006\034\uff71\061\uff71\001\002\000\004\002\000\001\002" +
    "\000\030\035\241\043\uff8e\045\246\050\233\064\247\073" +
    "\227\105\230\106\250\110\237\111\224\114\234\001\002" +
    "\000\036\030\uff79\035\uff79\042\uff79\043\uff79\045\uff79\050" +
    "\uff79\064\uff79\071\uff79\073\uff79\105\uff79\106\uff79\110\uff79" +
    "\111\uff79\114\uff79\001\002\000\036\030\uff7c\035\uff7c\042" +
    "\uff7c\043\uff7c\045\uff7c\050\uff7c\064\uff7c\071\uff7c\073\uff7c" +
    "\105\uff7c\106\uff7c\110\uff7c\111\uff7c\114\uff7c\001\002\000" +
    "\036\030\uff82\035\uff82\042\uff82\043\uff82\045\uff82\050\uff82" +
    "\064\uff82\071\uff82\073\uff82\105\uff82\106\uff82\110\uff82\111" +
    "\uff82\114\uff82\001\002\000\036\030\uff7b\035\uff7b\042\uff7b" +
    "\043\uff7b\045\uff7b\050\uff7b\064\uff7b\071\uff7b\073\uff7b\105" +
    "\uff7b\106\uff7b\110\uff7b\111\uff7b\114\uff7b\001\002\000\036" +
    "\030\uff68\035\uff68\042\uff68\043\uff68\045\uff68\050\uff68\064" +
    "\uff68\071\uff68\073\uff68\105\uff68\106\uff68\110\uff68\111\uff68" +
    "\114\uff68\001\002\000\004\012\u010c\001\002\000\004\012" +
    "\u0109\001\002\000\006\030\u0107\043\uff8d\001\002\000\004" +
    "\043\uff8f\001\002\000\004\012\u0103\001\002\000\010\012" +
    "\372\025\373\027\374\001\002\000\036\030\uff67\035\uff67" +
    "\042\uff67\043\uff67\045\uff67\050\uff67\064\uff67\071\uff67\073" +
    "\uff67\105\uff67\106\uff67\110\uff67\111\uff67\114\uff67\001\002" +
    "\000\030\035\241\043\uff8b\045\246\050\233\064\247\073" +
    "\227\105\230\106\250\110\237\111\224\114\234\001\002" +
    "\000\036\030\uff83\035\uff83\042\uff83\043\uff83\045\uff83\050" +
    "\uff83\064\uff83\071\uff83\073\uff83\105\uff83\106\uff83\110\uff83" +
    "\111\uff83\114\uff83\001\002\000\036\030\uff7e\035\uff7e\042" +
    "\uff7e\043\uff7e\045\uff7e\050\uff7e\064\uff7e\071\uff7e\073\uff7e" +
    "\105\uff7e\106\uff7e\110\uff7e\111\uff7e\114\uff7e\001\002\000" +
    "\004\012\324\001\002\000\036\030\uff7d\035\uff7d\042\uff7d" +
    "\043\uff7d\045\uff7d\050\uff7d\064\uff7d\071\uff7d\073\uff7d\105" +
    "\uff7d\106\uff7d\110\uff7d\111\uff7d\114\uff7d\001\002\000\004" +
    "\043\322\001\002\000\030\034\277\035\241\045\246\050" +
    "\233\064\247\073\227\105\230\106\250\110\237\111\224" +
    "\114\234\001\002\000\036\030\uff7a\035\uff7a\042\uff7a\043" +
    "\uff7a\045\uff7a\050\uff7a\064\uff7a\071\uff7a\073\uff7a\105\uff7a" +
    "\106\uff7a\110\uff7a\111\uff7a\114\uff7a\001\002\000\004\114" +
    "\266\001\002\000\030\034\255\035\241\045\246\050\233" +
    "\064\247\073\227\105\230\106\250\110\237\111\224\114" +
    "\234\001\002\000\004\012\251\001\002\000\026\004\026" +
    "\005\045\012\040\055\031\103\033\104\025\114\056\115" +
    "\050\116\044\117\023\001\002\000\006\013\253\026\107" +
    "\001\002\000\036\030\uff65\035\uff65\042\uff65\043\uff65\045" +
    "\uff65\050\uff65\064\uff65\071\uff65\073\uff65\105\uff65\106\uff65" +
    "\110\uff65\111\uff65\114\uff65\001\002\000\004\030\265\001" +
    "\002\000\030\035\241\043\uff8e\045\246\050\233\064\247" +
    "\073\227\105\230\106\250\110\237\111\224\114\234\001" +
    "\002\000\036\030\uff91\035\uff91\042\uff91\043\uff91\045\uff91" +
    "\050\uff91\064\uff91\071\uff91\073\uff91\105\uff91\106\uff91\110" +
    "\uff91\111\uff91\114\uff91\001\002\000\004\071\260\001\002" +
    "\000\026\004\026\005\045\012\040\055\031\103\033\104" +
    "\025\114\056\115\050\116\044\117\023\001\002\000\042" +
    "\030\uff93\032\111\035\uff93\042\uff93\043\uff93\045\uff93\050" +
    "\uff93\057\112\064\uff93\071\uff93\073\uff93\105\uff93\106\uff93" +
    "\110\uff93\111\uff93\114\uff93\001\002\000\004\043\263\001" +
    "\002\000\004\030\264\001\002\000\036\030\uff90\035\uff90" +
    "\042\uff90\043\uff90\045\uff90\050\uff90\064\uff90\071\uff90\073" +
    "\uff90\105\uff90\106\uff90\110\uff90\111\uff90\114\uff90\001\002" +
    "\000\036\030\uff92\035\uff92\042\uff92\043\uff92\045\uff92\050" +
    "\uff92\064\uff92\071\uff92\073\uff92\105\uff92\106\uff92\110\uff92" +
    "\111\uff92\114\uff92\001\002\000\004\025\267\001\002\000" +
    "\026\004\026\005\045\012\040\055\031\103\033\104\025" +
    "\114\056\115\050\116\044\117\023\001\002\000\010\032" +
    "\111\057\112\067\271\001\002\000\026\004\026\005\045" +
    "\012\040\055\031\103\033\104\025\114\056\115\050\116" +
    "\044\117\023\001\002\000\010\032\111\040\273\057\112" +
    "\001\002\000\030\034\255\035\241\045\246\050\233\064" +
    "\247\073\227\105\230\106\250\110\237\111\224\114\234" +
    "\001\002\000\036\030\uff94\035\uff94\042\uff94\043\uff94\045" +
    "\uff94\050\uff94\064\uff94\071\uff94\073\uff94\105\uff94\106\uff94" +
    "\110\uff94\111\uff94\114\uff94\001\002\000\036\030\uffad\035" +
    "\uffad\042\uffad\043\uffad\045\uffad\050\uffad\064\uffad\071\uffad" +
    "\073\uffad\105\uffad\106\uffad\110\uffad\111\uffad\114\uffad\001" +
    "\002\000\036\030\303\035\uffb1\042\304\043\uffb1\045\uffb1" +
    "\050\uffb1\064\uffb1\071\uffb1\073\uffb1\105\uffb1\106\uffb1\110" +
    "\uffb1\111\uffb1\114\uffb1\001\002\000\030\035\241\043\uff8e" +
    "\045\246\050\233\064\247\073\227\105\230\106\250\110" +
    "\237\111\224\114\234\001\002\000\036\030\uffac\035\uffac" +
    "\042\uffac\043\uffac\045\uffac\050\uffac\064\uffac\071\uffac\073" +
    "\uffac\105\uffac\106\uffac\110\uffac\111\uffac\114\uffac\001\002" +
    "\000\004\043\302\001\002\000\036\030\uffab\035\uffab\042" +
    "\uffab\043\uffab\045\uffab\050\uffab\064\uffab\071\uffab\073\uffab" +
    "\105\uffab\106\uffab\110\uffab\111\uffab\114\uffab\001\002\000" +
    "\036\030\uffb0\035\uffb0\042\uffb0\043\uffb0\045\uffb0\050\uffb0" +
    "\064\uffb0\071\uffb0\073\uffb0\105\uffb0\106\uffb0\110\uffb0\111" +
    "\uffb0\114\uffb0\001\002\000\030\034\314\035\241\045\246" +
    "\050\233\064\247\073\227\105\230\106\250\110\237\111" +
    "\224\114\234\001\002\000\004\030\uffa5\001\002\000\004" +
    "\030\uffa2\001\002\000\004\030\uffa4\001\002\000\004\030" +
    "\321\001\002\000\004\030\uffa7\001\002\000\036\030\uffaf" +
    "\035\uffaf\042\uffaf\043\uffaf\045\uffaf\050\uffaf\064\uffaf\071" +
    "\uffaf\073\uffaf\105\uffaf\106\uffaf\110\uffaf\111\uffaf\114\uffaf" +
    "\001\002\000\004\030\uffa8\001\002\000\030\035\241\043" +
    "\uff8e\045\246\050\233\064\247\073\227\105\230\106\250" +
    "\110\237\111\224\114\234\001\002\000\036\030\uffa9\035" +
    "\uffa9\042\uffa9\043\uffa9\045\uffa9\050\uffa9\064\uffa9\071\uffa9" +
    "\073\uffa9\105\uffa9\106\uffa9\110\uffa9\111\uffa9\114\uffa9\001" +
    "\002\000\004\030\uffa3\001\002\000\004\043\320\001\002" +
    "\000\004\030\uffa6\001\002\000\036\030\uffaa\035\uffaa\042" +
    "\uffaa\043\uffaa\045\uffaa\050\uffaa\064\uffaa\071\uffaa\073\uffaa" +
    "\105\uffaa\106\uffaa\110\uffaa\111\uffaa\114\uffaa\001\002\000" +
    "\004\027\323\001\002\000\004\002\uff69\001\002\000\026" +
    "\004\026\005\045\012\040\055\031\103\033\104\025\114" +
    "\056\115\050\116\044\117\023\001\002\000\010\013\326" +
    "\032\111\057\112\001\002\000\004\056\327\001\002\000" +
    "\026\004\026\005\045\012\040\055\031\103\033\104\025" +
    "\114\056\115\050\116\044\117\023\001\002\000\030\004" +
    "\026\005\045\012\040\042\350\055\031\103\033\104\025" +
    "\114\056\115\050\116\044\117\023\001\002\000\006\026" +
    "\333\031\334\001\002\000\012\026\uff9d\031\uff9d\032\111" +
    "\057\112\001\002\000\026\004\026\005\045\012\040\055" +
    "\031\103\033\104\025\114\056\115\050\116\044\117\023" +
    "\001\002\000\030\034\337\035\241\045\246\050\233\064" +
    "\247\073\227\105\230\106\250\110\237\111\224\114\234" +
    "\001\002\000\004\030\345\001\002\000\004\030\344\001" +
    "\002\000\030\035\241\043\uff8e\045\246\050\233\064\247" +
    "\073\227\105\230\106\250\110\237\111\224\114\234\001" +
    "\002\000\004\030\uff9b\001\002\000\004\043\342\001\002" +
    "\000\004\030\343\001\002\000\004\030\uff9a\001\002\000" +
    "\004\030\uff9c\001\002\000\030\004\uff9f\005\uff9f\012\uff9f" +
    "\042\uff9f\055\uff9f\103\uff9f\104\uff9f\114\uff9f\115\uff9f\116" +
    "\uff9f\117\uff9f\001\002\000\012\026\uff9e\031\uff9e\032\111" +
    "\057\112\001\002\000\006\026\333\031\361\001\002\000" +
    "\030\034\352\035\241\045\246\050\233\064\247\073\227" +
    "\105\230\106\250\110\237\111\224\114\234\001\002\000" +
    "\006\030\360\043\uff99\001\002\000\030\035\241\043\uff8e" +
    "\045\246\050\233\064\247\073\227\105\230\106\250\110" +
    "\237\111\224\114\234\001\002\000\004\043\uff97\001\002" +
    "\000\004\043\355\001\002\000\004\030\356\001\002\000" +
    "\036\030\uffa1\035\uffa1\042\uffa1\043\uffa1\045\uffa1\050\uffa1" +
    "\064\uffa1\071\uffa1\073\uffa1\105\uffa1\106\uffa1\110\uffa1\111" +
    "\uffa1\114\uffa1\001\002\000\004\043\uff96\001\002\000\004" +
    "\043\uff98\001\002\000\030\034\337\035\241\045\246\050" +
    "\233\064\247\073\227\105\230\106\250\110\237\111\224" +
    "\114\234\001\002\000\004\030\363\001\002\000\030\004" +
    "\uffa0\005\uffa0\012\uffa0\042\uffa0\055\uffa0\103\uffa0\104\uffa0" +
    "\114\uffa0\115\uffa0\116\uffa0\117\uffa0\001\002\000\006\030" +
    "\370\043\uff88\001\002\000\030\035\241\043\uff84\045\246" +
    "\050\233\064\247\073\227\105\230\106\250\110\237\111" +
    "\224\114\234\001\002\000\004\043\uff89\001\002\000\004" +
    "\043\uff85\001\002\000\030\035\241\043\uff87\045\246\050" +
    "\233\064\247\073\227\105\230\106\250\110\237\111\224" +
    "\114\234\001\002\000\004\043\uff86\001\002\000\026\004" +
    "\026\005\045\012\040\055\031\103\033\104\025\114\056" +
    "\115\050\116\044\117\023\001\002\000\026\004\026\005" +
    "\045\012\040\055\031\103\033\104\025\114\056\115\050" +
    "\116\044\117\023\001\002\000\004\114\100\001\002\000" +
    "\006\025\376\027\102\001\002\000\026\004\026\005\045" +
    "\012\040\055\031\103\033\104\025\114\056\115\050\116" +
    "\044\117\023\001\002\000\042\030\uff7f\032\111\035\uff7f" +
    "\042\uff7f\043\uff7f\045\uff7f\050\uff7f\057\112\064\uff7f\071" +
    "\uff7f\073\uff7f\105\uff7f\106\uff7f\110\uff7f\111\uff7f\114\uff7f" +
    "\001\002\000\042\030\uff81\032\111\035\uff81\042\uff81\043" +
    "\uff81\045\uff81\050\uff81\057\112\064\uff81\071\uff81\073\uff81" +
    "\105\uff81\106\uff81\110\uff81\111\uff81\114\uff81\001\002\000" +
    "\006\013\u0102\026\107\001\002\000\036\030\uff80\035\uff80" +
    "\042\uff80\043\uff80\045\uff80\050\uff80\064\uff80\071\uff80\073" +
    "\uff80\105\uff80\106\uff80\110\uff80\111\uff80\114\uff80\001\002" +
    "\000\026\004\026\005\045\012\040\055\031\103\033\104" +
    "\025\114\056\115\050\116\044\117\023\001\002\000\010" +
    "\013\u0105\032\111\057\112\001\002\000\004\066\u0106\001" +
    "\002\000\030\034\uffae\035\uffae\045\uffae\050\uffae\064\uffae" +
    "\073\uffae\105\uffae\106\uffae\110\uffae\111\uffae\114\uffae\001" +
    "\002\000\030\035\241\043\uff8c\045\246\050\233\064\247" +
    "\073\227\105\230\106\250\110\237\111\224\114\234\001" +
    "\002\000\004\043\uff8a\001\002\000\026\004\026\005\045" +
    "\012\040\055\031\103\033\104\025\114\056\115\050\116" +
    "\044\117\023\001\002\000\006\013\u010b\026\107\001\002" +
    "\000\036\030\uff66\035\uff66\042\uff66\043\uff66\045\uff66\050" +
    "\uff66\064\uff66\071\uff66\073\uff66\105\uff66\106\uff66\110\uff66" +
    "\111\uff66\114\uff66\001\002\000\026\004\026\005\045\012" +
    "\040\055\031\103\033\104\025\114\056\115\050\116\044" +
    "\117\023\001\002\000\010\013\u010e\032\111\057\112\001" +
    "\002\000\004\040\u010f\001\002\000\030\034\255\035\241" +
    "\045\246\050\233\064\247\073\227\105\230\106\250\110" +
    "\237\111\224\114\234\001\002\000\036\030\uff95\035\uff95" +
    "\042\uff95\043\uff95\045\uff95\050\uff95\064\uff95\071\uff95\073" +
    "\uff95\105\uff95\106\uff95\110\uff95\111\uff95\114\uff95\001\002" +
    "\000\004\012\u0112\001\002\000\012\013\uff6c\026\uff6c\072" +
    "\u0113\114\015\001\002\000\004\114\015\001\002\000\006" +
    "\013\uff6d\026\uff6d\001\002\000\006\026\021\031\u0120\001" +
    "\002\000\006\013\u0117\026\u0118\001\002\000\004\030\u011a" +
    "\001\002\000\006\072\u0113\114\015\001\002\000\006\013" +
    "\uff6e\026\uff6e\001\002\000\006\034\uffd9\072\205\001\002" +
    "\000\004\034\u011c\001\002\000\030\035\241\043\uff8e\045" +
    "\246\050\233\064\247\073\227\105\230\106\250\110\237" +
    "\111\224\114\234\001\002\000\004\043\u011e\001\002\000" +
    "\004\030\u011f\001\002\000\006\034\uff6f\061\uff6f\001\002" +
    "\000\020\075\046\076\047\077\035\100\030\101\037\102" +
    "\052\114\127\001\002\000\006\013\uff6a\026\uff6a\001\002" +
    "\000\006\026\021\031\u0123\001\002\000\020\075\046\076" +
    "\047\077\035\100\030\101\037\102\052\114\127\001\002" +
    "\000\006\013\uff6b\026\uff6b\001\002\000\004\012\u0126\001" +
    "\002\000\012\013\uff6c\026\uff6c\072\u0113\114\015\001\002" +
    "\000\006\013\u0128\026\u0118\001\002\000\004\031\u0129\001" +
    "\002\000\020\075\046\076\047\077\035\100\030\101\037" +
    "\102\052\114\127\001\002\000\004\030\u012b\001\002\000" +
    "\006\034\uffd9\072\205\001\002\000\004\034\u012d\001\002" +
    "\000\030\035\241\043\uff8e\045\246\050\233\064\247\073" +
    "\227\105\230\106\250\110\237\111\224\114\234\001\002" +
    "\000\004\043\u012f\001\002\000\004\030\u0130\001\002\000" +
    "\010\034\uff74\046\uff74\061\uff74\001\002\000\010\034\uff76" +
    "\046\uff76\061\uff76\001\002\000\012\034\uffda\046\uffda\061" +
    "\uffda\114\015\001\002\000\010\017\u0135\026\021\031\u0136" +
    "\001\002\000\012\034\uffd7\046\uffd7\061\uffd7\114\uffd7\001" +
    "\002\000\004\063\u0144\001\002\000\046\004\026\005\045" +
    "\012\040\033\u013a\055\031\063\u0139\075\046\076\047\077" +
    "\035\100\030\101\037\102\052\103\033\104\025\114\032" +
    "\115\050\116\044\117\023\001\002\000\004\030\u0143\001" +
    "\002\000\004\030\u0142\001\002\000\004\114\132\001\002" +
    "\000\004\014\054\001\002\000\004\056\u013c\001\002\000" +
    "\020\075\046\076\047\077\035\100\030\101\037\102\052" +
    "\114\127\001\002\000\004\030\u013e\001\002\000\012\034" +
    "\uffd4\046\uffd4\061\uffd4\114\uffd4\001\002\000\004\043\u0140" +
    "\001\002\000\004\030\u0141\001\002\000\012\034\uffd2\046" +
    "\uffd2\061\uffd2\114\uffd2\001\002\000\012\034\uffd5\046\uffd5" +
    "\061\uffd5\114\uffd5\001\002\000\012\034\uffd6\046\uffd6\061" +
    "\uffd6\114\uffd6\001\002\000\004\114\132\001\002\000\004" +
    "\043\u0146\001\002\000\004\030\u0147\001\002\000\012\034" +
    "\uffd3\046\uffd3\061\uffd3\114\uffd3\001\002\000\012\034\uffd8" +
    "\046\uffd8\061\uffd8\114\uffd8\001\002\000\004\017\u014d\001" +
    "\002\000\014\034\uffdf\046\uffdf\061\uffdf\072\uffdf\114\u0149" +
    "\001\002\000\014\034\uffdc\046\uffdc\061\uffdc\072\uffdc\114" +
    "\uffdc\001\002\000\014\034\uffdd\046\uffdd\061\uffdd\072\uffdd" +
    "\114\uffdd\001\002\000\026\004\026\005\045\012\040\055" +
    "\031\103\033\104\025\114\056\115\050\116\044\117\023" +
    "\001\002\000\010\030\u014f\032\111\057\112\001\002\000" +
    "\014\034\uffdb\046\uffdb\061\uffdb\072\uffdb\114\uffdb\001\002" +
    "\000\004\002\001\001\002\000\016\034\ufffd\036\ufffd\046" +
    "\ufffd\061\ufffd\070\ufffd\072\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014f\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\203\001\001\000\010\004\016\010\017" +
    "\011\015\001\001\000\002\001\001\000\010\004\016\010" +
    "\201\011\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\033\023\041\024\023\025" +
    "\035\026\026\032\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\177\026\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\023\176" +
    "\024\023\025\035\026\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\023\157\024\023\025" +
    "\035\026\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\133\021\132\001\001\000\002\001\001\000" +
    "\006\025\130\026\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\023\054\024\023" +
    "\025\035\026\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\023\103\024\023\025\035\026\026\030\104" +
    "\001\001\000\004\005\100\001\001\000\006\025\061\026" +
    "\026\001\001\000\002\001\001\000\006\025\076\026\026" +
    "\001\001\000\002\001\001\000\006\025\075\026\026\001" +
    "\001\000\006\025\074\026\026\001\001\000\006\025\073" +
    "\026\026\001\001\000\006\025\072\026\026\001\001\000" +
    "\006\025\071\026\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\023\107\024\023" +
    "\025\035\026\026\001\001\000\002\001\001\000\012\023" +
    "\116\024\023\025\035\026\026\001\001\000\012\023\113" +
    "\024\023\025\035\026\026\001\001\000\012\023\114\024" +
    "\023\025\035\026\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\023\117\024\023\025\035\026\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\023\122\024\023\025\035\026\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\137\021\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\140\021\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\146" +
    "\001\001\000\002\001\001\000\004\006\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\023\155\024\023\025\035\026\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\174\026\026\001\001\000" +
    "\006\025\173\026\026\001\001\000\006\025\172\026\026" +
    "\001\001\000\006\025\171\026\026\001\001\000\006\025" +
    "\170\026\026\001\001\000\006\025\167\026\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\u0149\022\u014a\001\001" +
    "\000\004\017\205\001\001\000\010\004\u0132\016\u0131\020" +
    "\u0133\001\001\000\010\057\206\063\211\064\207\001\001" +
    "\000\002\001\001\000\004\057\u0130\001\001\000\002\001" +
    "\001\000\010\060\214\061\213\062\215\001\001\000\002" +
    "\001\001\000\004\046\217\001\001\000\002\001\001\000" +
    "\004\060\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\027\243\034\230\035\235\037\231\041\242\047" +
    "\224\050\244\051\221\052\222\054\237\055\225\056\234" +
    "\070\241\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\027\243\034\363\035\364\040\365\047\224\050" +
    "\244\051\221\052\222\054\237\055\225\056\234\070\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\027\243" +
    "\034\274\035\277\043\275\047\224\050\244\051\221\052" +
    "\222\054\237\055\225\056\234\070\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\027\243\034\253\035" +
    "\255\042\256\047\224\050\244\051\221\052\222\054\237" +
    "\055\225\056\234\070\241\001\001\000\002\001\001\000" +
    "\014\023\103\024\023\025\035\026\026\030\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\027\243\034\230\035\235\037\231\041\261\047\224" +
    "\050\244\051\221\052\222\054\237\055\225\056\234\070" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\023\260\024\023\025\035\026\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\023\267\024" +
    "\023\025\035\026\026\001\001\000\002\001\001\000\012" +
    "\023\271\024\023\025\035\026\026\001\001\000\002\001" +
    "\001\000\032\027\243\034\253\035\255\042\273\047\224" +
    "\050\244\051\221\052\222\054\237\055\225\056\234\070" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\027\243\034\230\035\235\037\231\041" +
    "\300\047\224\050\244\051\221\052\222\054\237\055\225" +
    "\056\234\070\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\027\243" +
    "\034\310\036\312\047\306\050\315\051\305\052\304\053" +
    "\307\054\237\055\225\056\234\067\311\070\314\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\027\243\034\230\035\235\037\231\041" +
    "\316\047\224\050\244\051\221\052\222\054\237\055\225" +
    "\056\234\070\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\023\324\024" +
    "\023\025\035\026\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\023\331\024\023\025\035\026\026\031" +
    "\330\071\327\001\001\000\014\023\331\024\023\025\035" +
    "\026\026\031\346\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\023\345\024\023\025\035\026\026\001\001" +
    "\000\032\027\243\034\335\035\337\044\334\047\224\050" +
    "\244\051\221\052\222\054\237\055\225\056\234\070\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\027" +
    "\243\034\230\035\235\037\231\041\340\047\224\050\244" +
    "\051\221\052\222\054\237\055\225\056\234\070\241\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\027\243\034\350" +
    "\035\352\045\353\047\224\050\244\051\221\052\222\054" +
    "\237\055\225\056\234\070\241\001\001\000\002\001\001" +
    "\000\034\027\243\034\230\035\235\037\231\041\356\047" +
    "\224\050\244\051\221\052\222\054\237\055\225\056\234" +
    "\070\241\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\027\243\034\335\035\337\044\361\047" +
    "\224\050\244\051\221\052\222\054\237\055\225\056\234" +
    "\070\241\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\027\243\034\363\035\364\040\366" +
    "\047\224\050\244\051\221\052\222\054\237\055\225\056" +
    "\234\070\241\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\027\243\034\363\035\364\040\370\047\224\050" +
    "\244\051\221\052\222\054\237\055\225\056\234\070\241" +
    "\001\001\000\002\001\001\000\014\023\103\024\023\025" +
    "\035\026\026\030\u0100\001\001\000\012\023\377\024\023" +
    "\025\035\026\026\001\001\000\004\005\374\001\001\000" +
    "\002\001\001\000\012\023\376\024\023\025\035\026\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\023\u0103\024\023\025\035" +
    "\026\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\027\243\034\363\035\364\040\u0107" +
    "\047\224\050\244\051\221\052\222\054\237\055\225\056" +
    "\234\070\241\001\001\000\002\001\001\000\014\023\103" +
    "\024\023\025\035\026\026\030\u0109\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\023\u010c\024\023\025\035" +
    "\026\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\027\243\034\253\035\255\042\u010f\047\224\050\244" +
    "\051\221\052\222\054\237\055\225\056\234\070\241\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\u0114" +
    "\065\u0115\066\u0113\001\001\000\004\004\u0121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\u0114\066\u0118\001\001\000\002\001" +
    "\001\000\004\017\u011a\001\001\000\002\001\001\000\034" +
    "\027\243\034\230\035\235\037\231\041\u011c\047\224\050" +
    "\244\051\221\052\222\054\237\055\225\056\234\070\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u0120\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u0123\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\u0114\065\u0126\066\u0113\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\u0129\001" +
    "\001\000\002\001\001\000\004\017\u012b\001\001\000\002" +
    "\001\001\000\034\027\243\034\230\035\235\037\231\041" +
    "\u012d\047\224\050\244\051\221\052\222\054\237\055\225" +
    "\056\234\070\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\u0132" +
    "\020\u0147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\u0136\023\041\024\023\025\035" +
    "\026\026\032\u0137\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\u013e\021\132\001\001\000\004\033\u013a" +
    "\001\001\000\002\001\001\000\004\006\u013c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\u0144\021\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\u014b\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\023\u014d\024\023\025\035\026" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //fields
    Lexer lex;
    private List<String> syntaxErrors;
    private GenTypeTab genTypeTab;
    private AstGen astGen;
    private Analyzator analyzator;

    //conect the parser with the lexer
    public Parser(Lexer lex, Analyzator analyzator){
        super(lex);
        syntaxErrors = new LinkedList<>();
        genTypeTab = new GenTypeTab();
        astGen = new AstGen();
        this.analyzator = analyzator;
    }

    //getters
    public Lexer getLexer(){
        return this.lex;
    }
    public List<String> getSyntaxErrors(){
        return this.syntaxErrors;
    }
    
    /*SOBREESCRIBIR LOS METODOS DE ERROR*/
    public void syntax_error(Symbol cur_token) {
        String mss = "Simbolo: " + symbl_name_from_id(cur_token.sym);
        if(cur_token.value != null){
            mss += ", lexema: <" + cur_token.value.toString() + ">";
        }
        mss += ", linea: " + cur_token.left
            + ", columna: " + cur_token.right;
        if (expected_token_ids().isEmpty()) {
            mss += " -- ya no se esperaba ningun simbolo";
        } else {
            mss += " -- Se esperaba ";
            for (Integer expected_token_id : expected_token_ids()) {
                mss += symbl_name_from_id(expected_token_id);
            }
        }
        syntaxErrors.add(mss);
    }
    public void unrecovered_syntax_error(Symbol cur_token) {
        syntaxErrors.add("Errores de sintaxis severos detectados, revisa municiosamente el codigo");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= header type_b const_b var_b functions_b procedure_b main 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<DefAst> lt = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<DefAst> lc = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<DefAst> lv = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<FunctionDec> lf = (List<FunctionDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ProcedureDec> lp = (List<ProcedureDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            analyzator.semanticAnalysis(lt, lc, lv, lf, lp, ls);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= PROGRAM ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= PROGRAM ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= error ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header ::= PROGRAM error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_type ::= INTEGER 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.IntegerPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_type ::= REAL 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.RealPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_type ::= LONGINT 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Label(
                            PrimitiveType.LongintPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_type ::= BOOLEAN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.BooleanPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_type ::= CHAR 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.CharPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_type ::= STRING 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.StringPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_type ::= ID 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            t, 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // id_list ::= id_list COMA ID 
            {
              List<Label> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(new Label(i, new Position(ileft, iright)));
                        } else {
                            l = new ArrayList<>();
                        }
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // id_list ::= ID 
            {
              List<Label> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        List<Label> list = new ArrayList<>();
                        list.add(new Label(i, new Position(ileft, iright)));
                        RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // range ::= expression DOT DOT DOT expression 
            {
              Range RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Range(e1, e2);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arr_range ::= CORCHETE_L expression DOT DOT expression CORCHETE_R 
            {
              Range RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                         RESULT = new Range(e1, e2);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr_range",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // list_access ::= list_access DOT ID 
            {
              List<Label> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(new Label(i, new Position(ileft, iright)));
                        } else {
                            l = new LinkedList<>();
                        }
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_access",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // list_access ::= ID 
            {
              List<Label> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        ArrayList<Label> access = new ArrayList<>();
                        access.add(new Label(i, new Position(ileft, iright)));
                        RESULT = access;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_access",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // record_b ::= def_record more_records 
            {
              List<DefAst> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DefAst d = (DefAst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(0, d);
                        } else {
                            l = new LinkedList<>();
                        }
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_b",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // def_record ::= ID COLON var_type SEMICOLON 
            {
              DefAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new SingleDef(new Label(i, new Position(ileft, iright)), t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_record",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // def_record ::= ID COLON PACKED ARRAY arr_range OF var_type SEMICOLON 
            {
              DefAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new ArrayDef(new Label(i, new Position(ileft, iright)), t, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_record",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // more_records ::= def_record more_records 
            {
              List<DefAst> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DefAst d = (DefAst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(0, d);
                        } else {
                            l = new LinkedList<>();
                        }
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_records",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // more_records ::= 
            {
              List<DefAst> RESULT =null;
		
                        RESULT = new LinkedList<DefAst>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_records",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression_list ::= expression_list COMA expression 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(e);
                        } else {
                            l = new LinkedList<>();
                        }
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression_list ::= expression 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        LinkedList<Expression> list = new LinkedList<Expression>();
                        list.add(e);
                        RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_b ::= TYPE list_typedec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l; 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_b",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_b ::= 
            {
              List<DefAst> RESULT =null;
		
                        RESULT = new ArrayList<DefAst>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_b",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // list_typedec ::= type_dec list_typedec 
            {
              List<DefAst> RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l1 = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l2 = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l1.addAll(l2);
                        RESULT = l1;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_typedec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // list_typedec ::= type_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_typedec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_dec ::= id_list EQUALS var_type SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.userDef(l, t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type_dec ::= id_list EQUALS range SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.rangeDef(l, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type_dec ::= id_list EQUALS ARRAY arr_range OF var_type SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.arrayDef(l, t, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_dec ::= id_list EQUALS RECORD record_b END SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Label> ids = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = genTypeTab.recordDef(ids, l);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // const_b ::= CONST list_constdec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_b",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // const_b ::= 
            {
              List<DefAst> RESULT =null;
		  RESULT = new LinkedList<DefAst>();   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_b",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // list_constdec ::= list_constdec const_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefAst d = (DefAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(d);
                        } else {
                            l = new LinkedList<>();
                        }  
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_constdec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // list_constdec ::= const_dec 
            {
              List<DefAst> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefAst d = (DefAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        LinkedList<DefAst> list = new LinkedList<>();
                        list.add(d);
                        RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_constdec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // const_dec ::= ID EQUALS expression SEMICOLON 
            {
              DefAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new ConstDef(
                            new Label(i, new Position(ileft, iright)),
                            e
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_dec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var_b ::= VAR list_vardec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_b",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var_b ::= 
            {
              List<DefAst> RESULT =null;
		
                        RESULT = new LinkedList<DefAst>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_b",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // list_vardec ::= list_vardec var_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> dl = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        try{
                            l.addAll(dl);
                        } catch (NullPointerException e){}    
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // list_vardec ::= var_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // var_dec ::= id_list COLON var_type SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.userDef(l, t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // var_dec ::= id_list COLON range SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.rangeDef(l, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // var_dec ::= id_list COLON ARRAY arr_range OF var_type SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.arrayDef(l, t, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // var_dec ::= id_list EQUALS RECORD record_b END SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Label> ids = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = genTypeTab.recordDef(ids, l);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // var_dec ::= id_list COLON RECORD record_b END SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Label> ids = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = genTypeTab.recordDef(ids, l);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.And, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression AND THEN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.AndThen, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Or, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression OR ELSE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.OrElse, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= NOT expression 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Not,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= bool_exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bool_exp ::= arit_exp EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.EqualsTo, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bool_exp ::= arit_exp DIFFERENT arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.DifferentTo, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bool_exp ::= arit_exp GRATER arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.GraterThan, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bool_exp ::= arit_exp LESS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.LessThan, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bool_exp ::= arit_exp GRATER_EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.GraterEq, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bool_exp ::= arit_exp LESS_EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.LessEq, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bool_exp ::= arit_exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arit_exp ::= arit_exp PLUS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Addition, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arit_exp ::= arit_exp MINUS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Substraction, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arit_exp ::= arit_exp TIMES arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Multiplication, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arit_exp ::= arit_exp DIV arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.IntDivision, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arit_exp ::= arit_exp BARRA arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Division, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arit_exp ::= arit_exp MOD arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Module, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arit_exp ::= literals 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arit_exp ::= ID CORCHETE_L arit_exp CORCHETE_R 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new VectorUse(
                            i, e, new Position(ileft, iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arit_exp ::= ID DOT list_access 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(0, new Label(i, new Position(ileft, iright)));
                        } else {
                            l = new LinkedList<>();
                        }
                        RESULT = new RecordUse(l);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arit_exp ::= ID PARENTESIS_L expression_list PARENTESIS_R 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new FunctionUse(
                            i, l, new Position(ileft, iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arit_exp ::= ID 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            i, new Position(ileft,iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // arit_exp ::= PARENTESIS_L expression PARENTESIS_R 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // arit_exp ::= PLUS arit_exp 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Addition,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // arit_exp ::= MINUS arit_exp 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Substraction,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // literals ::= BOOLEAN_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean l = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.BooleanPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // literals ::= INTEGER_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.IntegerPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // literals ::= REAL_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.RealPT, 
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literals ::= CHAR_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character l = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.CharPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // literals ::= STRING_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.StringPT, 
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // conditional ::= if_stmt block_cond 
            {
              PassIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new PassIf(new IfAst(e, ls));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // conditional ::= if_stmt block_cond SEMICOLON 
            {
              PassIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new PassIf(new IfAst(e, ls));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // conditional ::= if_stmt block_cond ELSE elif 
            {
              PassIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PassIf pi = (PassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		          
                    RESULT = astGen.genPassIf(
                        pi, 
                        new IfAst(e, ls)
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // if_stmt ::= IF PARENTESIS_L expression PARENTESIS_R THEN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = e;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // block_cond ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_cond",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // block_cond ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_cond",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // block_cond ::= BEGIN block_stmt END 
            {
              List<Statement> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = ls;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_cond",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // elif ::= else_block SEMICOLON 
            {
              PassIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ElseAst e = (ElseAst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new PassIf(e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // elif ::= conditional 
            {
              PassIf RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PassIf pi = (PassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = pi;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // else_block ::= complex_else 
            {
              ElseAst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new ElseAst(astGen.oneStmtInList(s)); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // else_block ::= simple_stmt 
            {
              ElseAst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new ElseAst(astGen.oneStmtInList(s)); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // else_block ::= BEGIN block_stmt END 
            {
              ElseAst RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new ElseAst(ls);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // complex_else ::= case_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseAst s = (CaseAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // complex_else ::= while_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileAst s = (WhileAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // complex_else ::= for_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForAst s = (ForAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // complex_else ::= repeat_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RepeatAst s = (RepeatAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // case_stmt ::= CASE PARENTESIS_L expression PARENTESIS_R OF case_block ELSE case_else_stmts END SEMICOLON 
            {
              CaseAst RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int lscleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lscright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<SimpleCase> lsc = (List<SimpleCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = new CaseAst(e, lsc, new ElseAst(ls));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // case_block ::= case_block labels COLON case_stmts SEMICOLON 
            {
              List<SimpleCase> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<SimpleCase> l = (List<SimpleCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int labsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int labsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Expression> labs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    if(l != null){
                        l.add(new SimpleCase(labs, ls));
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_block",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // case_block ::= labels COLON case_stmts SEMICOLON 
            {
              List<SimpleCase> RESULT =null;
		int labsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int labsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Expression> labs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.genSimpleCaseList(labs, ls);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_block",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // labels ::= labels COMA expression 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(e);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // labels ::= expression 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    LinkedList<Expression> list = new LinkedList<>();
                    list.add(e);
                    RESULT = list;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // case_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // case_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // case_stmts ::= BEGIN block_stmt END SEMICOLON 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // case_else_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // case_else_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // case_else_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // case_else_stmts ::= BEGIN block_stmt 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // while_stmt ::= WHILE PARENTESIS_L expression PARENTESIS_R DO statements 
            {
              WhileAst RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new WhileAst(e, l);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // for_stmt ::= FOR ID ASSIGNATION expression TO expression DO statements 
            {
              ForAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Range range = new Range(e1, e2);
                    Label variable = new Label(i, new Position(ileft, iright));
                    RESULT = new ForAst(variable, range, l);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // repeat_stmt ::= REPEAT statements UNTIL expression 
            {
              RepeatAst RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new RepeatAst(e, l);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // statements ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // statements ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // statements ::= BEGIN block_stmt END SEMICOLON 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // block_stmt ::= list_stmts 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // block_stmt ::= 
            {
              List<Statement> RESULT =null;
		
                    RESULT = new LinkedList<Statement>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // list_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // list_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // list_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // list_stmts ::= simple_stmt SEMICOLON more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // list_stmts ::= complex_stmt more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // more_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // more_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // more_stmts ::= simple_stmt SEMICOLON more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // more_stmts ::= complex_stmt more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // more_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // simple_stmt ::= BREAK 
            {
              Statement RESULT =null;
		  
                    RESULT = new SimpleStruct(SimpleStruct.BREAK);  
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // simple_stmt ::= CONTINUE 
            {
              Statement RESULT =null;
		  
                    RESULT = new SimpleStruct(SimpleStruct.CONTINUE);  
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // simple_stmt ::= ID ASSIGNATION expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new Assignation(
                        new Label(i, new Position(ileft, iright)), e
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // simple_stmt ::= ID PARENTESIS_L expression_list PARENTESIS_R 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new FunctionUseStmt(
                        new Label(i, new Position(ileft, iright)),
                        el
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // simple_stmt ::= ID DOT list_access ASSIGNATION expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, new Label(i, new Position(ileft, iright)));
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = new RecAssignation(l, e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // simple_stmt ::= definite_fun 
            {
              Statement RESULT =null;
		int fuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int furight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionUseStmt fu = (FunctionUseStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fu; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // complex_stmt ::= conditional 
            {
              Statement RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PassIf pi = (PassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT =  astGen.transformPassIf(pi); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // complex_stmt ::= case_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseAst s = (CaseAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // complex_stmt ::= while_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileAst s = (WhileAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // complex_stmt ::= for_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForAst s = (ForAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // complex_stmt ::= repeat_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RepeatAst s = (RepeatAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // functions_b ::= functions 
            {
              List<FunctionDec> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<FunctionDec> l = (List<FunctionDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_b",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // functions_b ::= 
            {
              List<FunctionDec> RESULT =null;
		
                    RESULT = new LinkedList<FunctionDec>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_b",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // functions ::= functions function_dec 
            {
              List<FunctionDec> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<FunctionDec> l = (List<FunctionDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDec d = (FunctionDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(d);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // functions ::= function_dec 
            {
              List<FunctionDec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDec d = (FunctionDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    LinkedList<FunctionDec> list = new LinkedList<>();
                    list.add(d);
                    RESULT = list;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // function_dec ::= FUNCTION ID PARENTESIS_L arguments PARENTESIS_R COLON var_type SEMICOLON var_b BEGIN block_stmt END SEMICOLON 
            {
              FunctionDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		List<Argument> a = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<DefAst> lv = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new FunctionDec(
                        new Label(i, new Position(ileft, iright)),
                        t, a, lv, ls
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_dec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // procedure_b ::= procedures 
            {
              List<ProcedureDec> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ProcedureDec> p = (List<ProcedureDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = p;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_b",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // procedure_b ::= 
            {
              List<ProcedureDec> RESULT =null;
		  
                    RESULT = new LinkedList<ProcedureDec>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_b",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // procedures ::= procedures procedure_dec 
            {
              List<ProcedureDec> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ProcedureDec> l = (List<ProcedureDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcedureDec d = (ProcedureDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(d);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // procedures ::= procedure_dec 
            {
              List<ProcedureDec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcedureDec d = (ProcedureDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    LinkedList<ProcedureDec> list = new LinkedList<>();
                    list.add(d);
                    RESULT = list;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // procedure_dec ::= PROCEDURE ID PARENTESIS_L arguments PARENTESIS_R SEMICOLON var_b BEGIN block_stmt END SEMICOLON 
            {
              ProcedureDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<Argument> a = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<DefAst> lv = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = new ProcedureDec(
                        new Label(i, new Position(ileft, iright)),
                        a, lv, ls
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_dec",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // arguments ::= arguments COMA type_arg 
            {
              List<Argument> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Argument> l = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Argument> args = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    try{
                        l.addAll(args);
                    } catch (NullPointerException e){

                    }
                    
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // arguments ::= type_arg 
            {
              List<Argument> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Argument> args = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = args;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // arguments ::= 
            {
              List<Argument> RESULT =null;
		
                    RESULT = new LinkedList<Argument>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // type_arg ::= VAR id_list COLON var_type 
            {
              List<Argument> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.generateArgs(l, t, true);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arg",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // type_arg ::= id_list COLON var_type 
            {
              List<Argument> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.generateArgs(l, t, false);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arg",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // main ::= BEGIN block_stmt END DOT 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = l;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // definite_fun ::= writefn 
            {
              FunctionUseStmt RESULT =null;
		int fuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int furight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionUseStmt fu = (FunctionUseStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fu;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definite_fun",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // definite_fun ::= readfn 
            {
              FunctionUseStmt RESULT =null;
		int fuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int furight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionUseStmt fu = (FunctionUseStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fu;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definite_fun",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // writefn ::= WRITELN PARENTESIS_L expression_list PARENTESIS_R 
            {
              FunctionUseStmt RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new FunctionUseStmt(el);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writefn",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // readfn ::= READLN PARENTESIS_L expression_list PARENTESIS_R 
            {
              FunctionUseStmt RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new FunctionUseStmt(el);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readfn",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
