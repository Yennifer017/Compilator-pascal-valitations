
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compi2.pascal.valitations.analysis;

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\212\000\002\002\004\000\002\002\011\000\002\003" +
    "\005\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\005\000\002\005\003\000\002\006\007\000\002" +
    "\007\010\000\002\010\006\000\002\010\012\000\002\011" +
    "\005\000\002\011\003\000\002\012\004\000\002\012\002" +
    "\000\002\013\006\000\002\013\006\000\002\013\011\000" +
    "\002\013\010\000\002\014\004\000\002\014\002\000\002" +
    "\015\007\000\002\016\004\000\002\016\002\000\002\066" +
    "\004\000\002\066\003\000\002\017\006\000\002\017\006" +
    "\000\002\017\011\000\002\017\010\000\002\020\005\000" +
    "\002\020\006\000\002\020\005\000\002\020\006\000\002" +
    "\020\005\000\002\020\003\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\003\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\003\000\002\022\006\000\002\022" +
    "\005\000\002\022\006\000\002\022\003\000\002\022\005" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\024\004\000\002" +
    "\025\007\000\002\030\004\000\002\030\004\000\002\030" +
    "\003\000\002\030\006\000\002\030\006\000\002\026\012" +
    "\000\002\026\011\000\002\026\003\000\002\031\004\000" +
    "\002\031\004\000\002\031\006\000\002\031\006\000\002" +
    "\027\004\000\002\027\002\000\002\032\004\000\002\032" +
    "\006\000\002\033\014\000\002\034\006\000\002\035\005" +
    "\000\002\035\003\000\002\036\005\000\002\036\006\000" +
    "\002\036\005\000\002\036\003\000\002\037\010\000\002" +
    "\040\012\000\002\041\007\000\002\042\003\000\002\042" +
    "\004\000\002\042\003\000\002\042\006\000\002\043\003" +
    "\000\002\043\002\000\002\061\003\000\002\061\004\000" +
    "\002\061\003\000\002\061\005\000\002\061\004\000\002" +
    "\062\003\000\002\062\004\000\002\062\005\000\002\062" +
    "\004\000\002\062\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\005\000\002\063\006\000\002\063\007\000" +
    "\002\063\003\000\002\064\003\000\002\064\003\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\045" +
    "\003\000\002\045\002\000\002\046\004\000\002\047\020" +
    "\000\002\050\003\000\002\050\002\000\002\051\004\000" +
    "\002\051\003\000\002\052\015\000\002\053\005\000\002" +
    "\053\003\000\002\053\002\000\002\054\006\000\002\054" +
    "\005\000\002\055\006\000\002\056\003\000\002\056\003" +
    "\000\002\057\006\000\002\060\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0143\000\004\062\006\001\002\000\004\002\u0145\001" +
    "\002\000\014\034\uffef\036\uffef\061\uffef\070\012\072\uffef" +
    "\001\002\000\004\102\007\001\002\000\004\030\010\001" +
    "\002\000\014\034\uffff\036\uffff\061\uffff\070\uffff\072\uffff" +
    "\001\002\000\012\034\uffe9\036\156\061\uffe9\072\uffe9\001" +
    "\002\000\004\102\013\001\002\000\012\013\ufff7\017\ufff7" +
    "\026\ufff7\031\ufff7\001\002\000\012\034\ufff0\036\ufff0\061" +
    "\ufff0\072\ufff0\001\002\000\006\017\017\026\016\001\002" +
    "\000\004\102\155\001\002\000\036\012\033\033\043\063" +
    "\036\075\040\076\041\077\030\100\023\101\032\102\025" +
    "\103\037\104\020\105\026\106\022\107\042\001\002\000" +
    "\110\004\uffc7\005\uffc7\006\uffc7\013\uffc7\015\uffc7\017\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\026\uffc7\027" +
    "\uffc7\030\uffc7\031\uffc7\032\uffc7\035\uffc7\037\uffc7\040\uffc7" +
    "\042\uffc7\043\uffc7\045\uffc7\050\uffc7\053\uffc7\055\uffc7\057" +
    "\uffc7\064\uffc7\067\uffc7\071\uffc7\073\uffc7\102\uffc7\110\uffc7" +
    "\111\uffc7\113\uffc7\114\uffc7\001\002\000\062\013\uffda\015" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\035\uffda" +
    "\040\uffda\042\uffda\043\uffda\045\uffda\050\uffda\055\uffda\057" +
    "\uffda\064\uffda\067\uffda\071\uffda\073\uffda\102\uffda\110\uffda" +
    "\111\uffda\113\uffda\114\uffda\001\002\000\110\004\uffc3\005" +
    "\uffc3\006\uffc3\013\uffc3\015\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\035\uffc3\037\uffc3\040\uffc3\042\uffc3\043\uffc3" +
    "\045\uffc3\050\uffc3\053\uffc3\055\uffc3\057\uffc3\064\uffc3\067" +
    "\uffc3\071\uffc3\073\uffc3\102\uffc3\110\uffc3\111\uffc3\113\uffc3" +
    "\114\uffc3\001\002\000\010\013\ufffb\026\ufffb\030\ufffb\001" +
    "\002\000\110\004\uffcd\005\uffcd\006\uffcd\013\uffcd\015\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\035\uffcd\037\uffcd" +
    "\040\uffcd\042\uffcd\043\uffcd\045\uffcd\050\uffcd\053\uffcd\055" +
    "\uffcd\057\uffcd\064\uffcd\067\uffcd\071\uffcd\073\uffcd\102\uffcd" +
    "\110\uffcd\111\uffcd\113\uffcd\114\uffcd\001\002\000\046\004" +
    "\uffc9\005\uffc9\006\uffc9\012\050\014\051\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\024\uffc9\027\uffc9\030\ufff9\032" +
    "\uffc9\037\uffc9\053\uffc9\055\uffc9\057\uffc9\001\002\000\110" +
    "\004\uffc5\005\uffc5\006\uffc5\013\uffc5\015\uffc5\017\uffc5\020" +
    "\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\035\uffc5\037\uffc5\040\uffc5\042" +
    "\uffc5\043\uffc5\045\uffc5\050\uffc5\053\uffc5\055\uffc5\057\uffc5" +
    "\064\uffc5\067\uffc5\071\uffc5\073\uffc5\102\uffc5\110\uffc5\111" +
    "\uffc5\113\uffc5\114\uffc5\001\002\000\004\030\154\001\002" +
    "\000\010\013\ufffc\026\ufffc\030\ufffc\001\002\000\110\004" +
    "\056\005\060\006\062\013\uffd3\015\uffd3\017\144\020\142" +
    "\021\141\022\143\023\140\024\145\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\035\uffd3\037\061\040\uffd3\042\uffd3" +
    "\043\uffd3\045\uffd3\050\uffd3\053\055\055\uffd3\057\uffd3\064" +
    "\uffd3\067\uffd3\071\uffd3\073\uffd3\102\uffd3\110\uffd3\111\uffd3" +
    "\113\uffd3\114\uffd3\001\002\000\010\013\ufffa\026\ufffa\030" +
    "\ufffa\001\002\000\020\012\033\102\047\103\037\104\020" +
    "\105\026\106\022\107\042\001\002\000\012\027\132\032" +
    "\072\055\073\057\074\001\002\000\004\030\131\001\002" +
    "\000\004\102\114\001\002\000\110\004\uffc6\005\uffc6\006" +
    "\uffc6\013\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\024\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\035\uffc6\037\uffc6\040\uffc6\042\uffc6\043\uffc6\045\uffc6" +
    "\050\uffc6\053\uffc6\055\uffc6\057\uffc6\064\uffc6\067\uffc6\071" +
    "\uffc6\073\uffc6\102\uffc6\110\uffc6\111\uffc6\113\uffc6\114\uffc6" +
    "\001\002\000\010\013\ufffe\026\ufffe\030\ufffe\001\002\000" +
    "\010\013\ufffd\026\ufffd\030\ufffd\001\002\000\110\004\uffc4" +
    "\005\uffc4\006\uffc4\013\uffc4\015\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\035\uffc4\037\uffc4\040\uffc4\042\uffc4\043" +
    "\uffc4\045\uffc4\050\uffc4\053\uffc4\055\uffc4\057\uffc4\064\uffc4" +
    "\067\uffc4\071\uffc4\073\uffc4\102\uffc4\110\uffc4\111\uffc4\113" +
    "\uffc4\114\uffc4\001\002\000\004\014\045\001\002\000\004" +
    "\056\110\001\002\000\020\012\033\102\047\103\037\104" +
    "\020\105\026\106\022\107\042\001\002\000\012\027\075" +
    "\032\072\055\073\057\074\001\002\000\114\004\uffc9\005" +
    "\uffc9\006\uffc9\012\050\013\uffc9\014\051\015\uffc9\017\uffc9" +
    "\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\035\uffc9\037\uffc9\040\uffc9" +
    "\042\uffc9\043\uffc9\045\uffc9\050\uffc9\053\uffc9\055\uffc9\057" +
    "\uffc9\064\uffc9\067\uffc9\071\uffc9\073\uffc9\102\uffc9\110\uffc9" +
    "\111\uffc9\113\uffc9\114\uffc9\001\002\000\004\102\013\001" +
    "\002\000\020\012\033\102\047\103\037\104\020\105\026" +
    "\106\022\107\042\001\002\000\004\102\053\001\002\000" +
    "\110\004\uffcb\005\uffcb\006\uffcb\013\uffcb\015\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\035\uffcb\037\uffcb\040\uffcb" +
    "\042\uffcb\043\uffcb\045\uffcb\050\uffcb\053\uffcb\055\uffcb\057" +
    "\uffcb\064\uffcb\067\uffcb\071\uffcb\073\uffcb\102\uffcb\110\uffcb" +
    "\111\uffcb\113\uffcb\114\uffcb\001\002\000\016\004\056\005" +
    "\060\006\062\015\057\037\061\053\055\001\002\000\020" +
    "\012\033\102\047\103\037\104\020\105\026\106\022\107" +
    "\042\001\002\000\020\012\033\102\047\103\037\104\020" +
    "\105\026\106\022\107\042\001\002\000\110\004\uffcc\005" +
    "\uffcc\006\uffcc\013\uffcc\015\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\035\uffcc\037\uffcc\040\uffcc\042\uffcc\043\uffcc" +
    "\045\uffcc\050\uffcc\053\uffcc\055\uffcc\057\uffcc\064\uffcc\067" +
    "\uffcc\071\uffcc\073\uffcc\102\uffcc\110\uffcc\111\uffcc\113\uffcc" +
    "\114\uffcc\001\002\000\020\012\033\102\047\103\037\104" +
    "\020\105\026\106\022\107\042\001\002\000\020\012\033" +
    "\102\047\103\037\104\020\105\026\106\022\107\042\001" +
    "\002\000\020\012\033\102\047\103\037\104\020\105\026" +
    "\106\022\107\042\001\002\000\110\004\uffd0\005\uffd0\006" +
    "\uffd0\013\uffd0\015\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\035\uffd0\037\uffd0\040\uffd0\042\uffd0\043\uffd0\045\uffd0" +
    "\050\uffd0\053\uffd0\055\uffd0\057\uffd0\064\uffd0\067\uffd0\071" +
    "\uffd0\073\uffd0\102\uffd0\110\uffd0\111\uffd0\113\uffd0\114\uffd0" +
    "\001\002\000\110\004\uffcf\005\uffcf\006\uffcf\013\uffcf\015" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\035\uffcf\037" +
    "\uffcf\040\uffcf\042\uffcf\043\uffcf\045\uffcf\050\uffcf\053\uffcf" +
    "\055\uffcf\057\uffcf\064\uffcf\067\uffcf\071\uffcf\073\uffcf\102" +
    "\uffcf\110\uffcf\111\uffcf\113\uffcf\114\uffcf\001\002\000\110" +
    "\004\uffd1\005\uffd1\006\062\013\uffd1\015\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\035\uffd1\037\061\040\uffd1\042" +
    "\uffd1\043\uffd1\045\uffd1\050\uffd1\053\055\055\uffd1\057\uffd1" +
    "\064\uffd1\067\uffd1\071\uffd1\073\uffd1\102\uffd1\110\uffd1\111" +
    "\uffd1\113\uffd1\114\uffd1\001\002\000\110\004\uffd2\005\uffd2" +
    "\006\062\013\uffd2\015\uffd2\017\uffd2\020\uffd2\021\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\035\uffd2\037\061\040\uffd2\042\uffd2\043\uffd2\045" +
    "\uffd2\050\uffd2\053\055\055\uffd2\057\uffd2\064\uffd2\067\uffd2" +
    "\071\uffd2\073\uffd2\102\uffd2\110\uffd2\111\uffd2\113\uffd2\114" +
    "\uffd2\001\002\000\110\004\uffce\005\uffce\006\uffce\013\uffce" +
    "\015\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\035\uffce" +
    "\037\uffce\040\uffce\042\uffce\043\uffce\045\uffce\050\uffce\053" +
    "\uffce\055\uffce\057\uffce\064\uffce\067\uffce\071\uffce\073\uffce" +
    "\102\uffce\110\uffce\111\uffce\113\uffce\114\uffce\001\002\000" +
    "\006\013\071\026\016\001\002\000\110\004\uffca\005\uffca" +
    "\006\uffca\013\uffca\015\uffca\017\uffca\020\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
    "\032\uffca\035\uffca\037\uffca\040\uffca\042\uffca\043\uffca\045" +
    "\uffca\050\uffca\053\uffca\055\uffca\057\uffca\064\uffca\067\uffca" +
    "\071\uffca\073\uffca\102\uffca\110\uffca\111\uffca\113\uffca\114" +
    "\uffca\001\002\000\022\012\033\066\105\102\047\103\037" +
    "\104\020\105\026\106\022\107\042\001\002\000\020\012" +
    "\033\102\047\103\037\104\020\105\026\106\022\107\042" +
    "\001\002\000\022\012\033\042\101\102\047\103\037\104" +
    "\020\105\026\106\022\107\042\001\002\000\004\027\076" +
    "\001\002\000\020\012\033\102\047\103\037\104\020\105" +
    "\026\106\022\107\042\001\002\000\012\015\100\032\072" +
    "\055\073\057\074\001\002\000\004\056\ufff5\001\002\000" +
    "\020\012\033\102\047\103\037\104\020\105\026\106\022" +
    "\107\042\001\002\000\062\013\uffdd\015\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\031\uffdd\032\072\035\uffdd\040\uffdd\042\uffdd" +
    "\043\uffdd\045\uffdd\050\uffdd\055\073\057\uffdd\064\uffdd\067" +
    "\uffdd\071\uffdd\073\uffdd\102\uffdd\110\uffdd\111\uffdd\113\uffdd" +
    "\114\uffdd\001\002\000\062\013\uffdc\015\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\072\035\uffdc\040\uffdc\042\uffdc" +
    "\043\uffdc\045\uffdc\050\uffdc\055\073\057\074\064\uffdc\067" +
    "\uffdc\071\uffdc\073\uffdc\102\uffdc\110\uffdc\111\uffdc\113\uffdc" +
    "\114\uffdc\001\002\000\062\013\uffdb\015\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\035\uffdb\040\uffdb\042\uffdb" +
    "\043\uffdb\045\uffdb\050\uffdb\055\uffdb\057\uffdb\064\uffdb\067" +
    "\uffdb\071\uffdb\073\uffdb\102\uffdb\110\uffdb\111\uffdb\113\uffdb" +
    "\114\uffdb\001\002\000\020\012\033\102\047\103\037\104" +
    "\020\105\026\106\022\107\042\001\002\000\062\013\uffdf" +
    "\015\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\035" +
    "\uffdf\040\uffdf\042\uffdf\043\uffdf\045\uffdf\050\uffdf\055\073" +
    "\057\uffdf\064\uffdf\067\uffdf\071\uffdf\073\uffdf\102\uffdf\110" +
    "\uffdf\111\uffdf\113\uffdf\114\uffdf\001\002\000\062\013\uffde" +
    "\015\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\072\035" +
    "\uffde\040\uffde\042\uffde\043\uffde\045\uffde\050\uffde\055\073" +
    "\057\074\064\uffde\067\uffde\071\uffde\073\uffde\102\uffde\110" +
    "\uffde\111\uffde\113\uffde\114\uffde\001\002\000\016\075\040" +
    "\076\041\077\030\100\023\101\032\102\112\001\002\000" +
    "\004\030\113\001\002\000\010\013\ufff9\026\ufff9\030\ufff9" +
    "\001\002\000\012\034\uffec\036\uffec\061\uffec\072\uffec\001" +
    "\002\000\004\031\120\001\002\000\004\043\116\001\002" +
    "\000\004\030\117\001\002\000\012\034\uffeb\036\uffeb\061" +
    "\uffeb\072\uffeb\001\002\000\020\060\122\075\040\076\041" +
    "\077\030\100\023\101\032\102\112\001\002\000\004\030" +
    "\130\001\002\000\004\033\123\001\002\000\004\014\045" +
    "\001\002\000\004\056\125\001\002\000\016\075\040\076" +
    "\041\077\030\100\023\101\032\102\112\001\002\000\004" +
    "\030\127\001\002\000\004\043\ufff3\001\002\000\004\043" +
    "\ufff4\001\002\000\012\034\uffed\036\uffed\061\uffed\072\uffed" +
    "\001\002\000\004\027\133\001\002\000\004\027\134\001" +
    "\002\000\020\012\033\102\047\103\037\104\020\105\026" +
    "\106\022\107\042\001\002\000\012\030\ufff6\032\072\055" +
    "\073\057\074\001\002\000\012\013\137\032\072\055\073" +
    "\057\074\001\002\000\110\004\uffc8\005\uffc8\006\uffc8\013" +
    "\uffc8\015\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\035" +
    "\uffc8\037\uffc8\040\uffc8\042\uffc8\043\uffc8\045\uffc8\050\uffc8" +
    "\053\uffc8\055\uffc8\057\uffc8\064\uffc8\067\uffc8\071\uffc8\073" +
    "\uffc8\102\uffc8\110\uffc8\111\uffc8\113\uffc8\114\uffc8\001\002" +
    "\000\020\012\033\102\047\103\037\104\020\105\026\106" +
    "\022\107\042\001\002\000\020\012\033\102\047\103\037" +
    "\104\020\105\026\106\022\107\042\001\002\000\020\012" +
    "\033\102\047\103\037\104\020\105\026\106\022\107\042" +
    "\001\002\000\020\012\033\102\047\103\037\104\020\105" +
    "\026\106\022\107\042\001\002\000\020\012\033\102\047" +
    "\103\037\104\020\105\026\106\022\107\042\001\002\000" +
    "\020\012\033\102\047\103\037\104\020\105\026\106\022" +
    "\107\042\001\002\000\074\004\056\005\060\006\062\013" +
    "\uffd4\015\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4" +
    "\035\uffd4\037\061\040\uffd4\042\uffd4\043\uffd4\045\uffd4\050" +
    "\uffd4\053\055\055\uffd4\057\uffd4\064\uffd4\067\uffd4\071\uffd4" +
    "\073\uffd4\102\uffd4\110\uffd4\111\uffd4\113\uffd4\114\uffd4\001" +
    "\002\000\074\004\056\005\060\006\062\013\uffd9\015\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\035\uffd9\037" +
    "\061\040\uffd9\042\uffd9\043\uffd9\045\uffd9\050\uffd9\053\055" +
    "\055\uffd9\057\uffd9\064\uffd9\067\uffd9\071\uffd9\073\uffd9\102" +
    "\uffd9\110\uffd9\111\uffd9\113\uffd9\114\uffd9\001\002\000\074" +
    "\004\056\005\060\006\062\013\uffd6\015\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\035\uffd6\037\061\040\uffd6" +
    "\042\uffd6\043\uffd6\045\uffd6\050\uffd6\053\055\055\uffd6\057" +
    "\uffd6\064\uffd6\067\uffd6\071\uffd6\073\uffd6\102\uffd6\110\uffd6" +
    "\111\uffd6\113\uffd6\114\uffd6\001\002\000\074\004\056\005" +
    "\060\006\062\013\uffd8\015\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\035\uffd8\037\061\040\uffd8\042\uffd8\043" +
    "\uffd8\045\uffd8\050\uffd8\053\055\055\uffd8\057\uffd8\064\uffd8" +
    "\067\uffd8\071\uffd8\073\uffd8\102\uffd8\110\uffd8\111\uffd8\113" +
    "\uffd8\114\uffd8\001\002\000\074\004\056\005\060\006\062" +
    "\013\uffd7\015\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\035\uffd7\037\061\040\uffd7\042\uffd7\043\uffd7\045\uffd7" +
    "\050\uffd7\053\055\055\uffd7\057\uffd7\064\uffd7\067\uffd7\071" +
    "\uffd7\073\uffd7\102\uffd7\110\uffd7\111\uffd7\113\uffd7\114\uffd7" +
    "\001\002\000\074\004\056\005\060\006\062\013\uffd5\015" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\035\uffd5" +
    "\037\061\040\uffd5\042\uffd5\043\uffd5\045\uffd5\050\uffd5\053" +
    "\055\055\uffd5\057\uffd5\064\uffd5\067\uffd5\071\uffd5\073\uffd5" +
    "\102\uffd5\110\uffd5\111\uffd5\113\uffd5\114\uffd5\001\002\000" +
    "\012\034\uffee\036\uffee\061\uffee\072\uffee\001\002\000\012" +
    "\013\ufff8\017\ufff8\026\ufff8\031\ufff8\001\002\000\002\001" +
    "\002\000\010\034\uffe6\061\uffe6\072\160\001\002\000\004" +
    "\102\013\001\002\000\006\034\uff89\061\uff89\001\002\000" +
    "\006\034\uff8a\061\uff8a\001\002\000\006\034\uff85\061\164" +
    "\001\002\000\004\102\u010b\001\002\000\004\034\172\001" +
    "\002\000\006\034\uff83\061\uff83\001\002\000\006\034\uff86" +
    "\061\164\001\002\000\006\034\uff84\061\uff84\001\002\000" +
    "\004\002\000\001\002\000\030\035\212\043\uffa0\045\217" +
    "\050\204\064\220\073\200\102\205\110\201\111\221\113" +
    "\210\114\176\001\002\000\032\035\uff8e\043\uff8e\045\uff8e" +
    "\050\uff8e\064\uff8e\071\uff8e\073\uff8e\102\uff8e\110\uff8e\111" +
    "\uff8e\113\uff8e\114\uff8e\001\002\000\032\035\uff8b\043\uff8b" +
    "\045\uff8b\050\uff8b\064\uff8b\071\uff8b\073\uff8b\102\uff8b\110" +
    "\uff8b\111\uff8b\113\uff8b\114\uff8b\001\002\000\032\035\uff8d" +
    "\043\uff8d\045\uff8d\050\uff8d\064\uff8d\071\uff8d\073\uff8d\102" +
    "\uff8d\110\uff8d\111\uff8d\113\uff8d\114\uff8d\001\002\000\036" +
    "\030\uff94\035\uff94\042\uff94\043\uff94\045\uff94\050\uff94\064" +
    "\uff94\071\uff94\073\uff94\102\uff94\110\uff94\111\uff94\113\uff94" +
    "\114\uff94\001\002\000\036\030\uff7b\035\uff7b\042\uff7b\043" +
    "\uff7b\045\uff7b\050\uff7b\064\uff7b\071\uff7b\073\uff7b\102\uff7b" +
    "\110\uff7b\111\uff7b\113\uff7b\114\uff7b\001\002\000\004\012" +
    "\u0106\001\002\000\004\012\u0103\001\002\000\006\030\u0101" +
    "\043\uff9f\001\002\000\004\043\uffa1\001\002\000\004\012" +
    "\375\001\002\000\010\012\365\025\364\027\366\001\002" +
    "\000\036\030\uff7a\035\uff7a\042\uff7a\043\uff7a\045\uff7a\050" +
    "\uff7a\064\uff7a\071\uff7a\073\uff7a\102\uff7a\110\uff7a\111\uff7a" +
    "\113\uff7a\114\uff7a\001\002\000\030\035\212\043\uff9d\045" +
    "\217\050\204\064\220\073\200\102\205\110\201\111\221" +
    "\113\210\114\176\001\002\000\036\030\uff95\035\uff95\042" +
    "\uff95\043\uff95\045\uff95\050\uff95\064\uff95\071\uff95\073\uff95" +
    "\102\uff95\110\uff95\111\uff95\113\uff95\114\uff95\001\002\000" +
    "\036\030\uff90\035\uff90\042\uff90\043\uff90\045\uff90\050\uff90" +
    "\064\uff90\071\uff90\073\uff90\102\uff90\110\uff90\111\uff90\113" +
    "\uff90\114\uff90\001\002\000\004\012\325\001\002\000\032" +
    "\035\uff8f\043\uff8f\045\uff8f\050\uff8f\064\uff8f\071\uff8f\073" +
    "\uff8f\102\uff8f\110\uff8f\111\uff8f\113\uff8f\114\uff8f\001\002" +
    "\000\004\043\323\001\002\000\030\034\253\035\212\045" +
    "\217\050\204\064\220\073\200\102\205\110\201\111\221" +
    "\113\210\114\176\001\002\000\032\035\uff8c\043\uff8c\045" +
    "\uff8c\050\uff8c\064\uff8c\071\uff8c\073\uff8c\102\uff8c\110\uff8c" +
    "\111\uff8c\113\uff8c\114\uff8c\001\002\000\004\102\243\001" +
    "\002\000\030\034\231\035\212\045\217\050\204\064\220" +
    "\073\200\102\205\110\201\111\221\113\210\114\176\001" +
    "\002\000\004\012\222\001\002\000\020\012\033\102\047" +
    "\103\037\104\020\105\026\106\022\107\042\001\002\000" +
    "\014\013\ufff1\026\ufff1\032\072\055\073\057\074\001\002" +
    "\000\006\013\225\026\226\001\002\000\036\030\uff78\035" +
    "\uff78\042\uff78\043\uff78\045\uff78\050\uff78\064\uff78\071\uff78" +
    "\073\uff78\102\uff78\110\uff78\111\uff78\113\uff78\114\uff78\001" +
    "\002\000\020\012\033\102\047\103\037\104\020\105\026" +
    "\106\022\107\042\001\002\000\014\013\ufff2\026\ufff2\032" +
    "\072\055\073\057\074\001\002\000\034\030\242\035\uffa5" +
    "\043\uffa5\045\uffa5\050\uffa5\064\uffa5\071\uffa5\073\uffa5\102" +
    "\uffa5\110\uffa5\111\uffa5\113\uffa5\114\uffa5\001\002\000\030" +
    "\035\212\043\uffa0\045\217\050\204\064\220\073\200\102" +
    "\205\110\201\111\221\113\210\114\176\001\002\000\032" +
    "\035\uffa3\043\uffa3\045\uffa3\050\uffa3\064\uffa3\071\uffa3\073" +
    "\uffa3\102\uffa3\110\uffa3\111\uffa3\113\uffa3\114\uffa3\001\002" +
    "\000\004\071\234\001\002\000\020\012\033\102\047\103" +
    "\037\104\020\105\026\106\022\107\042\001\002\000\012" +
    "\030\236\032\072\055\073\057\074\001\002\000\032\035" +
    "\uffa6\043\uffa6\045\uffa6\050\uffa6\064\uffa6\071\uffa6\073\uffa6" +
    "\102\uffa6\110\uffa6\111\uffa6\113\uffa6\114\uffa6\001\002\000" +
    "\004\043\240\001\002\000\004\030\241\001\002\000\032" +
    "\035\uffa2\043\uffa2\045\uffa2\050\uffa2\064\uffa2\071\uffa2\073" +
    "\uffa2\102\uffa2\110\uffa2\111\uffa2\113\uffa2\114\uffa2\001\002" +
    "\000\032\035\uffa4\043\uffa4\045\uffa4\050\uffa4\064\uffa4\071" +
    "\uffa4\073\uffa4\102\uffa4\110\uffa4\111\uffa4\113\uffa4\114\uffa4" +
    "\001\002\000\004\025\244\001\002\000\020\012\033\102" +
    "\047\103\037\104\020\105\026\106\022\107\042\001\002" +
    "\000\012\032\072\055\073\057\074\067\246\001\002\000" +
    "\020\012\033\102\047\103\037\104\020\105\026\106\022" +
    "\107\042\001\002\000\012\032\072\040\250\055\073\057" +
    "\074\001\002\000\030\034\231\035\212\045\217\050\204" +
    "\064\220\073\200\102\205\110\201\111\221\113\210\114" +
    "\176\001\002\000\032\035\uffa7\043\uffa7\045\uffa7\050\uffa7" +
    "\064\uffa7\071\uffa7\073\uffa7\102\uffa7\110\uffa7\111\uffa7\113" +
    "\uffa7\114\uffa7\001\002\000\036\030\321\035\uffb3\042\262" +
    "\043\uffb3\045\uffb3\050\uffb3\064\uffb3\071\uffb3\073\uffb3\102" +
    "\uffb3\110\uffb3\111\uffb3\113\uffb3\114\uffb3\001\002\000\030" +
    "\035\212\043\uffa0\045\217\050\204\064\220\073\200\102" +
    "\205\110\201\111\221\113\210\114\176\001\002\000\032" +
    "\035\uffc2\043\uffc2\045\uffc2\050\uffc2\064\uffc2\071\uffc2\073" +
    "\uffc2\102\uffc2\110\uffc2\111\uffc2\113\uffc2\114\uffc2\001\002" +
    "\000\032\035\uffbe\043\uffbe\045\uffbe\050\uffbe\064\uffbe\071" +
    "\uffbe\073\uffbe\102\uffbe\110\uffbe\111\uffbe\113\uffbe\114\uffbe" +
    "\001\002\000\004\043\257\001\002\000\036\030\261\035" +
    "\uffb3\042\262\043\uffb3\045\uffb3\050\uffb3\064\uffb3\071\uffb3" +
    "\073\uffb3\102\uffb3\110\uffb3\111\uffb3\113\uffb3\114\uffb3\001" +
    "\002\000\034\035\uffb9\042\uffb9\043\uffb9\045\uffb9\050\uffb9" +
    "\064\uffb9\071\uffb9\073\uffb9\102\uffb9\110\uffb9\111\uffb9\113" +
    "\uffb9\114\uffb9\001\002\000\032\035\uffbd\043\uffbd\045\uffbd" +
    "\050\uffbd\064\uffbd\071\uffbd\073\uffbd\102\uffbd\110\uffbd\111" +
    "\uffbd\113\uffbd\114\uffbd\001\002\000\020\034\304\050\313" +
    "\102\205\110\201\111\221\113\210\114\176\001\002\000" +
    "\034\035\uffbc\042\264\043\uffbc\045\uffbc\050\uffbc\064\uffbc" +
    "\071\uffbc\073\uffbc\102\uffbc\110\uffbc\111\uffbc\113\uffbc\114" +
    "\uffbc\001\002\000\004\050\265\001\002\000\004\012\266" +
    "\001\002\000\020\012\033\102\047\103\037\104\020\105" +
    "\026\106\022\107\042\001\002\000\012\013\270\032\072" +
    "\055\073\057\074\001\002\000\004\066\271\001\002\000" +
    "\016\034\274\102\205\110\201\111\221\113\210\114\176" +
    "\001\002\000\034\035\uffbb\042\uffbb\043\uffbb\045\uffbb\050" +
    "\uffbb\064\uffbb\071\uffbb\073\uffbb\102\uffbb\110\uffbb\111\uffbb" +
    "\113\uffbb\114\uffbb\001\002\000\036\030\312\035\uffb3\042" +
    "\301\043\uffb3\045\uffb3\050\uffb3\064\uffb3\071\uffb3\073\uffb3" +
    "\102\uffb3\110\uffb3\111\uffb3\113\uffb3\114\uffb3\001\002\000" +
    "\030\035\212\043\uffa0\045\217\050\204\064\220\073\200" +
    "\102\205\110\201\111\221\113\210\114\176\001\002\000" +
    "\004\043\276\001\002\000\036\030\300\035\uffb3\042\301" +
    "\043\uffb3\045\uffb3\050\uffb3\064\uffb3\071\uffb3\073\uffb3\102" +
    "\uffb3\110\uffb3\111\uffb3\113\uffb3\114\uffb3\001\002\000\034" +
    "\035\uffb5\042\uffb5\043\uffb5\045\uffb5\050\uffb5\064\uffb5\071" +
    "\uffb5\073\uffb5\102\uffb5\110\uffb5\111\uffb5\113\uffb5\114\uffb5" +
    "\001\002\000\034\035\uffb6\042\uffb6\043\uffb6\045\uffb6\050" +
    "\uffb6\064\uffb6\071\uffb6\073\uffb6\102\uffb6\110\uffb6\111\uffb6" +
    "\113\uffb6\114\uffb6\001\002\000\016\034\304\102\205\110" +
    "\201\111\221\113\210\114\176\001\002\000\034\035\uffb4" +
    "\042\uffb4\043\uffb4\045\uffb4\050\uffb4\064\uffb4\071\uffb4\073" +
    "\uffb4\102\uffb4\110\uffb4\111\uffb4\113\uffb4\114\uffb4\001\002" +
    "\000\004\030\310\001\002\000\030\035\212\043\uffa0\045" +
    "\217\050\204\064\220\073\200\102\205\110\201\111\221" +
    "\113\210\114\176\001\002\000\004\043\306\001\002\000" +
    "\004\030\307\001\002\000\034\035\uffb1\042\uffb1\043\uffb1" +
    "\045\uffb1\050\uffb1\064\uffb1\071\uffb1\073\uffb1\102\uffb1\110" +
    "\uffb1\111\uffb1\113\uffb1\114\uffb1\001\002\000\034\035\uffb2" +
    "\042\uffb2\043\uffb2\045\uffb2\050\uffb2\064\uffb2\071\uffb2\073" +
    "\uffb2\102\uffb2\110\uffb2\111\uffb2\113\uffb2\114\uffb2\001\002" +
    "\000\034\035\uffb8\042\uffb8\043\uffb8\045\uffb8\050\uffb8\064" +
    "\uffb8\071\uffb8\073\uffb8\102\uffb8\110\uffb8\111\uffb8\113\uffb8" +
    "\114\uffb8\001\002\000\034\035\uffb7\042\uffb7\043\uffb7\045" +
    "\uffb7\050\uffb7\064\uffb7\071\uffb7\073\uffb7\102\uffb7\110\uffb7" +
    "\111\uffb7\113\uffb7\114\uffb7\001\002\000\004\012\314\001" +
    "\002\000\020\012\033\102\047\103\037\104\020\105\026" +
    "\106\022\107\042\001\002\000\012\013\316\032\072\055" +
    "\073\057\074\001\002\000\004\066\317\001\002\000\016" +
    "\034\274\102\205\110\201\111\221\113\210\114\176\001" +
    "\002\000\034\035\uffba\042\uffba\043\uffba\045\uffba\050\uffba" +
    "\064\uffba\071\uffba\073\uffba\102\uffba\110\uffba\111\uffba\113" +
    "\uffba\114\uffba\001\002\000\032\035\uffbf\043\uffbf\045\uffbf" +
    "\050\uffbf\064\uffbf\071\uffbf\073\uffbf\102\uffbf\110\uffbf\111" +
    "\uffbf\113\uffbf\114\uffbf\001\002\000\034\035\uffc0\042\264" +
    "\043\uffc0\045\uffc0\050\uffc0\064\uffc0\071\uffc0\073\uffc0\102" +
    "\uffc0\110\uffc0\111\uffc0\113\uffc0\114\uffc0\001\002\000\004" +
    "\027\324\001\002\000\004\002\uff7c\001\002\000\020\012" +
    "\033\102\047\103\037\104\020\105\026\106\022\107\042" +
    "\001\002\000\012\013\327\032\072\055\073\057\074\001" +
    "\002\000\004\056\330\001\002\000\020\012\033\102\047" +
    "\103\037\104\020\105\026\106\022\107\042\001\002\000" +
    "\004\042\352\001\002\000\006\026\334\031\335\001\002" +
    "\000\014\026\uffad\031\uffad\032\072\055\073\057\074\001" +
    "\002\000\020\012\033\102\047\103\037\104\020\105\026" +
    "\106\022\107\042\001\002\000\010\102\336\110\201\111" +
    "\221\001\002\000\010\012\343\025\342\027\344\001\002" +
    "\000\006\030\uffa9\043\uffa9\001\002\000\004\030\341\001" +
    "\002\000\004\042\uffaf\001\002\000\020\012\033\102\047" +
    "\103\037\104\020\105\026\106\022\107\042\001\002\000" +
    "\020\012\033\102\047\103\037\104\020\105\026\106\022" +
    "\107\042\001\002\000\004\102\345\001\002\000\006\030" +
    "\uffaa\043\uffaa\001\002\000\006\013\347\026\226\001\002" +
    "\000\006\030\uffab\043\uffab\001\002\000\014\030\uffac\032" +
    "\072\043\uffac\055\073\057\074\001\002\000\014\026\uffae" +
    "\031\uffae\032\072\055\073\057\074\001\002\000\010\102" +
    "\336\110\201\111\221\001\002\000\004\043\354\001\002" +
    "\000\004\030\355\001\002\000\032\035\uffb0\043\uffb0\045" +
    "\uffb0\050\uffb0\064\uffb0\071\uffb0\073\uffb0\102\uffb0\110\uffb0" +
    "\111\uffb0\113\uffb0\114\uffb0\001\002\000\006\030\362\043" +
    "\uff9a\001\002\000\030\035\212\043\uff96\045\217\050\204" +
    "\064\220\073\200\102\205\110\201\111\221\113\210\114" +
    "\176\001\002\000\004\043\uff9b\001\002\000\004\043\uff97" +
    "\001\002\000\030\035\212\043\uff99\045\217\050\204\064" +
    "\220\073\200\102\205\110\201\111\221\113\210\114\176" +
    "\001\002\000\004\043\uff98\001\002\000\020\012\033\102" +
    "\047\103\037\104\020\105\026\106\022\107\042\001\002" +
    "\000\020\012\033\102\047\103\037\104\020\105\026\106" +
    "\022\107\042\001\002\000\004\102\367\001\002\000\004" +
    "\025\370\001\002\000\020\012\033\102\047\103\037\104" +
    "\020\105\026\106\022\107\042\001\002\000\044\030\uff91" +
    "\032\072\035\uff91\042\uff91\043\uff91\045\uff91\050\uff91\055" +
    "\073\057\074\064\uff91\071\uff91\073\uff91\102\uff91\110\uff91" +
    "\111\uff91\113\uff91\114\uff91\001\002\000\006\013\373\026" +
    "\226\001\002\000\036\030\uff92\035\uff92\042\uff92\043\uff92" +
    "\045\uff92\050\uff92\064\uff92\071\uff92\073\uff92\102\uff92\110" +
    "\uff92\111\uff92\113\uff92\114\uff92\001\002\000\044\030\uff93" +
    "\032\072\035\uff93\042\uff93\043\uff93\045\uff93\050\uff93\055" +
    "\073\057\074\064\uff93\071\uff93\073\uff93\102\uff93\110\uff93" +
    "\111\uff93\113\uff93\114\uff93\001\002\000\020\012\033\102" +
    "\047\103\037\104\020\105\026\106\022\107\042\001\002" +
    "\000\012\013\377\032\072\055\073\057\074\001\002\000" +
    "\004\066\u0100\001\002\000\030\034\uffc1\035\uffc1\045\uffc1" +
    "\050\uffc1\064\uffc1\073\uffc1\102\uffc1\110\uffc1\111\uffc1\113" +
    "\uffc1\114\uffc1\001\002\000\030\035\212\043\uff9e\045\217" +
    "\050\204\064\220\073\200\102\205\110\201\111\221\113" +
    "\210\114\176\001\002\000\004\043\uff9c\001\002\000\020" +
    "\012\033\102\047\103\037\104\020\105\026\106\022\107" +
    "\042\001\002\000\006\013\u0105\026\226\001\002\000\036" +
    "\030\uff79\035\uff79\042\uff79\043\uff79\045\uff79\050\uff79\064" +
    "\uff79\071\uff79\073\uff79\102\uff79\110\uff79\111\uff79\113\uff79" +
    "\114\uff79\001\002\000\020\012\033\102\047\103\037\104" +
    "\020\105\026\106\022\107\042\001\002\000\012\013\u0108" +
    "\032\072\055\073\057\074\001\002\000\004\040\u0109\001" +
    "\002\000\030\034\231\035\212\045\217\050\204\064\220" +
    "\073\200\102\205\110\201\111\221\113\210\114\176\001" +
    "\002\000\032\035\uffa8\043\uffa8\045\uffa8\050\uffa8\064\uffa8" +
    "\071\uffa8\073\uffa8\102\uffa8\110\uffa8\111\uffa8\113\uffa8\114" +
    "\uffa8\001\002\000\004\012\u010c\001\002\000\012\013\uff7f" +
    "\026\uff7f\072\u010d\102\013\001\002\000\004\102\013\001" +
    "\002\000\006\013\uff80\026\uff80\001\002\000\006\026\016" +
    "\031\u011a\001\002\000\006\013\u0111\026\u0112\001\002\000" +
    "\004\030\u0114\001\002\000\006\072\u010d\102\013\001\002" +
    "\000\006\013\uff81\026\uff81\001\002\000\006\034\uffe6\072" +
    "\160\001\002\000\004\034\u0116\001\002\000\030\035\212" +
    "\043\uffa0\045\217\050\204\064\220\073\200\102\205\110" +
    "\201\111\221\113\210\114\176\001\002\000\004\043\u0118" +
    "\001\002\000\004\030\u0119\001\002\000\006\034\uff82\061" +
    "\uff82\001\002\000\016\075\040\076\041\077\030\100\023" +
    "\101\032\102\112\001\002\000\006\013\uff7d\026\uff7d\001" +
    "\002\000\006\026\016\031\u011d\001\002\000\016\075\040" +
    "\076\041\077\030\100\023\101\032\102\112\001\002\000" +
    "\006\013\uff7e\026\uff7e\001\002\000\010\034\uff88\046\u0120" +
    "\061\uff88\001\002\000\004\102\u0121\001\002\000\004\012" +
    "\u0122\001\002\000\012\013\uff7f\026\uff7f\072\u010d\102\013" +
    "\001\002\000\006\013\u0124\026\u0112\001\002\000\004\031" +
    "\u0125\001\002\000\016\075\040\076\041\077\030\100\023" +
    "\101\032\102\112\001\002\000\004\030\u0127\001\002\000" +
    "\006\034\uffe6\072\160\001\002\000\004\034\u0129\001\002" +
    "\000\030\035\212\043\uffa0\045\217\050\204\064\220\073" +
    "\200\102\205\110\201\111\221\113\210\114\176\001\002" +
    "\000\004\043\u012b\001\002\000\004\030\u012c\001\002\000" +
    "\010\034\uff87\046\uff87\061\uff87\001\002\000\010\034\uffe7" +
    "\061\uffe7\102\013\001\002\000\010\017\u0130\026\016\031" +
    "\u0131\001\002\000\010\034\uffe4\061\uffe4\102\uffe4\001\002" +
    "\000\004\063\u013b\001\002\000\034\012\033\033\u0134\075" +
    "\040\076\041\077\030\100\023\101\032\102\025\103\037" +
    "\104\020\105\026\106\022\107\042\001\002\000\004\030" +
    "\u013a\001\002\000\004\030\u0139\001\002\000\004\014\045" +
    "\001\002\000\004\056\u0136\001\002\000\016\075\040\076" +
    "\041\077\030\100\023\101\032\102\112\001\002\000\004" +
    "\030\u0138\001\002\000\010\034\uffe1\061\uffe1\102\uffe1\001" +
    "\002\000\010\034\uffe2\061\uffe2\102\uffe2\001\002\000\010" +
    "\034\uffe3\061\uffe3\102\uffe3\001\002\000\004\102\114\001" +
    "\002\000\004\043\u013d\001\002\000\004\030\u013e\001\002" +
    "\000\010\034\uffe0\061\uffe0\102\uffe0\001\002\000\010\034" +
    "\uffe5\061\uffe5\102\uffe5\001\002\000\012\034\uffea\061\uffea" +
    "\072\uffea\102\u0141\001\002\000\004\017\u0142\001\002\000" +
    "\020\012\033\102\047\103\037\104\020\105\026\106\022" +
    "\107\042\001\002\000\012\030\u0144\032\072\055\073\057" +
    "\074\001\002\000\012\034\uffe8\061\uffe8\072\uffe8\102\uffe8" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0143\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\012\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\156\001\001\000" +
    "\006\005\014\013\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\026\006\034\020\033\021\020\022\030\023\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\135\021\020\022\030" +
    "\023\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\043\001" +
    "\001\000\002\001\001\000\012\020\045\021\020\022\030" +
    "\023\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\067\001\001\000\006\022\053\023\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\066\023\023\001\001\000\006\022\065\023\023" +
    "\001\001\000\002\001\001\000\006\022\064\023\023\001" +
    "\001\000\006\022\063\023\023\001\001\000\006\022\062" +
    "\023\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\020\105\021\020\022" +
    "\030\023\023\001\001\000\012\020\103\021\020\022\030" +
    "\023\023\001\001\000\012\020\101\021\020\022\030\023" +
    "\023\001\001\000\002\001\001\000\012\020\076\021\020" +
    "\022\030\023\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\102\021\020\022\030\023\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\020\106\021\020\022\030\023\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\123\001\001\000\002\001\001\000" +
    "\004\004\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\134\021\020\022\030\023\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\152\023\023\001\001\000\006\022\151" +
    "\023\023\001\001\000\006\022\150\023\023\001\001\000" +
    "\006\022\147\023\023\001\001\000\006\022\146\023\023" +
    "\001\001\000\006\022\145\023\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u013f\001\001\000\004\016\160" +
    "\001\001\000\010\005\u012d\017\u012e\066\u012c\001\001\000" +
    "\006\045\162\046\161\001\001\000\004\047\u011e\001\001" +
    "\000\010\050\164\051\166\052\165\001\001\000\002\001" +
    "\001\000\004\055\170\001\001\000\002\001\001\000\004" +
    "\052\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\024\212\025\214\033\172\037\174\040\215\041\173" +
    "\043\213\056\210\057\176\060\205\061\202\063\201\064" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\024\212\025\214\033\172\037\174\040\215\041\173" +
    "\056\210\057\176\060\205\062\357\063\355\064\356\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\024\212\025" +
    "\214\030\253\033\172\037\174\040\215\041\173\056\210" +
    "\057\176\060\205\063\251\064\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\024\212\025\214\033\172" +
    "\037\174\040\215\041\173\042\232\056\210\057\176\060" +
    "\205\063\227\064\231\001\001\000\002\001\001\000\014" +
    "\011\223\020\222\021\020\022\030\023\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\226\021\020\022\030\023\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\024\212\025\214\033\172" +
    "\037\174\040\215\041\173\043\236\056\210\057\176\060" +
    "\205\061\202\063\201\064\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\234\021\020\022\030\023" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\244\021\020\022\030" +
    "\023\023\001\001\000\002\001\001\000\012\020\246\021" +
    "\020\022\030\023\023\001\001\000\002\001\001\000\032" +
    "\024\212\025\214\033\172\037\174\040\215\041\173\042" +
    "\250\056\210\057\176\060\205\063\227\064\231\001\001" +
    "\000\002\001\001\000\006\026\321\027\257\001\001\000" +
    "\034\024\212\025\214\033\172\037\174\040\215\041\173" +
    "\043\255\056\210\057\176\060\205\061\202\063\201\064" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\262\027\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\032\301\056\210\057\176" +
    "\060\205\063\302\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\266\021\020\022\030" +
    "\023\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\031\271\056\210\057\176\060\205\063\272\001\001" +
    "\000\002\001\001\000\004\027\310\001\001\000\034\024" +
    "\212\025\214\033\172\037\174\040\215\041\173\043\274" +
    "\056\210\057\176\060\205\061\202\063\201\064\206\001" +
    "\001\000\002\001\001\000\004\027\276\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\032\301\056\210\057" +
    "\176\060\205\063\302\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\024\212\025\214\033\172\037\174\040" +
    "\215\041\173\043\304\056\210\057\176\060\205\061\202" +
    "\063\201\064\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\314\021" +
    "\020\022\030\023\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\031\317\056\210\057\176\060\205\063" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\325\021\020\022\030\023\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\020\332\021\020\022\030\023" +
    "\023\034\330\035\331\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\020\350\021\020\022" +
    "\030\023\023\001\001\000\012\036\337\056\336\057\176" +
    "\060\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\347\021\020" +
    "\022\030\023\023\001\001\000\014\011\345\020\222\021" +
    "\020\022\030\023\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\036\352\056\336\057\176" +
    "\060\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\024\212\025\214" +
    "\033\172\037\174\040\215\041\173\056\210\057\176\060" +
    "\205\062\360\063\355\064\356\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\024\212\025\214\033\172\037" +
    "\174\040\215\041\173\056\210\057\176\060\205\062\362" +
    "\063\355\064\356\001\001\000\002\001\001\000\012\020" +
    "\373\021\020\022\030\023\023\001\001\000\014\011\371" +
    "\020\222\021\020\022\030\023\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\370\021\020\022\030" +
    "\023\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\375\021\020" +
    "\022\030\023\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\024\212\025\214\033\172" +
    "\037\174\040\215\041\173\056\210\057\176\060\205\062" +
    "\u0101\063\355\064\356\001\001\000\002\001\001\000\014" +
    "\011\u0103\020\222\021\020\022\030\023\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\u0106\021\020" +
    "\022\030\023\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\024\212\025\214\033\172\037\174\040\215" +
    "\041\173\042\u0109\056\210\057\176\060\205\063\227\064" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\u010e\053\u010f\054\u010d\001\001\000\004\005\u011b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u010e\054\u0112\001\001\000" +
    "\002\001\001\000\004\016\u0114\001\001\000\002\001\001" +
    "\000\034\024\212\025\214\033\172\037\174\040\215\041" +
    "\173\043\u0116\056\210\057\176\060\205\061\202\063\201" +
    "\064\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\u011a\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\u011d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\u010e\053\u0122\054\u010d\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\u0125\001\001\000\002" +
    "\001\001\000\004\016\u0127\001\001\000\002\001\001\000" +
    "\034\024\212\025\214\033\172\037\174\040\215\041\173" +
    "\043\u0129\056\210\057\176\060\205\061\202\063\201\064" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\u012d\017\u013e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\004\u0131" +
    "\006\u0132\020\033\021\020\022\030\023\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\u0134\001\001" +
    "\000\002\001\001\000\004\004\u0136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\u013b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\u0142\021\020\022\030\023" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //fields
    Lexer lex;
    private List<String> syntaxErrors;

    //conect the parser with the lexer
    public Parser(Lexer lex){
        super(lex);
        syntaxErrors = new LinkedList<>();
    }

    //getters
    public Lexer getLexer(){
        return this.lex;
    }
    public List<String> getSyntaxErrors(){
        return this.syntaxErrors;
    }
    
    /*SOBREESCRIBIR LOS METODOS DE ERROR*/
    public void syntax_error(Symbol cur_token) {
        String mss = "Simbolo: " + symbl_name_from_id(cur_token.sym)
                    + ", linea: " + cur_token.left
                    + ", columna: " + cur_token.right;
        if (expected_token_ids().isEmpty()) {
            mss += " -- ya no se esperaba ningun simbolo";
        }
        syntaxErrors.add(mss);
    }
    public void unrecovered_syntax_error(Symbol cur_token) {
        syntaxErrors.add("Errores de sintaxis severos detectados, revisa municiosamente el codigo");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= header type_b const_b var_b functions_b procedure_b main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= PROGRAM ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // var_type ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var_type ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // var_type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_type ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_type ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // id_list ::= id_list COMA ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // id_list ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // range ::= expression DOT DOT DOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arr_range ::= CORCHETE_L expression DOT DOT expression CORCHETE_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr_range",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // record_b ::= ID COLON var_type SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_b",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // record_b ::= ID COLON PACKED ARRAY arr_range OF var_type SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_b",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression_list ::= expression_list COMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression_list ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type_b ::= TYPE type_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_b",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_b ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_b",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_dec ::= id_list EQUALS var_type SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_dec ::= id_list EQUALS range SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type_dec ::= id_list EQUALS ARRAY arr_range OF var_type SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_dec ::= id_list EQUALS RECORD record_b END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // const_b ::= CONST const_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_b",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // const_b ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_b",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // const_dec ::= const_dec ID EQUALS expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_b ::= VAR list_vardec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_b",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_b ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_b",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // list_vardec ::= list_vardec var_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // list_vardec ::= var_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_dec ::= id_list COLON var_type SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_dec ::= id_list COLON range SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var_dec ::= id_list COLON ARRAY arr_range OF var_type SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // var_dec ::= id_list EQUALS RECORD record_b END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression AND expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression AND THEN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression OR expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression OR ELSE expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= bool_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bool_exp ::= arit_exp EQUALS arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bool_exp ::= arit_exp DIFFERENT arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bool_exp ::= arit_exp GRATER arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bool_exp ::= arit_exp LESS arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bool_exp ::= arit_exp GRATER_EQUALS arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bool_exp ::= arit_exp LESS_EQUALS arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bool_exp ::= arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arit_exp ::= arit_exp PLUS arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arit_exp ::= arit_exp MINUS arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arit_exp ::= arit_exp TIMES arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arit_exp ::= arit_exp DIV arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arit_exp ::= arit_exp MOD arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arit_exp ::= literals 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arit_exp ::= ID CORCHETE_L arit_exp CORCHETE_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arit_exp ::= ID DOT ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arit_exp ::= ID PARENTESIS_L id_list PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arit_exp ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arit_exp ::= PARENTESIS_L expression PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // literals ::= BOOLEAN_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // literals ::= INTEGER_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // literals ::= REAL_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // literals ::= CHAR_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // literals ::= STRING_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // conditional ::= if_stmt pos_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // if_stmt ::= IF PARENTESIS_L expression PARENTESIS_R THEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // pos_if ::= simple_stmt elif_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_if",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // pos_if ::= simple_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_if",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // pos_if ::= complex_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_if",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // pos_if ::= BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_if",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // pos_if ::= BEGIN block_stmt END elif_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_if",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // elif_stmt ::= elif_stmt ELSE IF PARENTESIS_L expression PARENTESIS_R THEN pos_elif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // elif_stmt ::= ELSE IF PARENTESIS_L expression PARENTESIS_R THEN pos_elif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // elif_stmt ::= else_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // pos_elif ::= simple_stmt else_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_elif",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // pos_elif ::= simple_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_elif",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // pos_elif ::= BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_elif",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // pos_elif ::= BEGIN block_stmt END else_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_elif",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // else_stmt ::= ELSE statements_wc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // else_stmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // statements_wc ::= simple_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_wc",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // statements_wc ::= BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_wc",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // case_stmt ::= CASE PARENTESIS_L expression PARENTESIS_R OF case_block ELSE single_stm END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // case_block ::= labels COLON single_stm SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_block",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // labels ::= labels COMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // labels ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // single_stm ::= ID ASSIGNATION expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_stm",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // single_stm ::= ID PARENTESIS_L expression_list PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_stm",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // single_stm ::= ID DOT ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_stm",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // single_stm ::= definite_fun 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_stm",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // while_stmt ::= WHILE PARENTESIS_L expression PARENTESIS_R DO statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // for_stmt ::= FOR ID ASSIGNATION expression TO expression DO statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // repeat_stmt ::= REPEAT statements UNTIL expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // statements ::= simple_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // statements ::= simple_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // statements ::= complex_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // statements ::= BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // block_stmt ::= list_stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // block_stmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // list_stmts ::= simple_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // list_stmts ::= simple_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // list_stmts ::= complex_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // list_stmts ::= simple_stmt SEMICOLON more_stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // list_stmts ::= complex_stmt more_stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // more_stmts ::= simple_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // more_stmts ::= simple_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // more_stmts ::= simple_stmt SEMICOLON more_stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // more_stmts ::= complex_stmt more_stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // more_stmts ::= complex_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // simple_stmt ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // simple_stmt ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // simple_stmt ::= ID ASSIGNATION expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // simple_stmt ::= ID PARENTESIS_L expression_list PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // simple_stmt ::= ID DOT ID ASSIGNATION expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // simple_stmt ::= definite_fun 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // complex_stmt ::= conditional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // complex_stmt ::= case_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // complex_stmt ::= while_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // complex_stmt ::= for_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // complex_stmt ::= repeat_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // functions_b ::= functions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_b",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // functions_b ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_b",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // functions ::= functions function_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // function_dec ::= function_dec FUNCTION ID PARENTESIS_L arguments PARENTESIS_R COLON var_type SEMICOLON var_b BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_dec",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // procedure_b ::= procedures 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_b",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // procedure_b ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_b",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // procedures ::= procedures procedure_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // procedures ::= procedure_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // procedure_dec ::= PROCEDURE ID PARENTESIS_L arguments PARENTESIS_R SEMICOLON var_b BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_dec",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // arguments ::= arguments COMA type_arg 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // arguments ::= type_arg 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // arguments ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // type_arg ::= VAR id_list COLON var_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arg",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // type_arg ::= id_list COLON var_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arg",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // main ::= BEGIN block_stmt END DOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // definite_fun ::= writefn 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definite_fun",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // definite_fun ::= readfn 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definite_fun",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // writefn ::= WRITELN PARENTESIS_L expression_list PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writefn",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // readfn ::= READLN PARENTESIS_L expression_list PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readfn",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
