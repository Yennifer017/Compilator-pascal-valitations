
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compi2.pascal.valitations.analysis;

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.*;
import java.util.*;
import compi2.pascal.valitations.analysis.typet.*;
import compi2.pascal.valitations.analyzator.GenTypeTab;
import compi2.pascal.valitations.semantic.expr.*;
import compi2.pascal.valitations.semantic.obj.*;
import compi2.pascal.valitations.util.Position;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\227\000\002\002\004\000\002\002\011\000\002\003" +
    "\005\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\054\005\000\002\054\003\000\002" +
    "\072\007\000\002\073\010\000\002\063\004\000\002\064" +
    "\006\000\002\064\012\000\002\062\004\000\002\062\002" +
    "\000\002\071\005\000\002\071\003\000\002\057\004\000" +
    "\002\057\002\000\002\060\004\000\002\060\003\000\002" +
    "\061\006\000\002\061\006\000\002\061\011\000\002\061" +
    "\010\000\002\004\004\000\002\004\002\000\002\053\004" +
    "\000\002\053\003\000\002\005\007\000\002\006\004\000" +
    "\002\006\002\000\002\052\004\000\002\052\003\000\002" +
    "\007\006\000\002\007\006\000\002\007\011\000\002\007" +
    "\010\000\002\065\005\000\002\065\006\000\002\065\005" +
    "\000\002\065\006\000\002\065\004\000\002\065\003\000" +
    "\002\066\005\000\002\066\005\000\002\066\005\000\002" +
    "\066\005\000\002\066\005\000\002\066\005\000\002\066" +
    "\003\000\002\067\005\000\002\067\005\000\002\067\005" +
    "\000\002\067\005\000\002\067\005\000\002\067\005\000" +
    "\002\067\003\000\002\067\006\000\002\067\005\000\002" +
    "\067\006\000\002\067\003\000\002\067\005\000\002\067" +
    "\004\000\002\067\004\000\002\055\005\000\002\055\003" +
    "\000\002\070\003\000\002\070\003\000\002\070\003\000" +
    "\002\070\003\000\002\070\003\000\002\010\004\000\002" +
    "\011\007\000\002\014\004\000\002\014\004\000\002\014" +
    "\003\000\002\014\006\000\002\014\006\000\002\012\012" +
    "\000\002\012\011\000\002\012\003\000\002\015\004\000" +
    "\002\015\004\000\002\015\006\000\002\015\006\000\002" +
    "\013\004\000\002\013\002\000\002\016\004\000\002\016" +
    "\006\000\002\017\014\000\002\020\006\000\002\021\005" +
    "\000\002\021\003\000\002\022\005\000\002\022\006\000" +
    "\002\022\005\000\002\022\003\000\002\023\010\000\002" +
    "\024\012\000\002\025\007\000\002\026\003\000\002\026" +
    "\004\000\002\026\003\000\002\026\006\000\002\027\003" +
    "\000\002\027\002\000\002\045\003\000\002\045\004\000" +
    "\002\045\003\000\002\045\005\000\002\045\004\000\002" +
    "\046\003\000\002\046\004\000\002\046\005\000\002\046" +
    "\004\000\002\046\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\005\000\002\047\006\000\002\047\007\000" +
    "\002\047\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\031" +
    "\003\000\002\031\002\000\002\032\004\000\002\033\020" +
    "\000\002\034\003\000\002\034\002\000\002\035\004\000" +
    "\002\035\003\000\002\036\015\000\002\037\005\000\002" +
    "\037\003\000\002\037\002\000\002\040\006\000\002\040" +
    "\005\000\002\041\006\000\002\042\003\000\002\042\003" +
    "\000\002\043\006\000\002\044\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0155\000\004\062\006\001\002\000\004\002\u0157\001" +
    "\002\000\014\034\uffeb\036\uffeb\061\uffeb\070\012\072\uffeb" +
    "\001\002\000\004\117\007\001\002\000\004\030\010\001" +
    "\002\000\014\034\uffff\036\uffff\061\uffff\070\uffff\072\uffff" +
    "\001\002\000\012\034\uffe3\036\201\061\uffe3\072\uffe3\001" +
    "\002\000\004\117\013\001\002\000\010\017\ufff6\026\ufff6" +
    "\031\ufff6\001\002\000\014\034\uffe9\036\uffe9\061\uffe9\072" +
    "\uffe9\117\013\001\002\000\006\017\020\026\017\001\002" +
    "\000\012\034\uffec\036\uffec\061\uffec\072\uffec\001\002\000" +
    "\004\117\177\001\002\000\046\004\024\005\043\012\036" +
    "\033\046\055\027\063\041\075\044\076\045\077\033\100" +
    "\025\101\035\102\050\103\042\104\021\105\031\106\023" +
    "\107\047\117\030\001\002\000\110\004\uffba\005\uffba\006" +
    "\uffba\007\uffba\013\uffba\015\uffba\017\uffba\020\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\032\uffba\035\uffba\037\uffba\040\uffba\042\uffba\043\uffba" +
    "\045\uffba\050\uffba\053\uffba\057\uffba\064\uffba\067\uffba\071" +
    "\uffba\073\uffba\110\uffba\111\uffba\113\uffba\114\uffba\117\uffba" +
    "\001\002\000\060\013\uffd2\015\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\035\uffd2\040\uffd2\042\uffd2\043\uffd2" +
    "\045\uffd2\050\uffd2\057\uffd2\064\uffd2\067\uffd2\071\uffd2\073" +
    "\uffd2\110\uffd2\111\uffd2\113\uffd2\114\uffd2\117\uffd2\001\002" +
    "\000\110\004\uffb6\005\uffb6\006\uffb6\007\uffb6\013\uffb6\015" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\035\uffb6\037" +
    "\uffb6\040\uffb6\042\uffb6\043\uffb6\045\uffb6\050\uffb6\053\uffb6" +
    "\057\uffb6\064\uffb6\067\uffb6\071\uffb6\073\uffb6\110\uffb6\111" +
    "\uffb6\113\uffb6\114\uffb6\117\uffb6\001\002\000\024\004\024" +
    "\005\043\012\036\103\042\104\021\105\031\106\023\107" +
    "\047\117\054\001\002\000\010\013\ufffa\026\ufffa\030\ufffa" +
    "\001\002\000\110\004\uffc4\005\uffc4\006\uffc4\007\uffc4\013" +
    "\uffc4\015\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\035" +
    "\uffc4\037\uffc4\040\uffc4\042\uffc4\043\uffc4\045\uffc4\050\uffc4" +
    "\053\uffc4\057\uffc4\064\uffc4\067\uffc4\071\uffc4\073\uffc4\110" +
    "\uffc4\111\uffc4\113\uffc4\114\uffc4\117\uffc4\001\002\000\026" +
    "\004\024\005\043\012\036\055\027\103\042\104\021\105" +
    "\031\106\023\107\047\117\054\001\002\000\046\004\uffc0" +
    "\005\uffc0\006\uffc0\007\uffc0\012\055\014\057\017\uffc0\020" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\027\056\030\ufff8" +
    "\032\uffc0\037\uffc0\053\uffc0\057\uffc0\001\002\000\110\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\013\uffb8\015\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\035\uffb8\037\uffb8\040\uffb8" +
    "\042\uffb8\043\uffb8\045\uffb8\050\uffb8\053\uffb8\057\uffb8\064" +
    "\uffb8\067\uffb8\071\uffb8\073\uffb8\110\uffb8\111\uffb8\113\uffb8" +
    "\114\uffb8\117\uffb8\001\002\000\004\030\174\001\002\000" +
    "\010\013\ufffb\026\ufffb\030\ufffb\001\002\000\110\004\062" +
    "\005\065\006\067\007\063\013\uffcb\015\uffcb\017\164\020" +
    "\162\021\161\022\163\023\160\024\165\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\035\uffcb\037\066\040\uffcb\042" +
    "\uffcb\043\uffcb\045\uffcb\050\uffcb\053\061\057\uffcb\064\uffcb" +
    "\067\uffcb\071\uffcb\073\uffcb\110\uffcb\111\uffcb\113\uffcb\114" +
    "\uffcb\117\uffcb\001\002\000\010\013\ufff9\026\ufff9\030\ufff9" +
    "\001\002\000\026\004\024\005\043\012\036\055\027\103" +
    "\042\104\021\105\031\106\023\107\047\117\054\001\002" +
    "\000\004\030\155\001\002\000\010\027\151\032\107\057" +
    "\110\001\002\000\004\117\130\001\002\000\110\004\uffb9" +
    "\005\uffb9\006\uffb9\007\uffb9\013\uffb9\015\uffb9\017\uffb9\020" +
    "\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\035\uffb9\037\uffb9\040\uffb9\042" +
    "\uffb9\043\uffb9\045\uffb9\050\uffb9\053\uffb9\057\uffb9\064\uffb9" +
    "\067\uffb9\071\uffb9\073\uffb9\110\uffb9\111\uffb9\113\uffb9\114" +
    "\uffb9\117\uffb9\001\002\000\024\004\024\005\043\012\036" +
    "\103\042\104\021\105\031\106\023\107\047\117\054\001" +
    "\002\000\010\013\ufffe\026\ufffe\030\ufffe\001\002\000\010" +
    "\013\ufffd\026\ufffd\030\ufffd\001\002\000\004\014\052\001" +
    "\002\000\110\004\uffb7\005\uffb7\006\uffb7\007\uffb7\013\uffb7" +
    "\015\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\035\uffb7" +
    "\037\uffb7\040\uffb7\042\uffb7\043\uffb7\045\uffb7\050\uffb7\053" +
    "\uffb7\057\uffb7\064\uffb7\067\uffb7\071\uffb7\073\uffb7\110\uffb7" +
    "\111\uffb7\113\uffb7\114\uffb7\117\uffb7\001\002\000\010\013" +
    "\ufffc\026\ufffc\030\ufffc\001\002\000\004\056\123\001\002" +
    "\000\026\004\024\005\043\012\036\055\027\103\042\104" +
    "\021\105\031\106\023\107\047\117\054\001\002\000\010" +
    "\027\117\032\107\057\110\001\002\000\114\004\uffc0\005" +
    "\uffc0\006\uffc0\007\uffc0\012\055\013\uffc0\014\057\015\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\026" +
    "\uffc0\027\056\030\uffc0\031\uffc0\032\uffc0\035\uffc0\037\uffc0" +
    "\040\uffc0\042\uffc0\043\uffc0\045\uffc0\050\uffc0\053\uffc0\057" +
    "\uffc0\064\uffc0\067\uffc0\071\uffc0\073\uffc0\110\uffc0\111\uffc0" +
    "\113\uffc0\114\uffc0\117\uffc0\001\002\000\026\004\024\005" +
    "\043\012\036\055\027\103\042\104\021\105\031\106\023" +
    "\107\047\117\054\001\002\000\004\117\076\001\002\000" +
    "\024\004\024\005\043\012\036\103\042\104\021\105\031" +
    "\106\023\107\047\117\054\001\002\000\020\004\062\005" +
    "\065\006\067\007\063\015\064\037\066\053\061\001\002" +
    "\000\024\004\024\005\043\012\036\103\042\104\021\105" +
    "\031\106\023\107\047\117\054\001\002\000\024\004\024" +
    "\005\043\012\036\103\042\104\021\105\031\106\023\107" +
    "\047\117\054\001\002\000\024\004\024\005\043\012\036" +
    "\103\042\104\021\105\031\106\023\107\047\117\054\001" +
    "\002\000\110\004\uffc3\005\uffc3\006\uffc3\007\uffc3\013\uffc3" +
    "\015\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\035\uffc3" +
    "\037\uffc3\040\uffc3\042\uffc3\043\uffc3\045\uffc3\050\uffc3\053" +
    "\uffc3\057\uffc3\064\uffc3\067\uffc3\071\uffc3\073\uffc3\110\uffc3" +
    "\111\uffc3\113\uffc3\114\uffc3\117\uffc3\001\002\000\024\004" +
    "\024\005\043\012\036\103\042\104\021\105\031\106\023" +
    "\107\047\117\054\001\002\000\024\004\024\005\043\012" +
    "\036\103\042\104\021\105\031\106\023\107\047\117\054" +
    "\001\002\000\024\004\024\005\043\012\036\103\042\104" +
    "\021\105\031\106\023\107\047\117\054\001\002\000\110" +
    "\004\uffc8\005\uffc8\006\uffc8\007\uffc8\013\uffc8\015\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\035\uffc8\037\uffc8\040" +
    "\uffc8\042\uffc8\043\uffc8\045\uffc8\050\uffc8\053\uffc8\057\uffc8" +
    "\064\uffc8\067\uffc8\071\uffc8\073\uffc8\110\uffc8\111\uffc8\113" +
    "\uffc8\114\uffc8\117\uffc8\001\002\000\110\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\013\uffc7\015\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\035\uffc7\037\uffc7\040\uffc7\042\uffc7\043" +
    "\uffc7\045\uffc7\050\uffc7\053\uffc7\057\uffc7\064\uffc7\067\uffc7" +
    "\071\uffc7\073\uffc7\110\uffc7\111\uffc7\113\uffc7\114\uffc7\117" +
    "\uffc7\001\002\000\110\004\uffc9\005\uffc9\006\067\007\063" +
    "\013\uffc9\015\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\035\uffc9\037\066\040\uffc9\042\uffc9\043\uffc9\045\uffc9\050" +
    "\uffc9\053\061\057\uffc9\064\uffc9\067\uffc9\071\uffc9\073\uffc9" +
    "\110\uffc9\111\uffc9\113\uffc9\114\uffc9\117\uffc9\001\002\000" +
    "\110\004\uffc6\005\uffc6\006\uffc6\007\uffc6\013\uffc6\015\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\035\uffc6\037\uffc6" +
    "\040\uffc6\042\uffc6\043\uffc6\045\uffc6\050\uffc6\053\uffc6\057" +
    "\uffc6\064\uffc6\067\uffc6\071\uffc6\073\uffc6\110\uffc6\111\uffc6" +
    "\113\uffc6\114\uffc6\117\uffc6\001\002\000\110\004\uffca\005" +
    "\uffca\006\067\007\063\013\uffca\015\uffca\017\uffca\020\uffca" +
    "\021\uffca\022\uffca\023\uffca\024\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\035\uffca\037\066\040\uffca\042\uffca" +
    "\043\uffca\045\uffca\050\uffca\053\061\057\uffca\064\uffca\067" +
    "\uffca\071\uffca\073\uffca\110\uffca\111\uffca\113\uffca\114\uffca" +
    "\117\uffca\001\002\000\110\004\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\013\uffc5\015\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\035\uffc5\037\uffc5\040\uffc5\042\uffc5\043\uffc5\045\uffc5" +
    "\050\uffc5\053\uffc5\057\uffc5\064\uffc5\067\uffc5\071\uffc5\073" +
    "\uffc5\110\uffc5\111\uffc5\113\uffc5\114\uffc5\117\uffc5\001\002" +
    "\000\110\004\uffbb\005\uffbb\006\uffbb\007\uffbb\013\uffbb\015" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\035\uffbb\037" +
    "\uffbb\040\uffbb\042\uffbb\043\uffbb\045\uffbb\050\uffbb\053\uffbb" +
    "\057\uffbb\064\uffbb\067\uffbb\071\uffbb\073\uffbb\110\uffbb\111" +
    "\uffbb\113\uffbb\114\uffbb\117\uffbb\001\002\000\110\004\uffc2" +
    "\005\uffc2\006\uffc2\007\uffc2\013\uffc2\015\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2\027\100" +
    "\030\uffc2\031\uffc2\032\uffc2\035\uffc2\037\uffc2\040\uffc2\042" +
    "\uffc2\043\uffc2\045\uffc2\050\uffc2\053\uffc2\057\uffc2\064\uffc2" +
    "\067\uffc2\071\uffc2\073\uffc2\110\uffc2\111\uffc2\113\uffc2\114" +
    "\uffc2\117\uffc2\001\002\000\004\117\101\001\002\000\110" +
    "\004\uffbc\005\uffbc\006\uffbc\007\uffbc\013\uffbc\015\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\032\uffbc\035\uffbc\037\uffbc\040" +
    "\uffbc\042\uffbc\043\uffbc\045\uffbc\050\uffbc\053\uffbc\057\uffbc" +
    "\064\uffbc\067\uffbc\071\uffbc\073\uffbc\110\uffbc\111\uffbc\113" +
    "\uffbc\114\uffbc\117\uffbc\001\002\000\012\013\uffed\026\uffed" +
    "\032\107\057\110\001\002\000\006\013\105\026\104\001" +
    "\002\000\026\004\024\005\043\012\036\055\027\103\042" +
    "\104\021\105\031\106\023\107\047\117\054\001\002\000" +
    "\110\004\uffc1\005\uffc1\006\uffc1\007\uffc1\013\uffc1\015\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\026" +
    "\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\035\uffc1\037\uffc1" +
    "\040\uffc1\042\uffc1\043\uffc1\045\uffc1\050\uffc1\053\uffc1\057" +
    "\uffc1\064\uffc1\067\uffc1\071\uffc1\073\uffc1\110\uffc1\111\uffc1" +
    "\113\uffc1\114\uffc1\117\uffc1\001\002\000\012\013\uffee\026" +
    "\uffee\032\107\057\110\001\002\000\030\004\024\005\043" +
    "\012\036\055\027\066\114\103\042\104\021\105\031\106" +
    "\023\107\047\117\054\001\002\000\030\004\024\005\043" +
    "\012\036\042\112\055\027\103\042\104\021\105\031\106" +
    "\023\107\047\117\054\001\002\000\060\013\uffd5\015\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\107\035\uffd5\040" +
    "\uffd5\042\uffd5\043\uffd5\045\uffd5\050\uffd5\057\uffd5\064\uffd5" +
    "\067\uffd5\071\uffd5\073\uffd5\110\uffd5\111\uffd5\113\uffd5\114" +
    "\uffd5\117\uffd5\001\002\000\026\004\024\005\043\012\036" +
    "\055\027\103\042\104\021\105\031\106\023\107\047\117" +
    "\054\001\002\000\060\013\uffd4\015\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\107\035\uffd4\040\uffd4\042\uffd4\043" +
    "\uffd4\045\uffd4\050\uffd4\057\110\064\uffd4\067\uffd4\071\uffd4" +
    "\073\uffd4\110\uffd4\111\uffd4\113\uffd4\114\uffd4\117\uffd4\001" +
    "\002\000\026\004\024\005\043\012\036\055\027\103\042" +
    "\104\021\105\031\106\023\107\047\117\054\001\002\000" +
    "\060\013\uffd7\015\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\035\uffd7\040\uffd7\042\uffd7\043\uffd7\045\uffd7\050" +
    "\uffd7\057\uffd7\064\uffd7\067\uffd7\071\uffd7\073\uffd7\110\uffd7" +
    "\111\uffd7\113\uffd7\114\uffd7\117\uffd7\001\002\000\060\013" +
    "\uffd6\015\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\107" +
    "\035\uffd6\040\uffd6\042\uffd6\043\uffd6\045\uffd6\050\uffd6\057" +
    "\110\064\uffd6\067\uffd6\071\uffd6\073\uffd6\110\uffd6\111\uffd6" +
    "\113\uffd6\114\uffd6\117\uffd6\001\002\000\004\027\120\001" +
    "\002\000\026\004\024\005\043\012\036\055\027\103\042" +
    "\104\021\105\031\106\023\107\047\117\054\001\002\000" +
    "\010\015\122\032\107\057\110\001\002\000\004\056\ufff4" +
    "\001\002\000\020\075\044\076\045\077\033\100\025\101" +
    "\035\102\050\117\125\001\002\000\004\030\126\001\002" +
    "\000\010\013\ufff8\026\ufff8\030\ufff8\001\002\000\014\034" +
    "\uffe6\036\uffe6\061\uffe6\072\uffe6\117\uffe6\001\002\000\110" +
    "\004\uffbd\005\uffbd\006\067\007\063\013\uffbd\015\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\035\uffbd\037\066\040" +
    "\uffbd\042\uffbd\043\uffbd\045\uffbd\050\uffbd\053\061\057\uffbd" +
    "\064\uffbd\067\uffbd\071\uffbd\073\uffbd\110\uffbd\111\uffbd\113" +
    "\uffbd\114\uffbd\117\uffbd\001\002\000\004\031\140\001\002" +
    "\000\006\043\uffef\117\130\001\002\000\004\043\133\001" +
    "\002\000\004\030\134\001\002\000\014\034\uffe5\036\uffe5" +
    "\061\uffe5\072\uffe5\117\uffe5\001\002\000\006\043\uffef\117" +
    "\130\001\002\000\004\043\ufff3\001\002\000\004\043\ufff0" +
    "\001\002\000\022\060\141\075\044\076\045\077\033\100" +
    "\025\101\035\102\050\117\125\001\002\000\004\033\144" +
    "\001\002\000\004\030\143\001\002\000\006\043\ufff2\117" +
    "\ufff2\001\002\000\004\014\052\001\002\000\004\056\146" +
    "\001\002\000\020\075\044\076\045\077\033\100\025\101" +
    "\035\102\050\117\125\001\002\000\004\030\150\001\002" +
    "\000\006\043\ufff1\117\ufff1\001\002\000\004\027\152\001" +
    "\002\000\004\027\153\001\002\000\026\004\024\005\043" +
    "\012\036\055\027\103\042\104\021\105\031\106\023\107" +
    "\047\117\054\001\002\000\010\030\ufff5\032\107\057\110" +
    "\001\002\000\014\034\uffe7\036\uffe7\061\uffe7\072\uffe7\117" +
    "\uffe7\001\002\000\010\013\157\032\107\057\110\001\002" +
    "\000\110\004\uffbf\005\uffbf\006\uffbf\007\uffbf\013\uffbf\015" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\035\uffbf\037" +
    "\uffbf\040\uffbf\042\uffbf\043\uffbf\045\uffbf\050\uffbf\053\uffbf" +
    "\057\uffbf\064\uffbf\067\uffbf\071\uffbf\073\uffbf\110\uffbf\111" +
    "\uffbf\113\uffbf\114\uffbf\117\uffbf\001\002\000\024\004\024" +
    "\005\043\012\036\103\042\104\021\105\031\106\023\107" +
    "\047\117\054\001\002\000\024\004\024\005\043\012\036" +
    "\103\042\104\021\105\031\106\023\107\047\117\054\001" +
    "\002\000\024\004\024\005\043\012\036\103\042\104\021" +
    "\105\031\106\023\107\047\117\054\001\002\000\024\004" +
    "\024\005\043\012\036\103\042\104\021\105\031\106\023" +
    "\107\047\117\054\001\002\000\024\004\024\005\043\012" +
    "\036\103\042\104\021\105\031\106\023\107\047\117\054" +
    "\001\002\000\024\004\024\005\043\012\036\103\042\104" +
    "\021\105\031\106\023\107\047\117\054\001\002\000\074" +
    "\004\062\005\065\006\067\007\063\013\uffcc\015\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\035\uffcc\037\066" +
    "\040\uffcc\042\uffcc\043\uffcc\045\uffcc\050\uffcc\053\061\057" +
    "\uffcc\064\uffcc\067\uffcc\071\uffcc\073\uffcc\110\uffcc\111\uffcc" +
    "\113\uffcc\114\uffcc\117\uffcc\001\002\000\074\004\062\005" +
    "\065\006\067\007\063\013\uffd1\015\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\035\uffd1\037\066\040\uffd1\042" +
    "\uffd1\043\uffd1\045\uffd1\050\uffd1\053\061\057\uffd1\064\uffd1" +
    "\067\uffd1\071\uffd1\073\uffd1\110\uffd1\111\uffd1\113\uffd1\114" +
    "\uffd1\117\uffd1\001\002\000\074\004\062\005\065\006\067" +
    "\007\063\013\uffce\015\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\032\uffce\035\uffce\037\066\040\uffce\042\uffce\043\uffce" +
    "\045\uffce\050\uffce\053\061\057\uffce\064\uffce\067\uffce\071" +
    "\uffce\073\uffce\110\uffce\111\uffce\113\uffce\114\uffce\117\uffce" +
    "\001\002\000\074\004\062\005\065\006\067\007\063\013" +
    "\uffd0\015\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\035\uffd0\037\066\040\uffd0\042\uffd0\043\uffd0\045\uffd0\050" +
    "\uffd0\053\061\057\uffd0\064\uffd0\067\uffd0\071\uffd0\073\uffd0" +
    "\110\uffd0\111\uffd0\113\uffd0\114\uffd0\117\uffd0\001\002\000" +
    "\074\004\062\005\065\006\067\007\063\013\uffcf\015\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\035\uffcf\037" +
    "\066\040\uffcf\042\uffcf\043\uffcf\045\uffcf\050\uffcf\053\061" +
    "\057\uffcf\064\uffcf\067\uffcf\071\uffcf\073\uffcf\110\uffcf\111" +
    "\uffcf\113\uffcf\114\uffcf\117\uffcf\001\002\000\074\004\062" +
    "\005\065\006\067\007\063\013\uffcd\015\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\035\uffcd\037\066\040\uffcd" +
    "\042\uffcd\043\uffcd\045\uffcd\050\uffcd\053\061\057\uffcd\064" +
    "\uffcd\067\uffcd\071\uffcd\073\uffcd\110\uffcd\111\uffcd\113\uffcd" +
    "\114\uffcd\117\uffcd\001\002\000\014\034\uffe8\036\uffe8\061" +
    "\uffe8\072\uffe8\117\uffe8\001\002\000\060\013\uffd3\015\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\035\uffd3\040" +
    "\uffd3\042\uffd3\043\uffd3\045\uffd3\050\uffd3\057\uffd3\064\uffd3" +
    "\067\uffd3\071\uffd3\073\uffd3\110\uffd3\111\uffd3\113\uffd3\114" +
    "\uffd3\117\uffd3\001\002\000\110\004\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\013\uffbe\015\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\032\uffbe\035\uffbe\037\uffbe\040\uffbe\042\uffbe\043\uffbe\045" +
    "\uffbe\050\uffbe\053\uffbe\057\uffbe\064\uffbe\067\uffbe\071\uffbe" +
    "\073\uffbe\110\uffbe\111\uffbe\113\uffbe\114\uffbe\117\uffbe\001" +
    "\002\000\010\017\ufff7\026\ufff7\031\ufff7\001\002\000\012" +
    "\034\uffea\036\uffea\061\uffea\072\uffea\001\002\000\002\001" +
    "\002\000\010\034\uffde\061\uffde\072\203\001\002\000\004" +
    "\117\013\001\002\000\006\034\uff7c\061\uff7c\001\002\000" +
    "\006\034\uff7d\061\uff7d\001\002\000\006\034\uff78\061\207" +
    "\001\002\000\004\117\u011b\001\002\000\004\034\215\001" +
    "\002\000\006\034\uff76\061\uff76\001\002\000\006\034\uff79" +
    "\061\207\001\002\000\006\034\uff77\061\uff77\001\002\000" +
    "\004\002\000\001\002\000\030\035\235\043\uff93\045\242" +
    "\050\227\064\243\073\223\110\224\111\244\113\233\114" +
    "\220\117\230\001\002\000\032\035\uff7e\043\uff7e\045\uff7e" +
    "\050\uff7e\064\uff7e\071\uff7e\073\uff7e\110\uff7e\111\uff7e\113" +
    "\uff7e\114\uff7e\117\uff7e\001\002\000\032\035\uff81\043\uff81" +
    "\045\uff81\050\uff81\064\uff81\071\uff81\073\uff81\110\uff81\111" +
    "\uff81\113\uff81\114\uff81\117\uff81\001\002\000\036\030\uff87" +
    "\035\uff87\042\uff87\043\uff87\045\uff87\050\uff87\064\uff87\071" +
    "\uff87\073\uff87\110\uff87\111\uff87\113\uff87\114\uff87\117\uff87" +
    "\001\002\000\032\035\uff80\043\uff80\045\uff80\050\uff80\064" +
    "\uff80\071\uff80\073\uff80\110\uff80\111\uff80\113\uff80\114\uff80" +
    "\117\uff80\001\002\000\036\030\uff6e\035\uff6e\042\uff6e\043" +
    "\uff6e\045\uff6e\050\uff6e\064\uff6e\071\uff6e\073\uff6e\110\uff6e" +
    "\111\uff6e\113\uff6e\114\uff6e\117\uff6e\001\002\000\004\012" +
    "\u0116\001\002\000\004\012\u0113\001\002\000\006\030\u0111" +
    "\043\uff92\001\002\000\004\043\uff94\001\002\000\004\012" +
    "\u010d\001\002\000\010\012\u0104\025\u0105\027\u0106\001\002" +
    "\000\036\030\uff6d\035\uff6d\042\uff6d\043\uff6d\045\uff6d\050" +
    "\uff6d\064\uff6d\071\uff6d\073\uff6d\110\uff6d\111\uff6d\113\uff6d" +
    "\114\uff6d\117\uff6d\001\002\000\030\035\235\043\uff90\045" +
    "\242\050\227\064\243\073\223\110\224\111\244\113\233" +
    "\114\220\117\230\001\002\000\036\030\uff88\035\uff88\042" +
    "\uff88\043\uff88\045\uff88\050\uff88\064\uff88\071\uff88\073\uff88" +
    "\110\uff88\111\uff88\113\uff88\114\uff88\117\uff88\001\002\000" +
    "\036\030\uff83\035\uff83\042\uff83\043\uff83\045\uff83\050\uff83" +
    "\064\uff83\071\uff83\073\uff83\110\uff83\111\uff83\113\uff83\114" +
    "\uff83\117\uff83\001\002\000\004\012\345\001\002\000\032" +
    "\035\uff82\043\uff82\045\uff82\050\uff82\064\uff82\071\uff82\073" +
    "\uff82\110\uff82\111\uff82\113\uff82\114\uff82\117\uff82\001\002" +
    "\000\004\043\343\001\002\000\030\034\273\035\235\045" +
    "\242\050\227\064\243\073\223\110\224\111\244\113\233" +
    "\114\220\117\230\001\002\000\032\035\uff7f\043\uff7f\045" +
    "\uff7f\050\uff7f\064\uff7f\071\uff7f\073\uff7f\110\uff7f\111\uff7f" +
    "\113\uff7f\114\uff7f\117\uff7f\001\002\000\004\117\263\001" +
    "\002\000\030\034\251\035\235\045\242\050\227\064\243" +
    "\073\223\110\224\111\244\113\233\114\220\117\230\001" +
    "\002\000\004\012\245\001\002\000\026\004\024\005\043" +
    "\012\036\055\027\103\042\104\021\105\031\106\023\107" +
    "\047\117\054\001\002\000\006\013\247\026\104\001\002" +
    "\000\036\030\uff6b\035\uff6b\042\uff6b\043\uff6b\045\uff6b\050" +
    "\uff6b\064\uff6b\071\uff6b\073\uff6b\110\uff6b\111\uff6b\113\uff6b" +
    "\114\uff6b\117\uff6b\001\002\000\034\030\262\035\uff98\043" +
    "\uff98\045\uff98\050\uff98\064\uff98\071\uff98\073\uff98\110\uff98" +
    "\111\uff98\113\uff98\114\uff98\117\uff98\001\002\000\030\035" +
    "\235\043\uff93\045\242\050\227\064\243\073\223\110\224" +
    "\111\244\113\233\114\220\117\230\001\002\000\032\035" +
    "\uff96\043\uff96\045\uff96\050\uff96\064\uff96\071\uff96\073\uff96" +
    "\110\uff96\111\uff96\113\uff96\114\uff96\117\uff96\001\002\000" +
    "\004\071\254\001\002\000\026\004\024\005\043\012\036" +
    "\055\027\103\042\104\021\105\031\106\023\107\047\117" +
    "\054\001\002\000\010\030\256\032\107\057\110\001\002" +
    "\000\032\035\uff99\043\uff99\045\uff99\050\uff99\064\uff99\071" +
    "\uff99\073\uff99\110\uff99\111\uff99\113\uff99\114\uff99\117\uff99" +
    "\001\002\000\004\043\260\001\002\000\004\030\261\001" +
    "\002\000\032\035\uff95\043\uff95\045\uff95\050\uff95\064\uff95" +
    "\071\uff95\073\uff95\110\uff95\111\uff95\113\uff95\114\uff95\117" +
    "\uff95\001\002\000\032\035\uff97\043\uff97\045\uff97\050\uff97" +
    "\064\uff97\071\uff97\073\uff97\110\uff97\111\uff97\113\uff97\114" +
    "\uff97\117\uff97\001\002\000\004\025\264\001\002\000\026" +
    "\004\024\005\043\012\036\055\027\103\042\104\021\105" +
    "\031\106\023\107\047\117\054\001\002\000\010\032\107" +
    "\057\110\067\266\001\002\000\026\004\024\005\043\012" +
    "\036\055\027\103\042\104\021\105\031\106\023\107\047" +
    "\117\054\001\002\000\010\032\107\040\270\057\110\001" +
    "\002\000\030\034\251\035\235\045\242\050\227\064\243" +
    "\073\223\110\224\111\244\113\233\114\220\117\230\001" +
    "\002\000\032\035\uff9a\043\uff9a\045\uff9a\050\uff9a\064\uff9a" +
    "\071\uff9a\073\uff9a\110\uff9a\111\uff9a\113\uff9a\114\uff9a\117" +
    "\uff9a\001\002\000\036\030\341\035\uffa6\042\302\043\uffa6" +
    "\045\uffa6\050\uffa6\064\uffa6\071\uffa6\073\uffa6\110\uffa6\111" +
    "\uffa6\113\uffa6\114\uffa6\117\uffa6\001\002\000\030\035\235" +
    "\043\uff93\045\242\050\227\064\243\073\223\110\224\111" +
    "\244\113\233\114\220\117\230\001\002\000\032\035\uffb5" +
    "\043\uffb5\045\uffb5\050\uffb5\064\uffb5\071\uffb5\073\uffb5\110" +
    "\uffb5\111\uffb5\113\uffb5\114\uffb5\117\uffb5\001\002\000\032" +
    "\035\uffb1\043\uffb1\045\uffb1\050\uffb1\064\uffb1\071\uffb1\073" +
    "\uffb1\110\uffb1\111\uffb1\113\uffb1\114\uffb1\117\uffb1\001\002" +
    "\000\004\043\277\001\002\000\036\030\301\035\uffa6\042" +
    "\302\043\uffa6\045\uffa6\050\uffa6\064\uffa6\071\uffa6\073\uffa6" +
    "\110\uffa6\111\uffa6\113\uffa6\114\uffa6\117\uffa6\001\002\000" +
    "\034\035\uffac\042\uffac\043\uffac\045\uffac\050\uffac\064\uffac" +
    "\071\uffac\073\uffac\110\uffac\111\uffac\113\uffac\114\uffac\117" +
    "\uffac\001\002\000\032\035\uffb0\043\uffb0\045\uffb0\050\uffb0" +
    "\064\uffb0\071\uffb0\073\uffb0\110\uffb0\111\uffb0\113\uffb0\114" +
    "\uffb0\117\uffb0\001\002\000\020\034\324\050\333\110\224" +
    "\111\244\113\233\114\220\117\230\001\002\000\034\035" +
    "\uffaf\042\304\043\uffaf\045\uffaf\050\uffaf\064\uffaf\071\uffaf" +
    "\073\uffaf\110\uffaf\111\uffaf\113\uffaf\114\uffaf\117\uffaf\001" +
    "\002\000\004\050\305\001\002\000\004\012\306\001\002" +
    "\000\026\004\024\005\043\012\036\055\027\103\042\104" +
    "\021\105\031\106\023\107\047\117\054\001\002\000\010" +
    "\013\310\032\107\057\110\001\002\000\004\066\311\001" +
    "\002\000\016\034\314\110\224\111\244\113\233\114\220" +
    "\117\230\001\002\000\034\035\uffae\042\uffae\043\uffae\045" +
    "\uffae\050\uffae\064\uffae\071\uffae\073\uffae\110\uffae\111\uffae" +
    "\113\uffae\114\uffae\117\uffae\001\002\000\036\030\332\035" +
    "\uffa6\042\321\043\uffa6\045\uffa6\050\uffa6\064\uffa6\071\uffa6" +
    "\073\uffa6\110\uffa6\111\uffa6\113\uffa6\114\uffa6\117\uffa6\001" +
    "\002\000\030\035\235\043\uff93\045\242\050\227\064\243" +
    "\073\223\110\224\111\244\113\233\114\220\117\230\001" +
    "\002\000\004\043\316\001\002\000\036\030\320\035\uffa6" +
    "\042\321\043\uffa6\045\uffa6\050\uffa6\064\uffa6\071\uffa6\073" +
    "\uffa6\110\uffa6\111\uffa6\113\uffa6\114\uffa6\117\uffa6\001\002" +
    "\000\034\035\uffa8\042\uffa8\043\uffa8\045\uffa8\050\uffa8\064" +
    "\uffa8\071\uffa8\073\uffa8\110\uffa8\111\uffa8\113\uffa8\114\uffa8" +
    "\117\uffa8\001\002\000\034\035\uffa9\042\uffa9\043\uffa9\045" +
    "\uffa9\050\uffa9\064\uffa9\071\uffa9\073\uffa9\110\uffa9\111\uffa9" +
    "\113\uffa9\114\uffa9\117\uffa9\001\002\000\016\034\324\110" +
    "\224\111\244\113\233\114\220\117\230\001\002\000\034" +
    "\035\uffa7\042\uffa7\043\uffa7\045\uffa7\050\uffa7\064\uffa7\071" +
    "\uffa7\073\uffa7\110\uffa7\111\uffa7\113\uffa7\114\uffa7\117\uffa7" +
    "\001\002\000\004\030\330\001\002\000\030\035\235\043" +
    "\uff93\045\242\050\227\064\243\073\223\110\224\111\244" +
    "\113\233\114\220\117\230\001\002\000\004\043\326\001" +
    "\002\000\004\030\327\001\002\000\034\035\uffa4\042\uffa4" +
    "\043\uffa4\045\uffa4\050\uffa4\064\uffa4\071\uffa4\073\uffa4\110" +
    "\uffa4\111\uffa4\113\uffa4\114\uffa4\117\uffa4\001\002\000\034" +
    "\035\uffa5\042\uffa5\043\uffa5\045\uffa5\050\uffa5\064\uffa5\071" +
    "\uffa5\073\uffa5\110\uffa5\111\uffa5\113\uffa5\114\uffa5\117\uffa5" +
    "\001\002\000\034\035\uffab\042\uffab\043\uffab\045\uffab\050" +
    "\uffab\064\uffab\071\uffab\073\uffab\110\uffab\111\uffab\113\uffab" +
    "\114\uffab\117\uffab\001\002\000\034\035\uffaa\042\uffaa\043" +
    "\uffaa\045\uffaa\050\uffaa\064\uffaa\071\uffaa\073\uffaa\110\uffaa" +
    "\111\uffaa\113\uffaa\114\uffaa\117\uffaa\001\002\000\004\012" +
    "\334\001\002\000\026\004\024\005\043\012\036\055\027" +
    "\103\042\104\021\105\031\106\023\107\047\117\054\001" +
    "\002\000\010\013\336\032\107\057\110\001\002\000\004" +
    "\066\337\001\002\000\016\034\314\110\224\111\244\113" +
    "\233\114\220\117\230\001\002\000\034\035\uffad\042\uffad" +
    "\043\uffad\045\uffad\050\uffad\064\uffad\071\uffad\073\uffad\110" +
    "\uffad\111\uffad\113\uffad\114\uffad\117\uffad\001\002\000\032" +
    "\035\uffb2\043\uffb2\045\uffb2\050\uffb2\064\uffb2\071\uffb2\073" +
    "\uffb2\110\uffb2\111\uffb2\113\uffb2\114\uffb2\117\uffb2\001\002" +
    "\000\034\035\uffb3\042\304\043\uffb3\045\uffb3\050\uffb3\064" +
    "\uffb3\071\uffb3\073\uffb3\110\uffb3\111\uffb3\113\uffb3\114\uffb3" +
    "\117\uffb3\001\002\000\004\027\344\001\002\000\004\002" +
    "\uff6f\001\002\000\026\004\024\005\043\012\036\055\027" +
    "\103\042\104\021\105\031\106\023\107\047\117\054\001" +
    "\002\000\010\013\347\032\107\057\110\001\002\000\004" +
    "\056\350\001\002\000\026\004\024\005\043\012\036\055" +
    "\027\103\042\104\021\105\031\106\023\107\047\117\054" +
    "\001\002\000\004\042\372\001\002\000\006\026\354\031" +
    "\355\001\002\000\012\026\uffa0\031\uffa0\032\107\057\110" +
    "\001\002\000\026\004\024\005\043\012\036\055\027\103" +
    "\042\104\021\105\031\106\023\107\047\117\054\001\002" +
    "\000\010\110\224\111\244\117\356\001\002\000\010\012" +
    "\362\025\363\027\364\001\002\000\006\030\uff9c\043\uff9c" +
    "\001\002\000\004\030\361\001\002\000\004\042\uffa2\001" +
    "\002\000\026\004\024\005\043\012\036\055\027\103\042" +
    "\104\021\105\031\106\023\107\047\117\054\001\002\000" +
    "\026\004\024\005\043\012\036\055\027\103\042\104\021" +
    "\105\031\106\023\107\047\117\054\001\002\000\004\117" +
    "\365\001\002\000\006\030\uff9d\043\uff9d\001\002\000\012" +
    "\030\uff9f\032\107\043\uff9f\057\110\001\002\000\006\013" +
    "\370\026\104\001\002\000\006\030\uff9e\043\uff9e\001\002" +
    "\000\012\026\uffa1\031\uffa1\032\107\057\110\001\002\000" +
    "\010\110\224\111\244\117\356\001\002\000\004\043\374" +
    "\001\002\000\004\030\375\001\002\000\032\035\uffa3\043" +
    "\uffa3\045\uffa3\050\uffa3\064\uffa3\071\uffa3\073\uffa3\110\uffa3" +
    "\111\uffa3\113\uffa3\114\uffa3\117\uffa3\001\002\000\006\030" +
    "\u0102\043\uff8d\001\002\000\030\035\235\043\uff89\045\242" +
    "\050\227\064\243\073\223\110\224\111\244\113\233\114" +
    "\220\117\230\001\002\000\004\043\uff8e\001\002\000\004" +
    "\043\uff8a\001\002\000\030\035\235\043\uff8c\045\242\050" +
    "\227\064\243\073\223\110\224\111\244\113\233\114\220" +
    "\117\230\001\002\000\004\043\uff8b\001\002\000\026\004" +
    "\024\005\043\012\036\055\027\103\042\104\021\105\031" +
    "\106\023\107\047\117\054\001\002\000\026\004\024\005" +
    "\043\012\036\055\027\103\042\104\021\105\031\106\023" +
    "\107\047\117\054\001\002\000\004\117\u0107\001\002\000" +
    "\004\025\u0108\001\002\000\026\004\024\005\043\012\036" +
    "\055\027\103\042\104\021\105\031\106\023\107\047\117" +
    "\054\001\002\000\042\030\uff84\032\107\035\uff84\042\uff84" +
    "\043\uff84\045\uff84\050\uff84\057\110\064\uff84\071\uff84\073" +
    "\uff84\110\uff84\111\uff84\113\uff84\114\uff84\117\uff84\001\002" +
    "\000\042\030\uff86\032\107\035\uff86\042\uff86\043\uff86\045" +
    "\uff86\050\uff86\057\110\064\uff86\071\uff86\073\uff86\110\uff86" +
    "\111\uff86\113\uff86\114\uff86\117\uff86\001\002\000\006\013" +
    "\u010c\026\104\001\002\000\036\030\uff85\035\uff85\042\uff85" +
    "\043\uff85\045\uff85\050\uff85\064\uff85\071\uff85\073\uff85\110" +
    "\uff85\111\uff85\113\uff85\114\uff85\117\uff85\001\002\000\026" +
    "\004\024\005\043\012\036\055\027\103\042\104\021\105" +
    "\031\106\023\107\047\117\054\001\002\000\010\013\u010f" +
    "\032\107\057\110\001\002\000\004\066\u0110\001\002\000" +
    "\030\034\uffb4\035\uffb4\045\uffb4\050\uffb4\064\uffb4\073\uffb4" +
    "\110\uffb4\111\uffb4\113\uffb4\114\uffb4\117\uffb4\001\002\000" +
    "\030\035\235\043\uff91\045\242\050\227\064\243\073\223" +
    "\110\224\111\244\113\233\114\220\117\230\001\002\000" +
    "\004\043\uff8f\001\002\000\026\004\024\005\043\012\036" +
    "\055\027\103\042\104\021\105\031\106\023\107\047\117" +
    "\054\001\002\000\006\013\u0115\026\104\001\002\000\036" +
    "\030\uff6c\035\uff6c\042\uff6c\043\uff6c\045\uff6c\050\uff6c\064" +
    "\uff6c\071\uff6c\073\uff6c\110\uff6c\111\uff6c\113\uff6c\114\uff6c" +
    "\117\uff6c\001\002\000\026\004\024\005\043\012\036\055" +
    "\027\103\042\104\021\105\031\106\023\107\047\117\054" +
    "\001\002\000\010\013\u0118\032\107\057\110\001\002\000" +
    "\004\040\u0119\001\002\000\030\034\251\035\235\045\242" +
    "\050\227\064\243\073\223\110\224\111\244\113\233\114" +
    "\220\117\230\001\002\000\032\035\uff9b\043\uff9b\045\uff9b" +
    "\050\uff9b\064\uff9b\071\uff9b\073\uff9b\110\uff9b\111\uff9b\113" +
    "\uff9b\114\uff9b\117\uff9b\001\002\000\004\012\u011c\001\002" +
    "\000\012\013\uff72\026\uff72\072\u011d\117\013\001\002\000" +
    "\004\117\013\001\002\000\006\013\uff73\026\uff73\001\002" +
    "\000\006\026\017\031\u012a\001\002\000\006\013\u0121\026" +
    "\u0122\001\002\000\004\030\u0124\001\002\000\006\072\u011d" +
    "\117\013\001\002\000\006\013\uff74\026\uff74\001\002\000" +
    "\006\034\uffde\072\203\001\002\000\004\034\u0126\001\002" +
    "\000\030\035\235\043\uff93\045\242\050\227\064\243\073" +
    "\223\110\224\111\244\113\233\114\220\117\230\001\002" +
    "\000\004\043\u0128\001\002\000\004\030\u0129\001\002\000" +
    "\006\034\uff75\061\uff75\001\002\000\020\075\044\076\045" +
    "\077\033\100\025\101\035\102\050\117\125\001\002\000" +
    "\006\013\uff70\026\uff70\001\002\000\006\026\017\031\u012d" +
    "\001\002\000\020\075\044\076\045\077\033\100\025\101" +
    "\035\102\050\117\125\001\002\000\006\013\uff71\026\uff71" +
    "\001\002\000\010\034\uff7b\046\u0130\061\uff7b\001\002\000" +
    "\004\117\u0131\001\002\000\004\012\u0132\001\002\000\012" +
    "\013\uff72\026\uff72\072\u011d\117\013\001\002\000\006\013" +
    "\u0134\026\u0122\001\002\000\004\031\u0135\001\002\000\020" +
    "\075\044\076\045\077\033\100\025\101\035\102\050\117" +
    "\125\001\002\000\004\030\u0137\001\002\000\006\034\uffde" +
    "\072\203\001\002\000\004\034\u0139\001\002\000\030\035" +
    "\235\043\uff93\045\242\050\227\064\243\073\223\110\224" +
    "\111\244\113\233\114\220\117\230\001\002\000\004\043" +
    "\u013b\001\002\000\004\030\u013c\001\002\000\010\034\uff7a" +
    "\046\uff7a\061\uff7a\001\002\000\010\034\uffdf\061\uffdf\117" +
    "\013\001\002\000\010\017\u0140\026\017\031\u0141\001\002" +
    "\000\010\034\uffdc\061\uffdc\117\uffdc\001\002\000\004\063" +
    "\u014b\001\002\000\044\004\024\005\043\012\036\033\u0144" +
    "\055\027\075\044\076\045\077\033\100\025\101\035\102" +
    "\050\103\042\104\021\105\031\106\023\107\047\117\030" +
    "\001\002\000\004\030\u014a\001\002\000\004\030\u0149\001" +
    "\002\000\004\014\052\001\002\000\004\056\u0146\001\002" +
    "\000\020\075\044\076\045\077\033\100\025\101\035\102" +
    "\050\117\125\001\002\000\004\030\u0148\001\002\000\010" +
    "\034\uffd9\061\uffd9\117\uffd9\001\002\000\010\034\uffda\061" +
    "\uffda\117\uffda\001\002\000\010\034\uffdb\061\uffdb\117\uffdb" +
    "\001\002\000\004\117\130\001\002\000\004\043\u014d\001" +
    "\002\000\004\030\u014e\001\002\000\010\034\uffd8\061\uffd8" +
    "\117\uffd8\001\002\000\010\034\uffdd\061\uffdd\117\uffdd\001" +
    "\002\000\010\034\uffe4\061\uffe4\072\uffe4\001\002\000\012" +
    "\034\uffe1\061\uffe1\072\uffe1\117\u0152\001\002\000\004\017" +
    "\u0154\001\002\000\010\034\uffe2\061\uffe2\072\uffe2\001\002" +
    "\000\026\004\024\005\043\012\036\055\027\103\042\104" +
    "\021\105\031\106\023\107\047\117\054\001\002\000\010" +
    "\030\u0156\032\107\057\110\001\002\000\012\034\uffe0\061" +
    "\uffe0\072\uffe0\117\uffe0\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0155\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\057\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\201\001\001\000" +
    "\010\054\014\060\015\061\013\001\001\000\002\001\001" +
    "\000\010\054\014\060\177\061\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\056\031" +
    "\065\037\066\021\067\033\070\025\072\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\067\175\070\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\065\174\066\021\067\033\070\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\065\155\066\021\067\033\070\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\063\131\064\130\001\001" +
    "\000\002\001\001\000\006\067\126\070\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\073\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\065\052\066\021\067\033\070\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\065\101\066\021\067" +
    "\033\070\025\071\102\001\001\000\004\055\076\001\001" +
    "\000\006\067\057\070\025\001\001\000\002\001\001\000" +
    "\006\067\074\070\025\001\001\000\006\067\073\070\025" +
    "\001\001\000\006\067\072\070\025\001\001\000\002\001" +
    "\001\000\006\067\071\070\025\001\001\000\006\067\070" +
    "\070\025\001\001\000\006\067\067\070\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\065\105\066" +
    "\021\067\033\070\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\065\114\066\021\067\033\070\025\001" +
    "\001\000\012\065\110\066\021\067\033\070\025\001\001" +
    "\000\002\001\001\000\012\065\112\066\021\067\033\070" +
    "\025\001\001\000\002\001\001\000\012\065\115\066\021" +
    "\067\033\070\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\065\120\066\021\067\033" +
    "\070\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\062\135\064\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\062\136\064\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\073\144\001\001\000\002\001\001\000\004" +
    "\056\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\065\153\066\021" +
    "\067\033\070\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\067\172" +
    "\070\025\001\001\000\006\067\171\070\025\001\001\000" +
    "\006\067\170\070\025\001\001\000\006\067\167\070\025" +
    "\001\001\000\006\067\166\070\025\001\001\000\006\067" +
    "\165\070\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\u0150\053\u014f\001\001\000\004\006\203\001\001\000\010" +
    "\007\u013e\052\u013c\054\u013d\001\001\000\006\031\205\032" +
    "\204\001\001\000\004\033\u012e\001\001\000\010\034\207" +
    "\035\211\036\210\001\001\000\002\001\001\000\004\041" +
    "\213\001\001\000\002\001\001\000\004\036\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\010\235\011" +
    "\237\017\216\023\220\024\240\025\215\027\236\042\233" +
    "\043\221\044\230\045\225\047\224\050\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\010\235\011" +
    "\237\017\216\023\220\024\240\025\215\042\233\043\221" +
    "\044\230\046\377\047\375\050\376\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\010\235\011\237\014\273\017" +
    "\216\023\220\024\240\025\215\042\233\043\221\044\230" +
    "\047\271\050\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\010\235\011\237\017\216\023\220\024\240" +
    "\025\215\026\252\042\233\043\221\044\230\047\247\050" +
    "\251\001\001\000\002\001\001\000\014\065\101\066\021" +
    "\067\033\070\025\071\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\010\235\011\237" +
    "\017\216\023\220\024\240\025\215\027\256\042\233\043" +
    "\221\044\230\045\225\047\224\050\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\065\254\066\021\067" +
    "\033\070\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\065\264\066\021" +
    "\067\033\070\025\001\001\000\002\001\001\000\012\065" +
    "\266\066\021\067\033\070\025\001\001\000\002\001\001" +
    "\000\032\010\235\011\237\017\216\023\220\024\240\025" +
    "\215\026\270\042\233\043\221\044\230\047\247\050\251" +
    "\001\001\000\002\001\001\000\006\012\341\013\277\001" +
    "\001\000\034\010\235\011\237\017\216\023\220\024\240" +
    "\025\215\027\275\042\233\043\221\044\230\045\225\047" +
    "\224\050\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\302\013\277\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\016\321\042\233" +
    "\043\221\044\230\047\322\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\065\306\066\021" +
    "\067\033\070\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\015\311\042\233\043\221\044\230\047\312" +
    "\001\001\000\002\001\001\000\004\013\330\001\001\000" +
    "\034\010\235\011\237\017\216\023\220\024\240\025\215" +
    "\027\314\042\233\043\221\044\230\045\225\047\224\050" +
    "\231\001\001\000\002\001\001\000\004\013\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\016\321\042" +
    "\233\043\221\044\230\047\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\010\235\011\237\017\216\023" +
    "\220\024\240\025\215\027\324\042\233\043\221\044\230" +
    "\045\225\047\224\050\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\065" +
    "\334\066\021\067\033\070\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\337\042\233\043\221\044" +
    "\230\047\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\065\345\066\021\067\033\070\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\020\350\021\351\065" +
    "\352\066\021\067\033\070\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\065\370\066" +
    "\021\067\033\070\025\001\001\000\012\022\357\042\356" +
    "\043\221\044\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\065\101" +
    "\066\021\067\033\070\025\071\366\001\001\000\012\065" +
    "\365\066\021\067\033\070\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\022\372\042\356" +
    "\043\221\044\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\010\235" +
    "\011\237\017\216\023\220\024\240\025\215\042\233\043" +
    "\221\044\230\046\u0100\047\375\050\376\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\010\235\011\237\017" +
    "\216\023\220\024\240\025\215\042\233\043\221\044\230" +
    "\046\u0102\047\375\050\376\001\001\000\002\001\001\000" +
    "\014\065\101\066\021\067\033\070\025\071\u010a\001\001" +
    "\000\012\065\u0109\066\021\067\033\070\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\065\u0108\066\021" +
    "\067\033\070\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\065\u010d" +
    "\066\021\067\033\070\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\010\235\011\237" +
    "\017\216\023\220\024\240\025\215\042\233\043\221\044" +
    "\230\046\u0111\047\375\050\376\001\001\000\002\001\001" +
    "\000\014\065\101\066\021\067\033\070\025\071\u0113\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\065\u0116" +
    "\066\021\067\033\070\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\010\235\011\237\017\216\023\220" +
    "\024\240\025\215\026\u0119\042\233\043\221\044\230\047" +
    "\247\050\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\037\u011f\040\u011d\054\u011e\001\001\000\004\054" +
    "\u012b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\040\u0122\054\u011e\001" +
    "\001\000\002\001\001\000\004\006\u0124\001\001\000\002" +
    "\001\001\000\034\010\235\011\237\017\216\023\220\024" +
    "\240\025\215\027\u0126\042\233\043\221\044\230\045\225" +
    "\047\224\050\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\u012a\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\u012d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\037\u0132\040\u011d\054\u011e\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\u0135\001\001" +
    "\000\002\001\001\000\004\006\u0137\001\001\000\002\001" +
    "\001\000\034\010\235\011\237\017\216\023\220\024\240" +
    "\025\215\027\u0139\042\233\043\221\044\230\045\225\047" +
    "\224\050\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\u014e\054\u013d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\056\u0141\065\037\066\021\067\033\070\025\072\u0142\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\073\u0144" +
    "\001\001\000\002\001\001\000\004\056\u0146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\063\u014b\064\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u0150\053\u0152\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\065\u0154\066\021" +
    "\067\033\070\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //fields
    Lexer lex;
    private List<String> syntaxErrors;
    private GenTypeTab genTypeTab;

    //conect the parser with the lexer
    public Parser(Lexer lex){
        super(lex);
        syntaxErrors = new LinkedList<>();
        genTypeTab = new GenTypeTab();
    }

    //getters
    public Lexer getLexer(){
        return this.lex;
    }
    public List<String> getSyntaxErrors(){
        return this.syntaxErrors;
    }
    
    /*SOBREESCRIBIR LOS METODOS DE ERROR*/
    public void syntax_error(Symbol cur_token) {
        String mss = "Simbolo: " + symbl_name_from_id(cur_token.sym)
                    + ", linea: " + cur_token.left
                    + ", columna: " + cur_token.right;
        if (expected_token_ids().isEmpty()) {
            mss += " -- ya no se esperaba ningun simbolo";
        }
        syntaxErrors.add(mss);
    }
    public void unrecovered_syntax_error(Symbol cur_token) {
        syntaxErrors.add("Errores de sintaxis severos detectados, revisa municiosamente el codigo");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= header type_b const_b var_b functions_b procedure_b main 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<TypeDefAst> lt = (List<TypeDefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
            TypeTable typeTable = genTypeTab.generateTable(true, lt);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= PROGRAM ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // var_type ::= INTEGER 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.IntegerPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var_type ::= REAL 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.RealPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // var_type ::= LONGINT 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Label(
                            PrimitiveType.LongintPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_type ::= BOOLEAN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.BooleanPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_type ::= CHAR 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.CharPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_type ::= STRING 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.StringPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_type ::= ID 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            t, 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // id_list ::= id_list COMA ID 
            {
              List<Label> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l.add(new Label(i, new Position(ileft, iright)));
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // id_list ::= ID 
            {
              List<Label> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        List<Label> list = new ArrayList<>();
                        list.add(new Label(i, new Position(ileft, iright)));
                        RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // range ::= expression DOT DOT DOT expression 
            {
              Range RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Range(e1, e2);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arr_range ::= CORCHETE_L expression DOT DOT expression CORCHETE_R 
            {
              Range RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                         RESULT = new Range(e1, e2);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr_range",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // record_b ::= def_record more_records 
            {
              List<TypeDefAst> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeDefAst d = (TypeDefAst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<TypeDefAst> l = (List<TypeDefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l.add(0, d);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_b",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def_record ::= ID COLON var_type SEMICOLON 
            {
              TypeDefAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new TypeDefinition(new Label(i, new Position(ileft, iright)), t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_record",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // def_record ::= ID COLON PACKED ARRAY arr_range OF var_type SEMICOLON 
            {
              TypeDefAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new ArrayDef(new Label(i, new Position(ileft, iright)), t, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_record",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // more_records ::= def_record more_records 
            {
              List<TypeDefAst> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeDefAst d = (TypeDefAst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<TypeDefAst> l = (List<TypeDefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l.add(0, d);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_records",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // more_records ::= 
            {
              List<TypeDefAst> RESULT =null;
		
                        RESULT = new LinkedList<TypeDefAst>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_records",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression_list ::= expression_list COMA expression 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l.add(e);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression_list ::= expression 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        LinkedList<Expression> list = new LinkedList<Expression>();
                        list.add(e);
                        RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type_b ::= TYPE list_typedec 
            {
              List<TypeDefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<TypeDefAst> l = (List<TypeDefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_b",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_b ::= 
            {
              List<TypeDefAst> RESULT =null;
		
                        RESULT = new ArrayList<TypeDefAst>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_b",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // list_typedec ::= type_dec list_typedec 
            {
              List<TypeDefAst> RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<TypeDefAst> l1 = (List<TypeDefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<TypeDefAst> l2 = (List<TypeDefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l1.addAll(l2);
                        RESULT = l1;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_typedec",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // list_typedec ::= type_dec 
            {
              List<TypeDefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<TypeDefAst> l = (List<TypeDefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_typedec",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type_dec ::= id_list EQUALS var_type SEMICOLON 
            {
              List<TypeDefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.userDef(l, t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_dec ::= id_list EQUALS range SEMICOLON 
            {
              List<TypeDefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.rangeDef(l, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_dec ::= id_list EQUALS ARRAY arr_range OF var_type SEMICOLON 
            {
              List<TypeDefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.arrayDef(l, t, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_dec ::= id_list EQUALS RECORD record_b END SEMICOLON 
            {
              List<TypeDefAst> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Label> ids = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<TypeDefAst> l = (List<TypeDefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = genTypeTab.recordDef(ids, l);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // const_b ::= CONST list_constdec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_b",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // const_b ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_b",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // list_constdec ::= const_dec list_constdec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_constdec",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // list_constdec ::= const_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_constdec",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // const_dec ::= const_dec ID EQUALS expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_dec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var_b ::= VAR list_vardec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_b",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var_b ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_b",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // list_vardec ::= list_vardec var_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // list_vardec ::= var_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var_dec ::= id_list COLON var_type SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var_dec ::= id_list COLON range SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var_dec ::= id_list COLON ARRAY arr_range OF var_type SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // var_dec ::= id_list EQUALS RECORD record_b END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.And, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression AND THEN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.AndThen, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Or, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression OR ELSE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.OrElse, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= NOT expression 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Not,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= bool_exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bool_exp ::= arit_exp EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.EqualsTo, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bool_exp ::= arit_exp DIFFERENT arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.DifferentTo, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bool_exp ::= arit_exp GRATER arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.GraterThan, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bool_exp ::= arit_exp LESS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.LessThan, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bool_exp ::= arit_exp GRATER_EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.GraterEq, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bool_exp ::= arit_exp LESS_EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.LessEq, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bool_exp ::= arit_exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arit_exp ::= arit_exp PLUS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Addition, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arit_exp ::= arit_exp MINUS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Substraction, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arit_exp ::= arit_exp TIMES arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Multiplication, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arit_exp ::= arit_exp DIV arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.IntDivision, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arit_exp ::= arit_exp BARRA arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Division, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arit_exp ::= arit_exp MOD arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Module, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arit_exp ::= literals 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arit_exp ::= ID CORCHETE_L arit_exp CORCHETE_R 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new VectorUse(
                            i, e, new Position(ileft, iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arit_exp ::= ID DOT list_access 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l.add(0, new Label(i, new Position(ileft, iright)));
                        RESULT = new RecordUse(l);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arit_exp ::= ID PARENTESIS_L expression_list PARENTESIS_R 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new FunctionUse(
                            i, l, new Position(ileft, iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arit_exp ::= ID 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            i, new Position(ileft,iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arit_exp ::= PARENTESIS_L expression PARENTESIS_R 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arit_exp ::= PLUS arit_exp 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Addition,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arit_exp ::= MINUS arit_exp 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Substraction,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // list_access ::= list_access DOT ID 
            {
              List<Label> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l.add(new Label(i, new Position(ileft, iright)));
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_access",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // list_access ::= ID 
            {
              List<Label> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        ArrayList<Label> access = new ArrayList<>();
                        access.add(new Label(i, new Position(ileft, iright)));
                        RESULT = access;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_access",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // literals ::= BOOLEAN_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.BooleanPT, 
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // literals ::= INTEGER_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.IntegerPT, 
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // literals ::= REAL_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.RealPT, 
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // literals ::= CHAR_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.CharPT, 
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // literals ::= STRING_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.StringPT, 
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // conditional ::= if_stmt pos_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // if_stmt ::= IF PARENTESIS_L expression PARENTESIS_R THEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // pos_if ::= simple_stmt elif_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_if",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // pos_if ::= simple_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_if",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // pos_if ::= complex_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_if",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // pos_if ::= BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_if",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // pos_if ::= BEGIN block_stmt END elif_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_if",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // elif_stmt ::= elif_stmt ELSE IF PARENTESIS_L expression PARENTESIS_R THEN pos_elif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // elif_stmt ::= ELSE IF PARENTESIS_L expression PARENTESIS_R THEN pos_elif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // elif_stmt ::= else_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // pos_elif ::= simple_stmt else_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_elif",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // pos_elif ::= simple_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_elif",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // pos_elif ::= BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_elif",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // pos_elif ::= BEGIN block_stmt END else_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_elif",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // else_stmt ::= ELSE statements_wc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // else_stmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // statements_wc ::= simple_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_wc",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // statements_wc ::= BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_wc",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // case_stmt ::= CASE PARENTESIS_L expression PARENTESIS_R OF case_block ELSE single_stm END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // case_block ::= labels COLON single_stm SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_block",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // labels ::= labels COMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // labels ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // single_stm ::= ID ASSIGNATION expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_stm",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // single_stm ::= ID PARENTESIS_L expression_list PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_stm",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // single_stm ::= ID DOT ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_stm",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // single_stm ::= definite_fun 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_stm",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // while_stmt ::= WHILE PARENTESIS_L expression PARENTESIS_R DO statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // for_stmt ::= FOR ID ASSIGNATION expression TO expression DO statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // repeat_stmt ::= REPEAT statements UNTIL expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // statements ::= simple_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // statements ::= simple_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // statements ::= complex_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // statements ::= BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // block_stmt ::= list_stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // block_stmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // list_stmts ::= simple_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // list_stmts ::= simple_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // list_stmts ::= complex_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // list_stmts ::= simple_stmt SEMICOLON more_stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // list_stmts ::= complex_stmt more_stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // more_stmts ::= simple_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // more_stmts ::= simple_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // more_stmts ::= simple_stmt SEMICOLON more_stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // more_stmts ::= complex_stmt more_stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // more_stmts ::= complex_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // simple_stmt ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // simple_stmt ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // simple_stmt ::= ID ASSIGNATION expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // simple_stmt ::= ID PARENTESIS_L expression_list PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // simple_stmt ::= ID DOT ID ASSIGNATION expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // simple_stmt ::= definite_fun 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // complex_stmt ::= conditional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // complex_stmt ::= case_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // complex_stmt ::= while_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // complex_stmt ::= for_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // complex_stmt ::= repeat_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // functions_b ::= functions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_b",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // functions_b ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_b",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // functions ::= functions function_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // function_dec ::= function_dec FUNCTION ID PARENTESIS_L arguments PARENTESIS_R COLON var_type SEMICOLON var_b BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_dec",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // procedure_b ::= procedures 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_b",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // procedure_b ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_b",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // procedures ::= procedures procedure_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // procedures ::= procedure_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // procedure_dec ::= PROCEDURE ID PARENTESIS_L arguments PARENTESIS_R SEMICOLON var_b BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_dec",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // arguments ::= arguments COMA type_arg 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // arguments ::= type_arg 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // arguments ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // type_arg ::= VAR id_list COLON var_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arg",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // type_arg ::= id_list COLON var_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arg",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // main ::= BEGIN block_stmt END DOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // definite_fun ::= writefn 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definite_fun",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // definite_fun ::= readfn 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definite_fun",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // writefn ::= WRITELN PARENTESIS_L expression_list PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writefn",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // readfn ::= READLN PARENTESIS_L expression_list PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readfn",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
