
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compi2.pascal.valitations.analysis;

import java_cup.runtime.*;
import java.util.*;
import compi2.pascal.valitations.analysis.typet.PrimitiveType;
import compi2.pascal.valitations.analysis.typet.TypeTable;
import compi2.pascal.valitations.analyzator.GenTypeTab;
import compi2.pascal.valitations.semantic.obj.Label;
import compi2.pascal.valitations.semantic.obj.TypeDefinition;
import compi2.pascal.valitations.util.Position;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\221\000\002\002\004\000\002\002\011\000\002\003" +
    "\005\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\066\005\000\002\066\003\000\002\004\007\000\002" +
    "\005\010\000\002\006\004\000\002\063\006\000\002\063" +
    "\012\000\002\064\004\000\002\064\002\000\002\007\005" +
    "\000\002\007\003\000\002\070\004\000\002\070\002\000" +
    "\002\071\004\000\002\071\003\000\002\072\006\000\002" +
    "\072\006\000\002\072\011\000\002\072\010\000\002\010" +
    "\004\000\002\010\002\000\002\065\004\000\002\065\003" +
    "\000\002\011\007\000\002\012\004\000\002\012\002\000" +
    "\002\062\004\000\002\062\003\000\002\013\006\000\002" +
    "\013\006\000\002\013\011\000\002\013\010\000\002\014" +
    "\005\000\002\014\006\000\002\014\005\000\002\014\006" +
    "\000\002\014\005\000\002\014\003\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\003\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\003\000\002\016\006\000" +
    "\002\016\005\000\002\016\006\000\002\016\003\000\002" +
    "\016\005\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\020\004" +
    "\000\002\021\007\000\002\024\004\000\002\024\004\000" +
    "\002\024\003\000\002\024\006\000\002\024\006\000\002" +
    "\022\012\000\002\022\011\000\002\022\003\000\002\025" +
    "\004\000\002\025\004\000\002\025\006\000\002\025\006" +
    "\000\002\023\004\000\002\023\002\000\002\026\004\000" +
    "\002\026\006\000\002\027\014\000\002\030\006\000\002" +
    "\031\005\000\002\031\003\000\002\032\005\000\002\032" +
    "\006\000\002\032\005\000\002\032\003\000\002\033\010" +
    "\000\002\034\012\000\002\035\007\000\002\036\003\000" +
    "\002\036\004\000\002\036\003\000\002\036\006\000\002" +
    "\037\003\000\002\037\002\000\002\055\003\000\002\055" +
    "\004\000\002\055\003\000\002\055\005\000\002\055\004" +
    "\000\002\056\003\000\002\056\004\000\002\056\005\000" +
    "\002\056\004\000\002\056\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\005\000\002\057\006\000\002\057" +
    "\007\000\002\057\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\041\003\000\002\041\002\000\002\042\004\000\002" +
    "\043\020\000\002\044\003\000\002\044\002\000\002\045" +
    "\004\000\002\045\003\000\002\046\015\000\002\047\005" +
    "\000\002\047\003\000\002\047\002\000\002\050\006\000" +
    "\002\050\005\000\002\051\006\000\002\052\003\000\002" +
    "\052\003\000\002\053\006\000\002\054\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014b\000\004\062\006\001\002\000\004\002\u014d\001" +
    "\002\000\014\034\uffec\036\uffec\061\uffec\070\012\072\uffec" +
    "\001\002\000\004\116\007\001\002\000\004\030\010\001" +
    "\002\000\014\034\uffff\036\uffff\061\uffff\070\uffff\072\uffff" +
    "\001\002\000\012\034\uffe4\036\164\061\uffe4\072\uffe4\001" +
    "\002\000\004\116\013\001\002\000\012\013\ufff7\017\ufff7" +
    "\026\ufff7\031\ufff7\001\002\000\014\034\uffea\036\uffea\061" +
    "\uffea\072\uffea\116\013\001\002\000\006\017\020\026\017" +
    "\001\002\000\012\034\uffed\036\uffed\061\uffed\072\uffed\001" +
    "\002\000\004\116\162\001\002\000\036\012\034\033\044" +
    "\063\037\075\041\076\042\077\031\100\024\101\033\102" +
    "\040\103\021\104\027\105\023\106\043\116\026\001\002" +
    "\000\110\004\uffc0\005\uffc0\006\uffc0\013\uffc0\015\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\035\uffc0\037\uffc0\040" +
    "\uffc0\042\uffc0\043\uffc0\045\uffc0\050\uffc0\053\uffc0\055\uffc0" +
    "\057\uffc0\064\uffc0\067\uffc0\071\uffc0\073\uffc0\107\uffc0\110" +
    "\uffc0\112\uffc0\113\uffc0\116\uffc0\001\002\000\062\013\uffd3" +
    "\015\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\035" +
    "\uffd3\040\uffd3\042\uffd3\043\uffd3\045\uffd3\050\uffd3\055\uffd3" +
    "\057\uffd3\064\uffd3\067\uffd3\071\uffd3\073\uffd3\107\uffd3\110" +
    "\uffd3\112\uffd3\113\uffd3\116\uffd3\001\002\000\110\004\uffbc" +
    "\005\uffbc\006\uffbc\013\uffbc\015\uffbc\017\uffbc\020\uffbc\021" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\035\uffbc\037\uffbc\040\uffbc\042\uffbc\043" +
    "\uffbc\045\uffbc\050\uffbc\053\uffbc\055\uffbc\057\uffbc\064\uffbc" +
    "\067\uffbc\071\uffbc\073\uffbc\107\uffbc\110\uffbc\112\uffbc\113" +
    "\uffbc\116\uffbc\001\002\000\010\013\ufffb\026\ufffb\030\ufffb" +
    "\001\002\000\110\004\uffc6\005\uffc6\006\uffc6\013\uffc6\015" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\035\uffc6\037" +
    "\uffc6\040\uffc6\042\uffc6\043\uffc6\045\uffc6\050\uffc6\053\uffc6" +
    "\055\uffc6\057\uffc6\064\uffc6\067\uffc6\071\uffc6\073\uffc6\107" +
    "\uffc6\110\uffc6\112\uffc6\113\uffc6\116\uffc6\001\002\000\046" +
    "\004\uffc2\005\uffc2\006\uffc2\012\051\014\053\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\027\uffc2\030\ufff9" +
    "\032\uffc2\037\uffc2\053\uffc2\055\uffc2\057\uffc2\001\002\000" +
    "\110\004\uffbe\005\uffbe\006\uffbe\013\uffbe\015\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\035\uffbe\037\uffbe\040\uffbe" +
    "\042\uffbe\043\uffbe\045\uffbe\050\uffbe\053\uffbe\055\uffbe\057" +
    "\uffbe\064\uffbe\067\uffbe\071\uffbe\073\uffbe\107\uffbe\110\uffbe" +
    "\112\uffbe\113\uffbe\116\uffbe\001\002\000\004\030\161\001" +
    "\002\000\010\013\ufffc\026\ufffc\030\ufffc\001\002\000\110" +
    "\004\057\005\060\006\062\013\uffcc\015\uffcc\017\151\020" +
    "\147\021\146\022\150\023\145\024\152\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\035\uffcc\037\061\040\uffcc\042" +
    "\uffcc\043\uffcc\045\uffcc\050\uffcc\053\055\055\uffcc\057\uffcc" +
    "\064\uffcc\067\uffcc\071\uffcc\073\uffcc\107\uffcc\110\uffcc\112" +
    "\uffcc\113\uffcc\116\uffcc\001\002\000\010\013\ufffa\026\ufffa" +
    "\030\ufffa\001\002\000\020\012\034\102\040\103\021\104" +
    "\027\105\023\106\043\116\050\001\002\000\012\027\137" +
    "\032\073\055\074\057\075\001\002\000\004\030\136\001" +
    "\002\000\004\116\115\001\002\000\110\004\uffbf\005\uffbf" +
    "\006\uffbf\013\uffbf\015\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\035\uffbf\037\uffbf\040\uffbf\042\uffbf\043\uffbf\045" +
    "\uffbf\050\uffbf\053\uffbf\055\uffbf\057\uffbf\064\uffbf\067\uffbf" +
    "\071\uffbf\073\uffbf\107\uffbf\110\uffbf\112\uffbf\113\uffbf\116" +
    "\uffbf\001\002\000\010\013\ufffe\026\ufffe\030\ufffe\001\002" +
    "\000\010\013\ufffd\026\ufffd\030\ufffd\001\002\000\110\004" +
    "\uffbd\005\uffbd\006\uffbd\013\uffbd\015\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\024\uffbd\026\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\035\uffbd\037\uffbd\040\uffbd\042\uffbd" +
    "\043\uffbd\045\uffbd\050\uffbd\053\uffbd\055\uffbd\057\uffbd\064" +
    "\uffbd\067\uffbd\071\uffbd\073\uffbd\107\uffbd\110\uffbd\112\uffbd" +
    "\113\uffbd\116\uffbd\001\002\000\004\014\046\001\002\000" +
    "\004\056\111\001\002\000\020\012\034\102\040\103\021" +
    "\104\027\105\023\106\043\116\050\001\002\000\012\027" +
    "\076\032\073\055\074\057\075\001\002\000\114\004\uffc2" +
    "\005\uffc2\006\uffc2\012\051\013\uffc2\014\053\015\uffc2\017" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2" +
    "\027\uffc2\030\uffc2\031\uffc2\032\uffc2\035\uffc2\037\uffc2\040" +
    "\uffc2\042\uffc2\043\uffc2\045\uffc2\050\uffc2\053\uffc2\055\uffc2" +
    "\057\uffc2\064\uffc2\067\uffc2\071\uffc2\073\uffc2\107\uffc2\110" +
    "\uffc2\112\uffc2\113\uffc2\116\uffc2\001\002\000\004\116\013" +
    "\001\002\000\004\116\070\001\002\000\020\012\034\102" +
    "\040\103\021\104\027\105\023\106\043\116\050\001\002" +
    "\000\016\004\057\005\060\006\062\015\056\037\061\053" +
    "\055\001\002\000\020\012\034\102\040\103\021\104\027" +
    "\105\023\106\043\116\050\001\002\000\110\004\uffc5\005" +
    "\uffc5\006\uffc5\013\uffc5\015\uffc5\017\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\035\uffc5\037\uffc5\040\uffc5\042\uffc5\043\uffc5" +
    "\045\uffc5\050\uffc5\053\uffc5\055\uffc5\057\uffc5\064\uffc5\067" +
    "\uffc5\071\uffc5\073\uffc5\107\uffc5\110\uffc5\112\uffc5\113\uffc5" +
    "\116\uffc5\001\002\000\020\012\034\102\040\103\021\104" +
    "\027\105\023\106\043\116\050\001\002\000\020\012\034" +
    "\102\040\103\021\104\027\105\023\106\043\116\050\001" +
    "\002\000\020\012\034\102\040\103\021\104\027\105\023" +
    "\106\043\116\050\001\002\000\020\012\034\102\040\103" +
    "\021\104\027\105\023\106\043\116\050\001\002\000\110" +
    "\004\uffc9\005\uffc9\006\uffc9\013\uffc9\015\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\026\uffc9\027\uffc9" +
    "\030\uffc9\031\uffc9\032\uffc9\035\uffc9\037\uffc9\040\uffc9\042" +
    "\uffc9\043\uffc9\045\uffc9\050\uffc9\053\uffc9\055\uffc9\057\uffc9" +
    "\064\uffc9\067\uffc9\071\uffc9\073\uffc9\107\uffc9\110\uffc9\112" +
    "\uffc9\113\uffc9\116\uffc9\001\002\000\110\004\uffc8\005\uffc8" +
    "\006\uffc8\013\uffc8\015\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\035\uffc8\037\uffc8\040\uffc8\042\uffc8\043\uffc8\045" +
    "\uffc8\050\uffc8\053\uffc8\055\uffc8\057\uffc8\064\uffc8\067\uffc8" +
    "\071\uffc8\073\uffc8\107\uffc8\110\uffc8\112\uffc8\113\uffc8\116" +
    "\uffc8\001\002\000\110\004\uffca\005\uffca\006\062\013\uffca" +
    "\015\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\035\uffca" +
    "\037\061\040\uffca\042\uffca\043\uffca\045\uffca\050\uffca\053" +
    "\055\055\uffca\057\uffca\064\uffca\067\uffca\071\uffca\073\uffca" +
    "\107\uffca\110\uffca\112\uffca\113\uffca\116\uffca\001\002\000" +
    "\110\004\uffcb\005\uffcb\006\062\013\uffcb\015\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\035\uffcb\037\061\040\uffcb" +
    "\042\uffcb\043\uffcb\045\uffcb\050\uffcb\053\055\055\uffcb\057" +
    "\uffcb\064\uffcb\067\uffcb\071\uffcb\073\uffcb\107\uffcb\110\uffcb" +
    "\112\uffcb\113\uffcb\116\uffcb\001\002\000\110\004\uffc7\005" +
    "\uffc7\006\uffc7\013\uffc7\015\uffc7\017\uffc7\020\uffc7\021\uffc7" +
    "\022\uffc7\023\uffc7\024\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\035\uffc7\037\uffc7\040\uffc7\042\uffc7\043\uffc7" +
    "\045\uffc7\050\uffc7\053\uffc7\055\uffc7\057\uffc7\064\uffc7\067" +
    "\uffc7\071\uffc7\073\uffc7\107\uffc7\110\uffc7\112\uffc7\113\uffc7" +
    "\116\uffc7\001\002\000\110\004\uffc4\005\uffc4\006\uffc4\013" +
    "\uffc4\015\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\035" +
    "\uffc4\037\uffc4\040\uffc4\042\uffc4\043\uffc4\045\uffc4\050\uffc4" +
    "\053\uffc4\055\uffc4\057\uffc4\064\uffc4\067\uffc4\071\uffc4\073" +
    "\uffc4\107\uffc4\110\uffc4\112\uffc4\113\uffc4\116\uffc4\001\002" +
    "\000\006\013\072\026\017\001\002\000\110\004\uffc3\005" +
    "\uffc3\006\uffc3\013\uffc3\015\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\035\uffc3\037\uffc3\040\uffc3\042\uffc3\043\uffc3" +
    "\045\uffc3\050\uffc3\053\uffc3\055\uffc3\057\uffc3\064\uffc3\067" +
    "\uffc3\071\uffc3\073\uffc3\107\uffc3\110\uffc3\112\uffc3\113\uffc3" +
    "\116\uffc3\001\002\000\022\012\034\066\106\102\040\103" +
    "\021\104\027\105\023\106\043\116\050\001\002\000\020" +
    "\012\034\102\040\103\021\104\027\105\023\106\043\116" +
    "\050\001\002\000\022\012\034\042\102\102\040\103\021" +
    "\104\027\105\023\106\043\116\050\001\002\000\004\027" +
    "\077\001\002\000\020\012\034\102\040\103\021\104\027" +
    "\105\023\106\043\116\050\001\002\000\012\015\101\032" +
    "\073\055\074\057\075\001\002\000\004\056\ufff5\001\002" +
    "\000\020\012\034\102\040\103\021\104\027\105\023\106" +
    "\043\116\050\001\002\000\062\013\uffd6\015\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\073\035\uffd6\040\uffd6\042" +
    "\uffd6\043\uffd6\045\uffd6\050\uffd6\055\074\057\uffd6\064\uffd6" +
    "\067\uffd6\071\uffd6\073\uffd6\107\uffd6\110\uffd6\112\uffd6\113" +
    "\uffd6\116\uffd6\001\002\000\062\013\uffd5\015\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\073\035\uffd5\040\uffd5\042" +
    "\uffd5\043\uffd5\045\uffd5\050\uffd5\055\074\057\075\064\uffd5" +
    "\067\uffd5\071\uffd5\073\uffd5\107\uffd5\110\uffd5\112\uffd5\113" +
    "\uffd5\116\uffd5\001\002\000\062\013\uffd4\015\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\035\uffd4\040\uffd4\042" +
    "\uffd4\043\uffd4\045\uffd4\050\uffd4\055\uffd4\057\uffd4\064\uffd4" +
    "\067\uffd4\071\uffd4\073\uffd4\107\uffd4\110\uffd4\112\uffd4\113" +
    "\uffd4\116\uffd4\001\002\000\020\012\034\102\040\103\021" +
    "\104\027\105\023\106\043\116\050\001\002\000\062\013" +
    "\uffd8\015\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\035\uffd8\040\uffd8\042\uffd8\043\uffd8\045\uffd8\050\uffd8\055" +
    "\074\057\uffd8\064\uffd8\067\uffd8\071\uffd8\073\uffd8\107\uffd8" +
    "\110\uffd8\112\uffd8\113\uffd8\116\uffd8\001\002\000\062\013" +
    "\uffd7\015\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\073" +
    "\035\uffd7\040\uffd7\042\uffd7\043\uffd7\045\uffd7\050\uffd7\055" +
    "\074\057\075\064\uffd7\067\uffd7\071\uffd7\073\uffd7\107\uffd7" +
    "\110\uffd7\112\uffd7\113\uffd7\116\uffd7\001\002\000\016\075" +
    "\041\076\042\077\031\100\024\101\033\116\113\001\002" +
    "\000\004\030\114\001\002\000\010\013\ufff9\026\ufff9\030" +
    "\ufff9\001\002\000\014\034\uffe7\036\uffe7\061\uffe7\072\uffe7" +
    "\116\uffe7\001\002\000\004\031\125\001\002\000\006\043" +
    "\ufff0\116\115\001\002\000\004\043\120\001\002\000\004" +
    "\030\121\001\002\000\014\034\uffe6\036\uffe6\061\uffe6\072" +
    "\uffe6\116\uffe6\001\002\000\006\043\ufff0\116\115\001\002" +
    "\000\004\043\ufff4\001\002\000\004\043\ufff1\001\002\000" +
    "\020\060\127\075\041\076\042\077\031\100\024\101\033" +
    "\116\113\001\002\000\004\030\135\001\002\000\004\033" +
    "\130\001\002\000\004\014\046\001\002\000\004\056\132" +
    "\001\002\000\016\075\041\076\042\077\031\100\024\101" +
    "\033\116\113\001\002\000\004\030\134\001\002\000\006" +
    "\043\ufff2\116\ufff2\001\002\000\006\043\ufff3\116\ufff3\001" +
    "\002\000\014\034\uffe8\036\uffe8\061\uffe8\072\uffe8\116\uffe8" +
    "\001\002\000\004\027\140\001\002\000\004\027\141\001" +
    "\002\000\020\012\034\102\040\103\021\104\027\105\023" +
    "\106\043\116\050\001\002\000\012\030\ufff6\032\073\055" +
    "\074\057\075\001\002\000\012\013\144\032\073\055\074" +
    "\057\075\001\002\000\110\004\uffc1\005\uffc1\006\uffc1\013" +
    "\uffc1\015\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\024\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\035" +
    "\uffc1\037\uffc1\040\uffc1\042\uffc1\043\uffc1\045\uffc1\050\uffc1" +
    "\053\uffc1\055\uffc1\057\uffc1\064\uffc1\067\uffc1\071\uffc1\073" +
    "\uffc1\107\uffc1\110\uffc1\112\uffc1\113\uffc1\116\uffc1\001\002" +
    "\000\020\012\034\102\040\103\021\104\027\105\023\106" +
    "\043\116\050\001\002\000\020\012\034\102\040\103\021" +
    "\104\027\105\023\106\043\116\050\001\002\000\020\012" +
    "\034\102\040\103\021\104\027\105\023\106\043\116\050" +
    "\001\002\000\020\012\034\102\040\103\021\104\027\105" +
    "\023\106\043\116\050\001\002\000\020\012\034\102\040" +
    "\103\021\104\027\105\023\106\043\116\050\001\002\000" +
    "\020\012\034\102\040\103\021\104\027\105\023\106\043" +
    "\116\050\001\002\000\074\004\057\005\060\006\062\013" +
    "\uffcd\015\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\035\uffcd\037\061\040\uffcd\042\uffcd\043\uffcd\045\uffcd\050" +
    "\uffcd\053\055\055\uffcd\057\uffcd\064\uffcd\067\uffcd\071\uffcd" +
    "\073\uffcd\107\uffcd\110\uffcd\112\uffcd\113\uffcd\116\uffcd\001" +
    "\002\000\074\004\057\005\060\006\062\013\uffd2\015\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\035\uffd2\037" +
    "\061\040\uffd2\042\uffd2\043\uffd2\045\uffd2\050\uffd2\053\055" +
    "\055\uffd2\057\uffd2\064\uffd2\067\uffd2\071\uffd2\073\uffd2\107" +
    "\uffd2\110\uffd2\112\uffd2\113\uffd2\116\uffd2\001\002\000\074" +
    "\004\057\005\060\006\062\013\uffcf\015\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\035\uffcf\037\061\040\uffcf" +
    "\042\uffcf\043\uffcf\045\uffcf\050\uffcf\053\055\055\uffcf\057" +
    "\uffcf\064\uffcf\067\uffcf\071\uffcf\073\uffcf\107\uffcf\110\uffcf" +
    "\112\uffcf\113\uffcf\116\uffcf\001\002\000\074\004\057\005" +
    "\060\006\062\013\uffd1\015\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\035\uffd1\037\061\040\uffd1\042\uffd1\043" +
    "\uffd1\045\uffd1\050\uffd1\053\055\055\uffd1\057\uffd1\064\uffd1" +
    "\067\uffd1\071\uffd1\073\uffd1\107\uffd1\110\uffd1\112\uffd1\113" +
    "\uffd1\116\uffd1\001\002\000\074\004\057\005\060\006\062" +
    "\013\uffd0\015\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\035\uffd0\037\061\040\uffd0\042\uffd0\043\uffd0\045\uffd0" +
    "\050\uffd0\053\055\055\uffd0\057\uffd0\064\uffd0\067\uffd0\071" +
    "\uffd0\073\uffd0\107\uffd0\110\uffd0\112\uffd0\113\uffd0\116\uffd0" +
    "\001\002\000\074\004\057\005\060\006\062\013\uffce\015" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\035\uffce" +
    "\037\061\040\uffce\042\uffce\043\uffce\045\uffce\050\uffce\053" +
    "\055\055\uffce\057\uffce\064\uffce\067\uffce\071\uffce\073\uffce" +
    "\107\uffce\110\uffce\112\uffce\113\uffce\116\uffce\001\002\000" +
    "\014\034\uffe9\036\uffe9\061\uffe9\072\uffe9\116\uffe9\001\002" +
    "\000\012\013\ufff8\017\ufff8\026\ufff8\031\ufff8\001\002\000" +
    "\012\034\uffeb\036\uffeb\061\uffeb\072\uffeb\001\002\000\002" +
    "\001\002\000\010\034\uffdf\061\uffdf\072\166\001\002\000" +
    "\004\116\013\001\002\000\006\034\uff82\061\uff82\001\002" +
    "\000\006\034\uff83\061\uff83\001\002\000\006\034\uff7e\061" +
    "\172\001\002\000\004\116\u0111\001\002\000\004\034\200" +
    "\001\002\000\006\034\uff7c\061\uff7c\001\002\000\006\034" +
    "\uff7f\061\172\001\002\000\006\034\uff7d\061\uff7d\001\002" +
    "\000\004\002\000\001\002\000\030\035\221\043\uff99\045" +
    "\225\050\212\064\226\073\206\107\207\110\227\112\216" +
    "\113\203\116\213\001\002\000\032\035\uff87\043\uff87\045" +
    "\uff87\050\uff87\064\uff87\071\uff87\073\uff87\107\uff87\110\uff87" +
    "\112\uff87\113\uff87\116\uff87\001\002\000\032\035\uff84\043" +
    "\uff84\045\uff84\050\uff84\064\uff84\071\uff84\073\uff84\107\uff84" +
    "\110\uff84\112\uff84\113\uff84\116\uff84\001\002\000\036\030" +
    "\uff8d\035\uff8d\042\uff8d\043\uff8d\045\uff8d\050\uff8d\064\uff8d" +
    "\071\uff8d\073\uff8d\107\uff8d\110\uff8d\112\uff8d\113\uff8d\116" +
    "\uff8d\001\002\000\032\035\uff86\043\uff86\045\uff86\050\uff86" +
    "\064\uff86\071\uff86\073\uff86\107\uff86\110\uff86\112\uff86\113" +
    "\uff86\116\uff86\001\002\000\036\030\uff74\035\uff74\042\uff74" +
    "\043\uff74\045\uff74\050\uff74\064\uff74\071\uff74\073\uff74\107" +
    "\uff74\110\uff74\112\uff74\113\uff74\116\uff74\001\002\000\004" +
    "\012\u010c\001\002\000\004\012\u0109\001\002\000\006\030" +
    "\u0107\043\uff98\001\002\000\004\043\uff9a\001\002\000\004" +
    "\012\u0103\001\002\000\010\012\372\025\373\027\374\001" +
    "\002\000\036\030\uff73\035\uff73\042\uff73\043\uff73\045\uff73" +
    "\050\uff73\064\uff73\071\uff73\073\uff73\107\uff73\110\uff73\112" +
    "\uff73\113\uff73\116\uff73\001\002\000\030\035\221\043\uff96" +
    "\045\225\050\212\064\226\073\206\107\207\110\227\112" +
    "\216\113\203\116\213\001\002\000\036\030\uff8e\035\uff8e" +
    "\042\uff8e\043\uff8e\045\uff8e\050\uff8e\064\uff8e\071\uff8e\073" +
    "\uff8e\107\uff8e\110\uff8e\112\uff8e\113\uff8e\116\uff8e\001\002" +
    "\000\036\030\uff89\035\uff89\042\uff89\043\uff89\045\uff89\050" +
    "\uff89\064\uff89\071\uff89\073\uff89\107\uff89\110\uff89\112\uff89" +
    "\113\uff89\116\uff89\001\002\000\032\035\uff88\043\uff88\045" +
    "\uff88\050\uff88\064\uff88\071\uff88\073\uff88\107\uff88\110\uff88" +
    "\112\uff88\113\uff88\116\uff88\001\002\000\004\012\333\001" +
    "\002\000\004\043\331\001\002\000\030\034\261\035\221" +
    "\045\225\050\212\064\226\073\206\107\207\110\227\112" +
    "\216\113\203\116\213\001\002\000\032\035\uff85\043\uff85" +
    "\045\uff85\050\uff85\064\uff85\071\uff85\073\uff85\107\uff85\110" +
    "\uff85\112\uff85\113\uff85\116\uff85\001\002\000\004\116\251" +
    "\001\002\000\030\034\237\035\221\045\225\050\212\064" +
    "\226\073\206\107\207\110\227\112\216\113\203\116\213" +
    "\001\002\000\004\012\230\001\002\000\020\012\034\102" +
    "\040\103\021\104\027\105\023\106\043\116\050\001\002" +
    "\000\014\013\uffee\026\uffee\032\073\055\074\057\075\001" +
    "\002\000\006\013\233\026\234\001\002\000\036\030\uff71" +
    "\035\uff71\042\uff71\043\uff71\045\uff71\050\uff71\064\uff71\071" +
    "\uff71\073\uff71\107\uff71\110\uff71\112\uff71\113\uff71\116\uff71" +
    "\001\002\000\020\012\034\102\040\103\021\104\027\105" +
    "\023\106\043\116\050\001\002\000\014\013\uffef\026\uffef" +
    "\032\073\055\074\057\075\001\002\000\034\030\250\035" +
    "\uff9e\043\uff9e\045\uff9e\050\uff9e\064\uff9e\071\uff9e\073\uff9e" +
    "\107\uff9e\110\uff9e\112\uff9e\113\uff9e\116\uff9e\001\002\000" +
    "\030\035\221\043\uff99\045\225\050\212\064\226\073\206" +
    "\107\207\110\227\112\216\113\203\116\213\001\002\000" +
    "\032\035\uff9c\043\uff9c\045\uff9c\050\uff9c\064\uff9c\071\uff9c" +
    "\073\uff9c\107\uff9c\110\uff9c\112\uff9c\113\uff9c\116\uff9c\001" +
    "\002\000\004\071\242\001\002\000\020\012\034\102\040" +
    "\103\021\104\027\105\023\106\043\116\050\001\002\000" +
    "\012\030\244\032\073\055\074\057\075\001\002\000\032" +
    "\035\uff9f\043\uff9f\045\uff9f\050\uff9f\064\uff9f\071\uff9f\073" +
    "\uff9f\107\uff9f\110\uff9f\112\uff9f\113\uff9f\116\uff9f\001\002" +
    "\000\004\043\246\001\002\000\004\030\247\001\002\000" +
    "\032\035\uff9b\043\uff9b\045\uff9b\050\uff9b\064\uff9b\071\uff9b" +
    "\073\uff9b\107\uff9b\110\uff9b\112\uff9b\113\uff9b\116\uff9b\001" +
    "\002\000\032\035\uff9d\043\uff9d\045\uff9d\050\uff9d\064\uff9d" +
    "\071\uff9d\073\uff9d\107\uff9d\110\uff9d\112\uff9d\113\uff9d\116" +
    "\uff9d\001\002\000\004\025\252\001\002\000\020\012\034" +
    "\102\040\103\021\104\027\105\023\106\043\116\050\001" +
    "\002\000\012\032\073\055\074\057\075\067\254\001\002" +
    "\000\020\012\034\102\040\103\021\104\027\105\023\106" +
    "\043\116\050\001\002\000\012\032\073\040\256\055\074" +
    "\057\075\001\002\000\030\034\237\035\221\045\225\050" +
    "\212\064\226\073\206\107\207\110\227\112\216\113\203" +
    "\116\213\001\002\000\032\035\uffa0\043\uffa0\045\uffa0\050" +
    "\uffa0\064\uffa0\071\uffa0\073\uffa0\107\uffa0\110\uffa0\112\uffa0" +
    "\113\uffa0\116\uffa0\001\002\000\036\030\327\035\uffac\042" +
    "\270\043\uffac\045\uffac\050\uffac\064\uffac\071\uffac\073\uffac" +
    "\107\uffac\110\uffac\112\uffac\113\uffac\116\uffac\001\002\000" +
    "\030\035\221\043\uff99\045\225\050\212\064\226\073\206" +
    "\107\207\110\227\112\216\113\203\116\213\001\002\000" +
    "\032\035\uffbb\043\uffbb\045\uffbb\050\uffbb\064\uffbb\071\uffbb" +
    "\073\uffbb\107\uffbb\110\uffbb\112\uffbb\113\uffbb\116\uffbb\001" +
    "\002\000\032\035\uffb7\043\uffb7\045\uffb7\050\uffb7\064\uffb7" +
    "\071\uffb7\073\uffb7\107\uffb7\110\uffb7\112\uffb7\113\uffb7\116" +
    "\uffb7\001\002\000\004\043\265\001\002\000\036\030\267" +
    "\035\uffac\042\270\043\uffac\045\uffac\050\uffac\064\uffac\071" +
    "\uffac\073\uffac\107\uffac\110\uffac\112\uffac\113\uffac\116\uffac" +
    "\001\002\000\034\035\uffb2\042\uffb2\043\uffb2\045\uffb2\050" +
    "\uffb2\064\uffb2\071\uffb2\073\uffb2\107\uffb2\110\uffb2\112\uffb2" +
    "\113\uffb2\116\uffb2\001\002\000\032\035\uffb6\043\uffb6\045" +
    "\uffb6\050\uffb6\064\uffb6\071\uffb6\073\uffb6\107\uffb6\110\uffb6" +
    "\112\uffb6\113\uffb6\116\uffb6\001\002\000\020\034\312\050" +
    "\321\107\207\110\227\112\216\113\203\116\213\001\002" +
    "\000\034\035\uffb5\042\272\043\uffb5\045\uffb5\050\uffb5\064" +
    "\uffb5\071\uffb5\073\uffb5\107\uffb5\110\uffb5\112\uffb5\113\uffb5" +
    "\116\uffb5\001\002\000\004\050\273\001\002\000\004\012" +
    "\274\001\002\000\020\012\034\102\040\103\021\104\027" +
    "\105\023\106\043\116\050\001\002\000\012\013\276\032" +
    "\073\055\074\057\075\001\002\000\004\066\277\001\002" +
    "\000\016\034\302\107\207\110\227\112\216\113\203\116" +
    "\213\001\002\000\034\035\uffb4\042\uffb4\043\uffb4\045\uffb4" +
    "\050\uffb4\064\uffb4\071\uffb4\073\uffb4\107\uffb4\110\uffb4\112" +
    "\uffb4\113\uffb4\116\uffb4\001\002\000\036\030\320\035\uffac" +
    "\042\307\043\uffac\045\uffac\050\uffac\064\uffac\071\uffac\073" +
    "\uffac\107\uffac\110\uffac\112\uffac\113\uffac\116\uffac\001\002" +
    "\000\030\035\221\043\uff99\045\225\050\212\064\226\073" +
    "\206\107\207\110\227\112\216\113\203\116\213\001\002" +
    "\000\004\043\304\001\002\000\036\030\306\035\uffac\042" +
    "\307\043\uffac\045\uffac\050\uffac\064\uffac\071\uffac\073\uffac" +
    "\107\uffac\110\uffac\112\uffac\113\uffac\116\uffac\001\002\000" +
    "\034\035\uffae\042\uffae\043\uffae\045\uffae\050\uffae\064\uffae" +
    "\071\uffae\073\uffae\107\uffae\110\uffae\112\uffae\113\uffae\116" +
    "\uffae\001\002\000\034\035\uffaf\042\uffaf\043\uffaf\045\uffaf" +
    "\050\uffaf\064\uffaf\071\uffaf\073\uffaf\107\uffaf\110\uffaf\112" +
    "\uffaf\113\uffaf\116\uffaf\001\002\000\016\034\312\107\207" +
    "\110\227\112\216\113\203\116\213\001\002\000\034\035" +
    "\uffad\042\uffad\043\uffad\045\uffad\050\uffad\064\uffad\071\uffad" +
    "\073\uffad\107\uffad\110\uffad\112\uffad\113\uffad\116\uffad\001" +
    "\002\000\004\030\316\001\002\000\030\035\221\043\uff99" +
    "\045\225\050\212\064\226\073\206\107\207\110\227\112" +
    "\216\113\203\116\213\001\002\000\004\043\314\001\002" +
    "\000\004\030\315\001\002\000\034\035\uffaa\042\uffaa\043" +
    "\uffaa\045\uffaa\050\uffaa\064\uffaa\071\uffaa\073\uffaa\107\uffaa" +
    "\110\uffaa\112\uffaa\113\uffaa\116\uffaa\001\002\000\034\035" +
    "\uffab\042\uffab\043\uffab\045\uffab\050\uffab\064\uffab\071\uffab" +
    "\073\uffab\107\uffab\110\uffab\112\uffab\113\uffab\116\uffab\001" +
    "\002\000\034\035\uffb1\042\uffb1\043\uffb1\045\uffb1\050\uffb1" +
    "\064\uffb1\071\uffb1\073\uffb1\107\uffb1\110\uffb1\112\uffb1\113" +
    "\uffb1\116\uffb1\001\002\000\034\035\uffb0\042\uffb0\043\uffb0" +
    "\045\uffb0\050\uffb0\064\uffb0\071\uffb0\073\uffb0\107\uffb0\110" +
    "\uffb0\112\uffb0\113\uffb0\116\uffb0\001\002\000\004\012\322" +
    "\001\002\000\020\012\034\102\040\103\021\104\027\105" +
    "\023\106\043\116\050\001\002\000\012\013\324\032\073" +
    "\055\074\057\075\001\002\000\004\066\325\001\002\000" +
    "\016\034\302\107\207\110\227\112\216\113\203\116\213" +
    "\001\002\000\034\035\uffb3\042\uffb3\043\uffb3\045\uffb3\050" +
    "\uffb3\064\uffb3\071\uffb3\073\uffb3\107\uffb3\110\uffb3\112\uffb3" +
    "\113\uffb3\116\uffb3\001\002\000\032\035\uffb8\043\uffb8\045" +
    "\uffb8\050\uffb8\064\uffb8\071\uffb8\073\uffb8\107\uffb8\110\uffb8" +
    "\112\uffb8\113\uffb8\116\uffb8\001\002\000\034\035\uffb9\042" +
    "\272\043\uffb9\045\uffb9\050\uffb9\064\uffb9\071\uffb9\073\uffb9" +
    "\107\uffb9\110\uffb9\112\uffb9\113\uffb9\116\uffb9\001\002\000" +
    "\004\027\332\001\002\000\004\002\uff75\001\002\000\020" +
    "\012\034\102\040\103\021\104\027\105\023\106\043\116" +
    "\050\001\002\000\012\013\335\032\073\055\074\057\075" +
    "\001\002\000\004\056\336\001\002\000\020\012\034\102" +
    "\040\103\021\104\027\105\023\106\043\116\050\001\002" +
    "\000\004\042\360\001\002\000\006\026\342\031\343\001" +
    "\002\000\014\026\uffa6\031\uffa6\032\073\055\074\057\075" +
    "\001\002\000\020\012\034\102\040\103\021\104\027\105" +
    "\023\106\043\116\050\001\002\000\010\107\207\110\227" +
    "\116\344\001\002\000\010\012\351\025\350\027\352\001" +
    "\002\000\006\030\uffa2\043\uffa2\001\002\000\004\030\347" +
    "\001\002\000\004\042\uffa8\001\002\000\020\012\034\102" +
    "\040\103\021\104\027\105\023\106\043\116\050\001\002" +
    "\000\020\012\034\102\040\103\021\104\027\105\023\106" +
    "\043\116\050\001\002\000\004\116\353\001\002\000\006" +
    "\030\uffa3\043\uffa3\001\002\000\006\013\355\026\234\001" +
    "\002\000\006\030\uffa4\043\uffa4\001\002\000\014\030\uffa5" +
    "\032\073\043\uffa5\055\074\057\075\001\002\000\014\026" +
    "\uffa7\031\uffa7\032\073\055\074\057\075\001\002\000\010" +
    "\107\207\110\227\116\344\001\002\000\004\043\362\001" +
    "\002\000\004\030\363\001\002\000\032\035\uffa9\043\uffa9" +
    "\045\uffa9\050\uffa9\064\uffa9\071\uffa9\073\uffa9\107\uffa9\110" +
    "\uffa9\112\uffa9\113\uffa9\116\uffa9\001\002\000\006\030\370" +
    "\043\uff93\001\002\000\030\035\221\043\uff8f\045\225\050" +
    "\212\064\226\073\206\107\207\110\227\112\216\113\203" +
    "\116\213\001\002\000\004\043\uff94\001\002\000\004\043" +
    "\uff90\001\002\000\030\035\221\043\uff92\045\225\050\212" +
    "\064\226\073\206\107\207\110\227\112\216\113\203\116" +
    "\213\001\002\000\004\043\uff91\001\002\000\020\012\034" +
    "\102\040\103\021\104\027\105\023\106\043\116\050\001" +
    "\002\000\020\012\034\102\040\103\021\104\027\105\023" +
    "\106\043\116\050\001\002\000\004\116\375\001\002\000" +
    "\004\025\376\001\002\000\020\012\034\102\040\103\021" +
    "\104\027\105\023\106\043\116\050\001\002\000\044\030" +
    "\uff8a\032\073\035\uff8a\042\uff8a\043\uff8a\045\uff8a\050\uff8a" +
    "\055\074\057\075\064\uff8a\071\uff8a\073\uff8a\107\uff8a\110" +
    "\uff8a\112\uff8a\113\uff8a\116\uff8a\001\002\000\044\030\uff8c" +
    "\032\073\035\uff8c\042\uff8c\043\uff8c\045\uff8c\050\uff8c\055" +
    "\074\057\075\064\uff8c\071\uff8c\073\uff8c\107\uff8c\110\uff8c" +
    "\112\uff8c\113\uff8c\116\uff8c\001\002\000\006\013\u0102\026" +
    "\234\001\002\000\036\030\uff8b\035\uff8b\042\uff8b\043\uff8b" +
    "\045\uff8b\050\uff8b\064\uff8b\071\uff8b\073\uff8b\107\uff8b\110" +
    "\uff8b\112\uff8b\113\uff8b\116\uff8b\001\002\000\020\012\034" +
    "\102\040\103\021\104\027\105\023\106\043\116\050\001" +
    "\002\000\012\013\u0105\032\073\055\074\057\075\001\002" +
    "\000\004\066\u0106\001\002\000\030\034\uffba\035\uffba\045" +
    "\uffba\050\uffba\064\uffba\073\uffba\107\uffba\110\uffba\112\uffba" +
    "\113\uffba\116\uffba\001\002\000\030\035\221\043\uff97\045" +
    "\225\050\212\064\226\073\206\107\207\110\227\112\216" +
    "\113\203\116\213\001\002\000\004\043\uff95\001\002\000" +
    "\020\012\034\102\040\103\021\104\027\105\023\106\043" +
    "\116\050\001\002\000\006\013\u010b\026\234\001\002\000" +
    "\036\030\uff72\035\uff72\042\uff72\043\uff72\045\uff72\050\uff72" +
    "\064\uff72\071\uff72\073\uff72\107\uff72\110\uff72\112\uff72\113" +
    "\uff72\116\uff72\001\002\000\020\012\034\102\040\103\021" +
    "\104\027\105\023\106\043\116\050\001\002\000\012\013" +
    "\u010e\032\073\055\074\057\075\001\002\000\004\040\u010f" +
    "\001\002\000\030\034\237\035\221\045\225\050\212\064" +
    "\226\073\206\107\207\110\227\112\216\113\203\116\213" +
    "\001\002\000\032\035\uffa1\043\uffa1\045\uffa1\050\uffa1\064" +
    "\uffa1\071\uffa1\073\uffa1\107\uffa1\110\uffa1\112\uffa1\113\uffa1" +
    "\116\uffa1\001\002\000\004\012\u0112\001\002\000\012\013" +
    "\uff78\026\uff78\072\u0113\116\013\001\002\000\004\116\013" +
    "\001\002\000\006\013\uff79\026\uff79\001\002\000\006\026" +
    "\017\031\u0120\001\002\000\006\013\u0117\026\u0118\001\002" +
    "\000\004\030\u011a\001\002\000\006\072\u0113\116\013\001" +
    "\002\000\006\013\uff7a\026\uff7a\001\002\000\006\034\uffdf" +
    "\072\166\001\002\000\004\034\u011c\001\002\000\030\035" +
    "\221\043\uff99\045\225\050\212\064\226\073\206\107\207" +
    "\110\227\112\216\113\203\116\213\001\002\000\004\043" +
    "\u011e\001\002\000\004\030\u011f\001\002\000\006\034\uff7b" +
    "\061\uff7b\001\002\000\016\075\041\076\042\077\031\100" +
    "\024\101\033\116\113\001\002\000\006\013\uff76\026\uff76" +
    "\001\002\000\006\026\017\031\u0123\001\002\000\016\075" +
    "\041\076\042\077\031\100\024\101\033\116\113\001\002" +
    "\000\006\013\uff77\026\uff77\001\002\000\010\034\uff81\046" +
    "\u0126\061\uff81\001\002\000\004\116\u0127\001\002\000\004" +
    "\012\u0128\001\002\000\012\013\uff78\026\uff78\072\u0113\116" +
    "\013\001\002\000\006\013\u012a\026\u0118\001\002\000\004" +
    "\031\u012b\001\002\000\016\075\041\076\042\077\031\100" +
    "\024\101\033\116\113\001\002\000\004\030\u012d\001\002" +
    "\000\006\034\uffdf\072\166\001\002\000\004\034\u012f\001" +
    "\002\000\030\035\221\043\uff99\045\225\050\212\064\226" +
    "\073\206\107\207\110\227\112\216\113\203\116\213\001" +
    "\002\000\004\043\u0131\001\002\000\004\030\u0132\001\002" +
    "\000\010\034\uff80\046\uff80\061\uff80\001\002\000\010\034" +
    "\uffe0\061\uffe0\116\013\001\002\000\010\017\u0136\026\017" +
    "\031\u0137\001\002\000\010\034\uffdd\061\uffdd\116\uffdd\001" +
    "\002\000\004\063\u0141\001\002\000\034\012\034\033\u013a" +
    "\075\041\076\042\077\031\100\024\101\033\102\040\103" +
    "\021\104\027\105\023\106\043\116\026\001\002\000\004" +
    "\030\u0140\001\002\000\004\030\u013f\001\002\000\004\014" +
    "\046\001\002\000\004\056\u013c\001\002\000\016\075\041" +
    "\076\042\077\031\100\024\101\033\116\113\001\002\000" +
    "\004\030\u013e\001\002\000\010\034\uffda\061\uffda\116\uffda" +
    "\001\002\000\010\034\uffdb\061\uffdb\116\uffdb\001\002\000" +
    "\010\034\uffdc\061\uffdc\116\uffdc\001\002\000\004\116\115" +
    "\001\002\000\004\043\u0143\001\002\000\004\030\u0144\001" +
    "\002\000\010\034\uffd9\061\uffd9\116\uffd9\001\002\000\010" +
    "\034\uffde\061\uffde\116\uffde\001\002\000\010\034\uffe5\061" +
    "\uffe5\072\uffe5\001\002\000\012\034\uffe2\061\uffe2\072\uffe2" +
    "\116\u0148\001\002\000\004\017\u014a\001\002\000\010\034" +
    "\uffe3\061\uffe3\072\uffe3\001\002\000\020\012\034\102\040" +
    "\103\021\104\027\105\023\106\043\116\050\001\002\000" +
    "\012\030\u014c\032\073\055\074\057\075\001\002\000\012" +
    "\034\uffe1\061\uffe1\072\uffe1\116\uffe1\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014b\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\070\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\164\001\001\000" +
    "\010\066\014\071\015\072\013\001\001\000\002\001\001" +
    "\000\010\066\014\071\162\072\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\004\035" +
    "\014\034\015\021\016\031\017\024\067\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\142\015\021\016\031\017" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\116\063\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\044" +
    "\001\001\000\002\001\001\000\012\014\046\015\021\016" +
    "\031\017\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\066\070\001\001\000\002\001\001\000\006\016" +
    "\053\017\024\001\001\000\002\001\001\000\006\016\066" +
    "\017\024\001\001\000\002\001\001\000\006\016\065\017" +
    "\024\001\001\000\006\016\064\017\024\001\001\000\006" +
    "\016\063\017\024\001\001\000\006\016\062\017\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\106\015\021" +
    "\016\031\017\024\001\001\000\012\014\104\015\021\016" +
    "\031\017\024\001\001\000\012\014\102\015\021\016\031" +
    "\017\024\001\001\000\002\001\001\000\012\014\077\015" +
    "\021\016\031\017\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\103\015\021\016\031\017\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\107\015\021\016\031\017\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\067\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\063\121\064\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\063" +
    "\121\064\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\067\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\130\001\001\000\002\001\001\000\004" +
    "\067\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\141\015\021\016\031\017\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\157\017\024\001\001\000\006\016\156\017" +
    "\024\001\001\000\006\016\155\017\024\001\001\000\006" +
    "\016\154\017\024\001\001\000\006\016\153\017\024\001" +
    "\001\000\006\016\152\017\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\u0146\065\u0145\001" +
    "\001\000\004\012\166\001\001\000\010\013\u0134\062\u0132" +
    "\066\u0133\001\001\000\006\041\170\042\167\001\001\000" +
    "\004\043\u0124\001\001\000\010\044\172\045\174\046\173" +
    "\001\001\000\002\001\001\000\004\051\176\001\001\000" +
    "\002\001\001\000\004\046\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\020\217\021\222\027\200\033" +
    "\203\034\223\035\201\037\221\052\216\053\204\054\213" +
    "\055\210\057\207\060\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\020\217\021\222\027\200\033" +
    "\203\034\223\035\201\052\216\053\204\054\213\056\365" +
    "\057\363\060\364\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\020\217\021\222\024\261\027\200\033\203\034" +
    "\223\035\201\052\216\053\204\054\213\057\257\060\262" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\020" +
    "\217\021\222\027\200\033\203\034\223\035\201\036\240" +
    "\052\216\053\204\054\213\057\235\060\237\001\001\000" +
    "\002\001\001\000\014\007\231\014\230\015\021\016\031" +
    "\017\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\234\015\021\016\031\017\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\020" +
    "\217\021\222\027\200\033\203\034\223\035\201\037\244" +
    "\052\216\053\204\054\213\055\210\057\207\060\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\014\242" +
    "\015\021\016\031\017\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\252\015\021\016\031\017\024\001\001\000\002\001\001" +
    "\000\012\014\254\015\021\016\031\017\024\001\001\000" +
    "\002\001\001\000\032\020\217\021\222\027\200\033\203" +
    "\034\223\035\201\036\256\052\216\053\204\054\213\057" +
    "\235\060\237\001\001\000\002\001\001\000\006\022\327" +
    "\023\265\001\001\000\034\020\217\021\222\027\200\033" +
    "\203\034\223\035\201\037\263\052\216\053\204\054\213" +
    "\055\210\057\207\060\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\270\023\265" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\026" +
    "\307\052\216\053\204\054\213\057\310\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\274\015\021\016\031\017\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\025\277\052\216\053\204\054" +
    "\213\057\300\001\001\000\002\001\001\000\004\023\316" +
    "\001\001\000\034\020\217\021\222\027\200\033\203\034" +
    "\223\035\201\037\302\052\216\053\204\054\213\055\210" +
    "\057\207\060\214\001\001\000\002\001\001\000\004\023" +
    "\304\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\026\307\052\216\053\204\054\213\057\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\020\217\021\222" +
    "\027\200\033\203\034\223\035\201\037\312\052\216\053" +
    "\204\054\213\055\210\057\207\060\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\322\015\021\016\031\017\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\025\325\052\216" +
    "\053\204\054\213\057\300\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\333\015\021\016\031\017\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\014\340" +
    "\015\021\016\031\017\024\030\336\031\337\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\356\015\021\016\031\017\024\001\001\000\012\032" +
    "\345\052\344\053\204\054\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\355\015\021\016\031\017\024\001\001\000\014" +
    "\007\353\014\230\015\021\016\031\017\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\032" +
    "\360\052\344\053\204\054\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\020\217\021\222\027\200\033\203\034\223\035\201" +
    "\052\216\053\204\054\213\056\366\057\363\060\364\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\020\217" +
    "\021\222\027\200\033\203\034\223\035\201\052\216\053" +
    "\204\054\213\056\370\057\363\060\364\001\001\000\002" +
    "\001\001\000\014\007\u0100\014\230\015\021\016\031\017" +
    "\024\001\001\000\012\014\377\015\021\016\031\017\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\376\015\021\016\031\017\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\u0103\015\021\016\031\017\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\020" +
    "\217\021\222\027\200\033\203\034\223\035\201\052\216" +
    "\053\204\054\213\056\u0107\057\363\060\364\001\001\000" +
    "\002\001\001\000\014\007\u0109\014\230\015\021\016\031" +
    "\017\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\u010c\015\021\016\031\017\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\020\217\021\222\027" +
    "\200\033\203\034\223\035\201\036\u010f\052\216\053\204" +
    "\054\213\057\235\060\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\047\u0115\050\u0113\066\u0114\001\001" +
    "\000\004\066\u0121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\050\u0118" +
    "\066\u0114\001\001\000\002\001\001\000\004\012\u011a\001" +
    "\001\000\002\001\001\000\034\020\217\021\222\027\200" +
    "\033\203\034\223\035\201\037\u011c\052\216\053\204\054" +
    "\213\055\210\057\207\060\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\u0120\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\u0123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\047\u0128\050\u0113\066\u0114" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\u012b\001\001\000\002\001\001\000\004\012\u012d\001\001" +
    "\000\002\001\001\000\034\020\217\021\222\027\200\033" +
    "\203\034\223\035\201\037\u012f\052\216\053\204\054\213" +
    "\055\210\057\207\060\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\u0144\066\u0133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\004\u0138\014\034\015\021\016\031\017\024" +
    "\067\u0137\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\u013a\001\001\000\002\001\001\000\004\067\u013c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\u0141\063\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\u0146\065\u0148" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\u014a\015\021\016\031\017\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //fields
    Lexer lex;
    private List<String> syntaxErrors;
    private GenTypeTab genTypeTab;

    //conect the parser with the lexer
    public Parser(Lexer lex){
        super(lex);
        syntaxErrors = new LinkedList<>();
        genTypeTab = new GenTypeTab();
    }

    //getters
    public Lexer getLexer(){
        return this.lex;
    }
    public List<String> getSyntaxErrors(){
        return this.syntaxErrors;
    }
    
    /*SOBREESCRIBIR LOS METODOS DE ERROR*/
    public void syntax_error(Symbol cur_token) {
        String mss = "Simbolo: " + symbl_name_from_id(cur_token.sym)
                    + ", linea: " + cur_token.left
                    + ", columna: " + cur_token.right;
        if (expected_token_ids().isEmpty()) {
            mss += " -- ya no se esperaba ningun simbolo";
        }
        syntaxErrors.add(mss);
    }
    public void unrecovered_syntax_error(Symbol cur_token) {
        syntaxErrors.add("Errores de sintaxis severos detectados, revisa municiosamente el codigo");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= header type_b const_b var_b functions_b procedure_b main 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<TypeDefinition> lt = (List<TypeDefinition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
            TypeTable typeTable = genTypeTab.generateTable(true, lt);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= PROGRAM ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // var_type ::= INTEGER 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.IntegerPT.getName(), 
                            new Position(tright, tleft)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var_type ::= REAL 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.RealPT.getName(), 
                            new Position(tright, tleft)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // var_type ::= BOOLEAN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.BooleanPT.getName(), 
                            new Position(tright, tleft)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_type ::= CHAR 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.CharPT.getName(), 
                            new Position(tright, tleft)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_type ::= STRING 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.StringPT.getName(), 
                            new Position(tright, tleft)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_type ::= ID 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            t, 
                            new Position(tright, tleft)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // id_list ::= id_list COMA ID 
            {
              List<Label> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l.add(new Label(i, new Position(iright, ileft)));
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // id_list ::= ID 
            {
              List<Label> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        List<Label> list = new ArrayList<>();
                        list.add(new Label(i, new Position(iright, ileft)));
                        RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // range ::= expression DOT DOT DOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arr_range ::= CORCHETE_L expression DOT DOT expression CORCHETE_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr_range",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // record_b ::= def_record more_records 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_b",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // def_record ::= ID COLON var_type SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_record",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def_record ::= ID COLON PACKED ARRAY arr_range OF var_type SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_record",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // more_records ::= def_record more_records 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_records",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // more_records ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_records",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression_list ::= expression_list COMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression_list ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_b ::= TYPE list_typedec 
            {
              List<TypeDefinition> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<TypeDefinition> l = (List<TypeDefinition>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_b",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type_b ::= 
            {
              List<TypeDefinition> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_b",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // list_typedec ::= type_dec list_typedec 
            {
              List<TypeDefinition> RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<TypeDefinition> l1 = (List<TypeDefinition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<TypeDefinition> l2 = (List<TypeDefinition>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l1.addAll(l2);
                        RESULT = l1;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_typedec",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // list_typedec ::= type_dec 
            {
              List<TypeDefinition> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<TypeDefinition> l = (List<TypeDefinition>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_typedec",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type_dec ::= id_list EQUALS var_type SEMICOLON 
            {
              List<TypeDefinition> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = genTypeTab.userDef(l, t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type_dec ::= id_list EQUALS range SEMICOLON 
            {
              List<TypeDefinition> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_dec ::= id_list EQUALS ARRAY arr_range OF var_type SEMICOLON 
            {
              List<TypeDefinition> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_dec ::= id_list EQUALS RECORD record_b END SEMICOLON 
            {
              List<TypeDefinition> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // const_b ::= CONST list_constdec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_b",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // const_b ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_b",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // list_constdec ::= const_dec list_constdec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_constdec",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // list_constdec ::= const_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_constdec",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // const_dec ::= const_dec ID EQUALS expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_dec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // var_b ::= VAR list_vardec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_b",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var_b ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_b",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // list_vardec ::= list_vardec var_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // list_vardec ::= var_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var_dec ::= id_list COLON var_type SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var_dec ::= id_list COLON range SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var_dec ::= id_list COLON ARRAY arr_range OF var_type SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var_dec ::= id_list EQUALS RECORD record_b END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expression AND expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression AND THEN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression OR expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression OR ELSE expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= bool_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bool_exp ::= arit_exp EQUALS arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bool_exp ::= arit_exp DIFFERENT arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bool_exp ::= arit_exp GRATER arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bool_exp ::= arit_exp LESS arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bool_exp ::= arit_exp GRATER_EQUALS arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bool_exp ::= arit_exp LESS_EQUALS arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bool_exp ::= arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arit_exp ::= arit_exp PLUS arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arit_exp ::= arit_exp MINUS arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arit_exp ::= arit_exp TIMES arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arit_exp ::= arit_exp DIV arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arit_exp ::= arit_exp MOD arit_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arit_exp ::= literals 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arit_exp ::= ID CORCHETE_L arit_exp CORCHETE_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arit_exp ::= ID DOT ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arit_exp ::= ID PARENTESIS_L id_list PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arit_exp ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arit_exp ::= PARENTESIS_L expression PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // literals ::= BOOLEAN_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // literals ::= INTEGER_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // literals ::= REAL_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // literals ::= CHAR_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // literals ::= STRING_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // conditional ::= if_stmt pos_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // if_stmt ::= IF PARENTESIS_L expression PARENTESIS_R THEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // pos_if ::= simple_stmt elif_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_if",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // pos_if ::= simple_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_if",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // pos_if ::= complex_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_if",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // pos_if ::= BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_if",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // pos_if ::= BEGIN block_stmt END elif_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_if",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // elif_stmt ::= elif_stmt ELSE IF PARENTESIS_L expression PARENTESIS_R THEN pos_elif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // elif_stmt ::= ELSE IF PARENTESIS_L expression PARENTESIS_R THEN pos_elif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // elif_stmt ::= else_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // pos_elif ::= simple_stmt else_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_elif",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // pos_elif ::= simple_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_elif",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // pos_elif ::= BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_elif",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // pos_elif ::= BEGIN block_stmt END else_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_elif",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // else_stmt ::= ELSE statements_wc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // else_stmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // statements_wc ::= simple_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_wc",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // statements_wc ::= BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_wc",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // case_stmt ::= CASE PARENTESIS_L expression PARENTESIS_R OF case_block ELSE single_stm END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // case_block ::= labels COLON single_stm SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_block",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // labels ::= labels COMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // labels ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // single_stm ::= ID ASSIGNATION expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_stm",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // single_stm ::= ID PARENTESIS_L expression_list PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_stm",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // single_stm ::= ID DOT ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_stm",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // single_stm ::= definite_fun 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_stm",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // while_stmt ::= WHILE PARENTESIS_L expression PARENTESIS_R DO statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // for_stmt ::= FOR ID ASSIGNATION expression TO expression DO statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // repeat_stmt ::= REPEAT statements UNTIL expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // statements ::= simple_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // statements ::= simple_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // statements ::= complex_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // statements ::= BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // block_stmt ::= list_stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_stmt",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // block_stmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_stmt",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // list_stmts ::= simple_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // list_stmts ::= simple_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // list_stmts ::= complex_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // list_stmts ::= simple_stmt SEMICOLON more_stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // list_stmts ::= complex_stmt more_stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // more_stmts ::= simple_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // more_stmts ::= simple_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // more_stmts ::= simple_stmt SEMICOLON more_stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // more_stmts ::= complex_stmt more_stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // more_stmts ::= complex_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // simple_stmt ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // simple_stmt ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // simple_stmt ::= ID ASSIGNATION expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // simple_stmt ::= ID PARENTESIS_L expression_list PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // simple_stmt ::= ID DOT ID ASSIGNATION expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // simple_stmt ::= definite_fun 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // complex_stmt ::= conditional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // complex_stmt ::= case_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // complex_stmt ::= while_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // complex_stmt ::= for_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // complex_stmt ::= repeat_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // functions_b ::= functions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_b",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // functions_b ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_b",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // functions ::= functions function_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // function_dec ::= function_dec FUNCTION ID PARENTESIS_L arguments PARENTESIS_R COLON var_type SEMICOLON var_b BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_dec",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // procedure_b ::= procedures 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_b",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // procedure_b ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_b",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // procedures ::= procedures procedure_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // procedures ::= procedure_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // procedure_dec ::= PROCEDURE ID PARENTESIS_L arguments PARENTESIS_R SEMICOLON var_b BEGIN block_stmt END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_dec",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // arguments ::= arguments COMA type_arg 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // arguments ::= type_arg 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // arguments ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // type_arg ::= VAR id_list COLON var_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arg",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // type_arg ::= id_list COLON var_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arg",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // main ::= BEGIN block_stmt END DOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // definite_fun ::= writefn 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definite_fun",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // definite_fun ::= readfn 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definite_fun",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // writefn ::= WRITELN PARENTESIS_L expression_list PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writefn",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // readfn ::= READLN PARENTESIS_L expression_list PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readfn",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
