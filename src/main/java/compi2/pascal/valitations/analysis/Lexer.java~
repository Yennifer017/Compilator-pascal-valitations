// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: jflex.jflex

/* codigo de usuario */
package compi2.pascal.valitations.analysis;

import java_cup.runtime.*;
import java.util.*;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\12\u2000\1\u2100\1\u2200\1\u2300\1\u2000\1\u2400"+
    "\1\u2500\2\u2000\31\u1100\1\u2600\126\u1100\1\u2700\1\u1100\1\u2800"+
    "\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u1100\1\u2e00\10\u2f00"+
    "\31\u2000\1\u1100\1\u3000\1\u3100\1\u1100\1\u3200\1\u3300\1\u3400"+
    "\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\1\u1100\1\u3b00"+
    "\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200\1\u4300"+
    "\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00\1\u4b00"+
    "\1\u4c00\1\u4d00\1\u4e00\1\u2000\1\u4f00\1\u5000\1\u5100\1\u5200"+
    "\3\u1100\1\u5300\1\u5400\1\u5500\11\u2000\1\u5600\4\u1100\1\u5700"+
    "\17\u2000\2\u1100\1\u5800\41\u2000\2\u1100\1\u5900\1\u5a00\2\u2000"+
    "\1\u5b00\1\u5c00\27\u1100\1\u5d00\4\u1100\1\u5e00\1\u5f00\41\u2000"+
    "\1\u6000\1\u1100\1\u6100\1\u6200\11\u2000\1\u6300\22\u2000\1\u6400"+
    "\1\u2000\1\u6500\1\u6600\1\u2000\1\u6700\1\u6800\1\u6900\1\u6a00"+
    "\2\u2000\1\u6b00\4\u2000\1\u6c00\1\u6d00\1\u6e00\1\u6f00\1\u2000"+
    "\1\u7000\2\u2000\1\u7100\1\u7200\1\u7300\2\u2000\1\u7400\1\u2000"+
    "\1\u7500\14\u2000\1\u7600\4\u2000\246\u1100\1\u7700\20\u1100\1\u7800"+
    "\1\u7900\25\u1100\1\u7a00\34\u1100\1\u7b00\2\u1100\1\u7c00\11\u2000"+
    "\2\u1100\1\u7d00\5\u2000\23\u1100\1\u7e00\17\u1100\1\u7f00\u0adc\u2000"+
    "\1\u8000\1\u8100\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\6\1\7\1\6\1\10\2\6\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\2\22"+
    "\2\23\4\24\2\25\1\26\1\27\1\30\1\31\1\32"+
    "\2\6\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\10\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\10\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\10\1\60\1\10\1\61\1\62\1\63\1\6\1\10"+
    "\1\64\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\10\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\10\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\10\1\60\1\10\1\65\1\6\1\66\1\6\1\0"+
    "\5\67\1\70\32\67\2\71\4\72\4\71\1\72\2\71"+
    "\1\67\7\71\1\72\4\71\1\72\5\71\27\72\1\71"+
    "\37\72\1\71\70\72\2\73\115\72\1\74\u0142\72\4\71"+
    "\14\72\16\71\5\72\7\71\1\72\1\71\1\72\21\71"+
    "\160\67\5\72\1\71\2\72\2\71\4\72\1\71\1\72"+
    "\6\71\1\72\1\71\3\72\1\71\1\72\1\71\24\72"+
    "\1\71\123\72\1\71\213\72\1\71\5\67\2\71\246\72"+
    "\1\71\46\72\2\71\1\72\6\71\51\72\6\71\1\72"+
    "\1\71\55\67\1\71\1\67\1\71\2\67\1\71\2\67"+
    "\1\71\1\67\10\71\33\72\4\71\4\72\15\71\6\67"+
    "\5\71\1\72\4\71\13\67\1\71\1\67\3\71\53\72"+
    "\37\67\4\71\2\72\1\67\143\72\1\71\1\72\10\67"+
    "\1\71\6\67\2\72\2\67\1\71\4\67\2\72\12\67"+
    "\3\72\2\71\1\72\17\71\1\67\1\72\1\67\36\72"+
    "\33\67\2\71\131\72\13\67\1\72\16\71\12\67\41\72"+
    "\11\67\2\72\4\71\1\72\2\71\1\67\30\72\4\67"+
    "\1\72\11\67\1\72\3\67\1\72\5\67\22\71\31\72"+
    "\3\67\4\71\13\72\5\71\30\72\1\71\6\72\1\71"+
    "\2\67\6\71\10\67\52\72\72\67\66\72\3\67\1\72"+
    "\22\67\1\72\7\67\12\72\2\67\2\71\12\67\1\71"+
    "\20\72\3\67\1\71\10\72\2\71\2\72\2\71\26\72"+
    "\1\71\7\72\1\71\1\72\3\71\4\72\2\71\1\67"+
    "\1\72\7\67\2\71\2\67\2\71\3\67\1\72\10\71"+
    "\1\67\4\71\2\72\1\71\3\72\2\67\2\71\12\67"+
    "\4\72\7\71\2\72\1\71\1\67\2\71\3\67\1\71"+
    "\6\72\4\71\2\72\2\71\26\72\1\71\7\72\1\71"+
    "\2\72\1\71\2\72\1\71\2\72\2\71\1\67\1\71"+
    "\5\67\4\71\2\67\2\71\3\67\3\71\1\67\7\71"+
    "\4\72\1\71\1\72\7\71\14\67\3\72\1\67\13\71"+
    "\3\67\1\71\11\72\1\71\3\72\1\71\26\72\1\71"+
    "\7\72\1\71\2\72\1\71\5\72\2\71\1\67\1\72"+
    "\10\67\1\71\3\67\1\71\3\67\2\71\1\72\17\71"+
    "\2\72\2\67\2\71\12\67\1\71\1\72\7\71\1\72"+
    "\6\67\1\71\3\67\1\71\10\72\2\71\2\72\2\71"+
    "\26\72\1\71\7\72\1\71\2\72\1\71\5\72\2\71"+
    "\1\67\1\72\7\67\2\71\2\67\2\71\3\67\7\71"+
    "\3\67\4\71\2\72\1\71\3\72\2\67\2\71\12\67"+
    "\1\71\1\72\20\71\1\67\1\72\1\71\6\72\3\71"+
    "\3\72\1\71\4\72\3\71\2\72\1\71\1\72\1\71"+
    "\2\72\3\71\2\72\3\71\3\72\3\71\14\72\4\71"+
    "\5\67\3\71\3\67\1\71\4\67\2\71\1\72\6\71"+
    "\1\67\16\71\12\67\11\71\1\72\6\71\5\67\10\72"+
    "\1\71\3\72\1\71\27\72\1\71\20\72\2\71\1\67"+
    "\1\72\7\67\1\71\3\67\1\71\4\67\7\71\2\67"+
    "\1\71\3\72\2\71\1\72\2\71\2\72\2\67\2\71"+
    "\12\67\20\71\1\72\3\67\1\71\10\72\1\71\3\72"+
    "\1\71\27\72\1\71\12\72\1\71\5\72\2\71\1\67"+
    "\1\72\7\67\1\71\3\67\1\71\4\67\7\71\2\67"+
    "\6\71\2\72\1\71\2\72\2\67\2\71\12\67\1\71"+
    "\2\72\1\67\14\71\4\67\11\72\1\71\3\72\1\71"+
    "\51\72\2\67\1\72\7\67\1\71\3\67\1\71\4\67"+
    "\1\72\5\71\3\72\1\67\7\71\3\72\2\67\2\71"+
    "\12\67\12\71\6\72\1\71\3\67\1\71\22\72\3\71"+
    "\30\72\1\71\11\72\1\71\1\72\2\71\7\72\3\71"+
    "\1\67\4\71\6\67\1\71\1\67\1\71\10\67\6\71"+
    "\12\67\2\71\2\67\15\71\60\72\1\67\2\72\7\67"+
    "\4\71\10\72\10\67\1\71\12\67\47\71\2\72\1\71"+
    "\1\72\1\71\5\72\1\71\30\72\1\71\1\72\1\71"+
    "\12\72\1\67\2\72\11\67\1\72\2\71\5\72\1\71"+
    "\1\72\1\71\7\67\1\71\12\67\2\71\4\72\40\71"+
    "\1\72\27\71\2\67\6\71\12\67\13\71\1\67\1\71"+
    "\1\67\1\71\1\67\4\71\2\67\10\72\1\71\44\72"+
    "\4\71\24\67\1\71\2\67\5\72\13\67\1\71\44\67"+
    "\11\71\1\67\71\71\53\72\24\67\1\72\12\67\6\71"+
    "\6\72\4\67\4\72\3\67\1\72\3\67\2\72\7\67"+
    "\3\72\4\67\15\72\14\67\1\72\17\67\2\71\46\72"+
    "\1\71\1\72\5\71\1\72\2\71\53\72\1\71\u014d\72"+
    "\1\71\4\72\2\71\7\72\1\71\1\72\1\71\4\72"+
    "\2\71\51\72\1\71\4\72\2\71\41\72\1\71\4\72"+
    "\2\71\7\72\1\71\1\72\1\71\4\72\2\71\17\72"+
    "\1\71\71\72\1\71\4\72\2\71\103\72\2\71\3\67"+
    "\40\71\20\72\20\71\126\72\2\71\6\72\3\71\u016c\72"+
    "\2\71\21\72\1\71\32\72\5\71\113\72\3\71\13\72"+
    "\7\71\22\72\4\67\11\71\23\72\3\67\13\71\22\72"+
    "\2\67\14\71\15\72\1\71\3\72\1\71\2\67\14\71"+
    "\64\72\40\67\3\71\1\72\3\71\2\72\1\67\2\71"+
    "\12\67\41\71\17\67\6\71\131\72\7\71\5\72\2\67"+
    "\42\72\1\67\1\72\5\71\106\72\12\71\37\72\1\71"+
    "\14\67\4\71\14\67\12\71\12\67\36\72\2\71\5\72"+
    "\13\71\54\72\4\71\32\72\6\71\12\67\46\71\27\72"+
    "\5\67\4\71\65\72\12\67\1\71\35\67\2\71\13\67"+
    "\6\71\12\67\15\71\1\72\10\71\16\67\1\71\20\67"+
    "\61\71\5\67\57\72\21\67\10\72\3\71\12\67\21\71"+
    "\11\67\14\71\3\67\36\72\15\67\2\72\12\67\54\72"+
    "\16\67\14\71\44\72\24\67\10\71\12\67\3\71\3\72"+
    "\12\67\44\72\2\71\11\72\7\71\53\72\2\71\3\72"+
    "\20\71\3\67\1\71\25\67\4\72\1\67\6\72\1\67"+
    "\2\72\3\67\1\72\5\71\300\72\100\67\26\72\2\71"+
    "\6\72\2\71\46\72\2\71\6\72\2\71\10\72\1\71"+
    "\1\72\1\71\1\72\1\71\1\72\1\71\37\72\2\71"+
    "\65\72\1\71\7\72\1\71\1\72\3\71\3\72\1\71"+
    "\7\72\3\71\4\72\2\71\6\72\4\71\15\72\5\71"+
    "\3\72\1\71\7\72\16\71\5\67\30\71\2\75\5\67"+
    "\20\71\2\72\23\71\1\72\13\71\5\67\1\71\12\67"+
    "\1\71\1\72\15\71\1\72\20\71\15\72\3\71\41\72"+
    "\17\71\15\67\4\71\1\67\3\71\14\67\21\71\1\72"+
    "\4\71\1\72\2\71\12\72\1\71\1\72\3\71\5\72"+
    "\6\71\1\72\1\71\1\72\1\71\1\72\1\71\1\76"+
    "\3\72\1\71\13\72\2\71\4\72\5\71\5\72\4\71"+
    "\1\72\21\71\51\72\u0177\71\345\72\6\71\4\72\3\67"+
    "\2\72\14\71\46\72\1\71\1\72\5\71\1\72\2\71"+
    "\70\72\7\71\1\72\17\71\1\67\27\72\11\71\7\72"+
    "\1\71\7\72\1\71\7\72\1\71\7\72\1\71\7\72"+
    "\1\71\7\72\1\71\7\72\1\71\7\72\1\71\40\67"+
    "\57\71\1\72\325\71\3\72\31\71\11\72\6\67\1\71"+
    "\5\72\2\71\5\72\4\71\126\72\2\71\2\67\2\71"+
    "\3\72\1\71\132\72\1\71\4\72\5\71\53\72\1\71"+
    "\136\72\21\71\40\72\60\71\320\72\100\71\215\72\103\71"+
    "\56\72\2\71\15\72\3\71\20\72\12\67\2\72\24\71"+
    "\57\72\1\67\4\71\12\67\1\71\37\72\2\67\120\72"+
    "\2\67\45\71\11\72\2\71\147\72\2\71\100\72\5\71"+
    "\2\72\1\71\1\72\1\71\5\72\30\71\20\72\1\67"+
    "\3\72\1\67\4\72\1\67\27\72\5\67\4\71\1\67"+
    "\13\71\1\72\7\71\64\72\14\71\2\67\62\72\22\67"+
    "\12\71\12\67\6\71\22\67\6\72\3\71\1\72\1\71"+
    "\2\72\13\67\34\72\10\67\2\71\27\72\15\67\14\71"+
    "\35\72\3\71\4\67\57\72\16\67\16\71\1\72\12\67"+
    "\6\71\5\72\1\67\12\72\12\67\5\72\1\71\51\72"+
    "\16\67\11\71\3\72\1\67\10\72\2\67\2\71\12\67"+
    "\6\71\27\72\3\71\1\72\3\67\62\72\1\67\1\72"+
    "\3\67\2\72\2\67\5\72\2\67\1\72\1\67\1\72"+
    "\30\71\3\72\2\71\13\72\5\67\2\71\3\72\2\67"+
    "\12\71\6\72\2\71\6\72\2\71\6\72\11\71\7\72"+
    "\1\71\7\72\1\71\53\72\1\71\16\72\6\71\163\72"+
    "\10\67\1\71\2\67\2\71\12\67\6\71\244\72\14\71"+
    "\27\72\4\71\61\72\4\71\u0100\75\156\72\2\71\152\72"+
    "\46\71\7\72\14\71\5\72\5\71\1\72\1\67\12\72"+
    "\1\71\15\72\1\71\5\72\1\71\1\72\1\71\2\72"+
    "\1\71\2\72\1\71\154\72\41\71\153\72\22\71\100\72"+
    "\2\71\66\72\50\71\15\72\3\71\20\67\20\71\20\67"+
    "\3\71\2\72\30\71\3\72\31\71\1\72\6\71\5\72"+
    "\1\71\207\72\2\71\1\67\4\71\1\72\13\71\12\67"+
    "\7\71\32\72\4\71\1\72\1\71\32\72\13\71\131\72"+
    "\3\71\6\72\2\71\6\72\2\71\6\72\2\71\3\72"+
    "\3\71\2\72\3\71\2\72\22\71\3\67\4\71\14\72"+
    "\1\71\32\72\1\71\23\72\1\71\2\72\1\71\17\72"+
    "\2\71\16\72\42\71\173\72\105\71\65\72\210\71\1\67"+
    "\202\71\35\72\3\71\61\72\17\71\1\67\37\71\40\72"+
    "\15\71\36\72\5\71\46\72\5\67\5\71\36\72\2\71"+
    "\44\72\4\71\10\72\1\71\5\72\52\71\236\72\2\71"+
    "\12\67\6\71\44\72\4\71\44\72\4\71\50\72\10\71"+
    "\64\72\14\71\13\72\1\71\17\72\1\71\7\72\1\71"+
    "\2\72\1\71\13\72\1\71\17\72\1\71\7\72\1\71"+
    "\2\72\103\71\67\72\11\71\26\72\12\71\10\72\30\71"+
    "\6\72\1\71\52\72\1\71\11\72\105\71\6\72\2\71"+
    "\1\72\1\71\54\72\1\71\2\72\3\71\1\72\2\71"+
    "\27\72\12\71\27\72\11\71\37\72\101\71\23\72\1\71"+
    "\2\72\12\71\26\72\12\71\32\72\106\71\70\72\6\71"+
    "\2\72\100\71\1\72\3\67\1\71\2\67\5\71\4\67"+
    "\4\72\1\71\3\72\1\71\35\72\2\71\3\67\4\71"+
    "\1\67\40\71\35\72\3\71\35\72\43\71\10\72\1\71"+
    "\34\72\2\67\31\71\66\72\12\71\26\72\12\71\23\72"+
    "\15\71\22\72\156\71\111\72\67\71\63\72\15\71\63\72"+
    "\15\71\44\72\4\67\10\71\12\67\u0146\71\52\72\1\71"+
    "\2\67\3\71\2\72\113\71\3\67\35\72\12\71\1\72"+
    "\10\71\26\72\13\67\37\71\22\72\4\67\52\71\25\72"+
    "\33\71\27\72\11\71\3\67\65\72\17\67\37\71\13\67"+
    "\2\72\2\67\1\72\11\71\4\67\55\72\13\67\2\71"+
    "\1\67\4\71\1\67\12\71\1\67\2\71\31\72\7\71"+
    "\12\67\6\71\3\67\44\72\16\67\1\71\12\67\4\71"+
    "\1\72\2\67\1\72\10\71\43\72\1\67\2\71\1\72"+
    "\11\71\3\67\60\72\16\67\4\72\4\71\4\67\1\71"+
    "\14\67\1\72\1\71\1\72\43\71\22\72\1\71\31\72"+
    "\14\67\6\71\1\67\2\72\1\67\76\71\7\72\1\71"+
    "\1\72\1\71\4\72\1\71\17\72\1\71\12\72\7\71"+
    "\57\72\14\67\5\71\12\67\6\71\4\67\1\71\10\72"+
    "\2\71\2\72\2\71\26\72\1\71\7\72\1\71\2\72"+
    "\1\71\5\72\1\71\2\67\1\72\7\67\2\71\2\67"+
    "\2\71\3\67\2\71\1\72\6\71\1\67\5\71\5\72"+
    "\2\67\2\71\7\67\3\71\5\67\213\71\65\72\22\67"+
    "\4\72\5\71\12\67\4\71\1\67\3\72\36\71\60\72"+
    "\24\67\2\72\1\71\1\72\10\71\12\67\246\71\57\72"+
    "\7\67\2\71\11\67\27\71\4\72\2\67\42\71\60\72"+
    "\21\67\3\71\1\72\13\71\12\67\46\71\53\72\15\67"+
    "\1\72\7\71\12\67\66\71\33\72\2\71\17\67\4\71"+
    "\12\67\6\71\7\72\271\71\54\72\17\67\145\71\100\72"+
    "\12\67\25\71\10\72\2\71\1\72\2\71\10\72\1\71"+
    "\2\72\1\71\30\72\6\67\1\71\2\67\2\71\4\67"+
    "\1\72\1\67\1\72\2\67\14\71\12\67\106\71\10\72"+
    "\2\71\47\72\7\67\2\71\7\67\1\72\1\71\1\72"+
    "\1\67\33\71\1\72\12\67\50\72\7\67\1\72\4\67"+
    "\10\71\1\67\10\71\1\72\13\67\56\72\20\67\3\71"+
    "\1\72\22\71\111\72\7\71\11\72\1\71\45\72\10\67"+
    "\1\71\10\67\1\72\17\71\12\67\30\71\36\72\2\71"+
    "\26\67\1\71\16\67\111\71\7\72\1\71\2\72\1\71"+
    "\46\72\6\67\3\71\1\67\1\71\2\67\1\71\7\67"+
    "\1\72\1\67\10\71\12\67\6\71\6\72\1\71\2\72"+
    "\1\71\40\72\5\67\1\71\2\67\1\71\5\67\1\72"+
    "\7\71\12\67\u0136\71\23\72\4\67\11\71\2\67\1\72"+
    "\1\67\15\72\1\71\42\72\7\67\3\71\5\67\15\71"+
    "\12\67\126\71\1\72\54\71\4\72\37\71\232\72\146\71"+
    "\157\72\21\71\304\72\u014c\71\141\72\17\71\60\72\21\67"+
    "\6\72\17\67\252\71\107\72\271\71\71\72\7\71\37\72"+
    "\1\71\12\67\6\71\117\72\1\71\12\67\6\71\36\72"+
    "\2\71\5\67\13\71\60\72\7\67\11\71\4\72\14\71"+
    "\12\67\11\71\25\72\5\71\23\72\260\71\100\72\200\71"+
    "\113\72\4\71\1\67\1\72\67\67\7\71\4\67\15\72"+
    "\100\71\2\72\1\71\1\72\1\67\13\71\2\67\16\71"+
    "\370\72\10\71\326\72\52\71\11\72\u01e7\71\4\72\1\71"+
    "\7\72\1\71\2\72\1\71\43\72\17\71\1\72\35\71"+
    "\3\72\2\71\1\72\16\71\4\72\10\71\u018c\72\4\71"+
    "\153\72\5\71\15\72\3\71\11\72\7\71\12\72\3\71"+
    "\2\67\1\71\4\67\134\71\56\67\2\71\27\67\u011e\71"+
    "\5\67\3\71\26\67\2\71\7\67\36\71\4\67\224\71"+
    "\3\67\273\71\125\72\1\71\107\72\1\71\2\72\2\71"+
    "\1\72\2\71\2\72\2\71\4\72\1\71\14\72\1\71"+
    "\1\72\1\71\7\72\1\71\101\72\1\71\4\72\2\71"+
    "\10\72\1\71\7\72\1\71\34\72\1\71\4\72\1\71"+
    "\5\72\1\71\1\72\3\71\7\72\1\71\u0154\72\2\71"+
    "\31\72\1\71\31\72\1\71\37\72\1\71\31\72\1\71"+
    "\37\72\1\71\31\72\1\71\37\72\1\71\31\72\1\71"+
    "\37\72\1\71\31\72\1\71\10\72\2\71\151\67\4\71"+
    "\62\67\10\71\1\67\16\71\1\67\26\71\5\67\1\71"+
    "\17\67\120\71\37\72\6\71\6\72\325\71\7\67\1\71"+
    "\21\67\2\71\7\67\1\71\2\67\1\71\5\67\5\71"+
    "\76\72\41\71\1\67\160\71\55\72\3\71\7\67\7\72"+
    "\2\71\12\67\4\71\1\72\u0141\71\36\72\1\67\21\71"+
    "\54\72\16\67\5\71\1\72\320\71\34\72\16\67\346\71"+
    "\7\72\1\71\4\72\1\71\2\72\1\71\17\72\1\71"+
    "\305\72\13\71\7\67\51\71\104\72\7\67\1\72\4\71"+
    "\12\67\u0156\71\1\72\117\71\4\72\1\71\33\72\1\71"+
    "\2\72\1\71\1\72\2\71\1\72\1\71\12\72\1\71"+
    "\4\72\1\71\1\72\1\71\1\72\6\71\1\72\4\71"+
    "\1\72\1\71\1\72\1\71\1\72\1\71\3\72\1\71"+
    "\2\72\1\71\1\72\2\71\1\72\1\71\1\72\1\71"+
    "\1\72\1\71\1\72\1\71\1\72\1\71\2\72\1\71"+
    "\1\72\2\71\4\72\1\71\7\72\1\71\4\72\1\71"+
    "\4\72\1\71\1\72\1\71\12\72\1\71\21\72\5\71"+
    "\3\72\1\71\5\72\1\71\21\72\u0134\71\12\67\6\71"+
    "\340\72\40\71\72\72\6\71\336\72\2\71\u0182\72\16\71"+
    "\u0131\72\17\71\156\72\242\71\36\72\342\71\113\72\5\71"+
    "\u0160\72\121\71\1\67\36\71\140\67\200\71\360\67\20\71";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[33280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\23\3\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\2\32\1\33\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\1\1\25\1\26\1\27\1\30"+
    "\3\0\1\34\1\35\1\36\1\37\11\3\1\40\6\3"+
    "\1\41\1\42\4\3\1\43\1\44\6\3\1\45\6\3"+
    "\1\0\1\31\1\46\1\31\1\34\1\35\1\36\1\37"+
    "\1\47\1\50\1\51\2\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\31\1\46\1\61\2\0\1\62\1\63"+
    "\7\3\1\64\2\3\1\65\1\3\1\66\4\3\1\67"+
    "\1\70\1\71\6\3\1\72\4\3\1\73\3\3\1\31"+
    "\1\74\1\75\1\76\1\52\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\0\4\3\1\105\1\106\3\3\1\107"+
    "\1\110\1\3\1\111\6\3\1\112\4\3\1\113\1\114"+
    "\2\3\1\115\1\3\1\31\1\116\1\117\1\3\1\120"+
    "\1\121\4\3\1\122\10\3\1\123\1\124\3\3\1\125"+
    "\2\3\1\126\2\3\1\127\1\130\1\131\1\132\1\133"+
    "\1\3\1\134\2\3\1\135\1\3\1\136\1\137\1\140"+
    "\1\141\1\3\1\142";

  private static int [] zzUnpackAction() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\176\0\275\0\374\0\u013b\0\u017a"+
    "\0\176\0\176\0\176\0\176\0\176\0\176\0\176\0\u01b9"+
    "\0\u01b9\0\u01f8\0\176\0\u0237\0\176\0\u0276\0\u02b5\0\u02f4"+
    "\0\u0333\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec"+
    "\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4"+
    "\0\u0723\0\176\0\176\0\176\0\u0762\0\176\0\u07a1\0\176"+
    "\0\u07e0\0\176\0\u081f\0\u07a1\0\u07a1\0\u07a1\0\u07a1\0\u07a1"+
    "\0\u07a1\0\u07a1\0\u085e\0\u07a1\0\u089d\0\u07a1\0\u08dc\0\u07a1"+
    "\0\u091b\0\u07a1\0\u07a1\0\u095a\0\u07a1\0\u0999\0\u09d8\0\u0a17"+
    "\0\176\0\176\0\176\0\176\0\u0a56\0\u0a95\0\u0ad4\0\u0b13"+
    "\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b"+
    "\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\374\0\u0e46\0\u0e85\0\u0ec4"+
    "\0\u0f03\0\u0f42\0\374\0\374\0\u0f81\0\u0fc0\0\u0fff\0\u103e"+
    "\0\u107d\0\u10bc\0\374\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7"+
    "\0\u1236\0\u0762\0\u1275\0\176\0\u12b4\0\u1275\0\u1275\0\u1275"+
    "\0\u1275\0\176\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e"+
    "\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u0762\0\176\0\u15a8"+
    "\0\u15e7\0\u0a17\0\374\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722"+
    "\0\u1761\0\u17a0\0\374\0\u17df\0\u181e\0\374\0\u185d\0\374"+
    "\0\u189c\0\u18db\0\u191a\0\u1959\0\374\0\374\0\374\0\u1998"+
    "\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\374\0\u1b12\0\u1b51"+
    "\0\u1b90\0\u1bcf\0\374\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\176"+
    "\0\176\0\176\0\u1d0a\0\176\0\176\0\176\0\176\0\176"+
    "\0\176\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\374\0\374"+
    "\0\u1e84\0\u1ec3\0\u1f02\0\374\0\374\0\u1f41\0\374\0\u1f80"+
    "\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\374\0\u20fa\0\u2139"+
    "\0\u2178\0\u21b7\0\374\0\374\0\u21f6\0\u2235\0\374\0\u2274"+
    "\0\u22b3\0\374\0\374\0\u22f2\0\374\0\374\0\u2331\0\u2370"+
    "\0\u23af\0\u23ee\0\374\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529"+
    "\0\u2568\0\u25a7\0\u25e6\0\374\0\374\0\u2625\0\u2664\0\u26a3"+
    "\0\374\0\u26e2\0\u2721\0\374\0\u2760\0\u279f\0\374\0\374"+
    "\0\374\0\374\0\374\0\u27de\0\374\0\u281d\0\u285c\0\374"+
    "\0\u289b\0\374\0\374\0\374\0\374\0\u28da\0\374";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\0\1\4\1\5\2\3\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\3\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\6\1\36"+
    "\1\6\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\6\1\52\1\3\1\53"+
    "\1\54\1\55\1\56\1\3\1\0\1\3\1\6\1\36"+
    "\1\45\1\0\1\6\2\57\1\60\2\57\1\61\3\57"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\4\57\1\73\1\74\1\75\1\76\1\77\26\57"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\10\57\101\0"+
    "\1\4\74\0\1\6\7\0\1\6\11\0\4\6\5\0"+
    "\26\6\6\0\2\6\1\0\3\6\1\0\1\6\67\106"+
    "\24\0\1\107\102\0\1\110\1\0\4\21\102\0\1\111"+
    "\76\0\1\112\1\113\75\0\1\114\45\0\1\6\7\0"+
    "\1\6\11\0\4\6\5\0\14\6\1\115\2\6\1\116"+
    "\6\6\6\0\2\6\1\0\3\6\1\0\2\6\7\0"+
    "\1\6\11\0\4\6\5\0\4\6\1\117\10\6\1\120"+
    "\1\6\1\121\6\6\6\0\2\6\1\0\3\6\1\0"+
    "\2\6\7\0\1\6\11\0\4\6\5\0\1\122\6\6"+
    "\1\123\5\6\1\124\10\6\6\0\2\6\1\0\3\6"+
    "\1\0\2\6\7\0\1\6\11\0\4\6\5\0\10\6"+
    "\1\125\4\6\1\126\10\6\6\0\2\6\1\0\1\6"+
    "\1\125\1\6\1\0\2\6\7\0\1\6\11\0\4\6"+
    "\5\0\12\6\1\127\1\6\1\130\11\6\6\0\2\6"+
    "\1\0\3\6\1\0\2\6\7\0\1\6\11\0\4\6"+
    "\5\0\10\6\1\131\4\6\1\132\4\6\1\133\3\6"+
    "\6\0\2\6\1\0\1\6\1\131\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\4\6\5\0\15\6\1\134\10\6"+
    "\6\0\2\6\1\0\3\6\1\0\2\6\7\0\1\6"+
    "\11\0\4\6\5\0\5\6\1\135\6\6\1\136\11\6"+
    "\6\0\2\6\1\0\3\6\1\0\2\6\7\0\1\6"+
    "\11\0\4\6\5\0\1\137\25\6\6\0\2\6\1\0"+
    "\3\6\1\0\2\6\7\0\1\6\11\0\4\6\5\0"+
    "\15\6\1\140\10\6\6\0\2\6\1\0\3\6\1\0"+
    "\2\6\7\0\1\6\11\0\4\6\5\0\10\6\1\141"+
    "\4\6\1\142\10\6\6\0\2\6\1\0\1\6\1\141"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\4\6\5\0"+
    "\5\6\1\143\11\6\1\144\6\6\6\0\2\6\1\0"+
    "\3\6\1\0\2\6\7\0\1\6\11\0\4\6\5\0"+
    "\1\145\16\6\1\146\6\6\6\0\2\6\1\0\3\6"+
    "\1\0\2\6\7\0\1\6\11\0\4\6\5\0\4\6"+
    "\1\147\21\6\6\0\2\6\1\0\3\6\1\0\2\6"+
    "\7\0\1\6\11\0\4\6\5\0\4\6\1\150\14\6"+
    "\1\151\4\6\6\0\2\6\1\0\3\6\1\0\2\6"+
    "\7\0\1\6\11\0\4\6\5\0\7\6\1\152\5\6"+
    "\1\153\7\6\1\154\6\0\2\6\1\0\3\6\1\0"+
    "\2\6\7\0\1\6\11\0\4\6\5\0\14\6\1\155"+
    "\11\6\6\0\2\6\1\0\3\6\1\0\2\6\7\0"+
    "\1\6\11\0\4\6\5\0\1\156\25\6\6\0\2\6"+
    "\1\0\3\6\1\0\2\6\7\0\1\6\11\0\4\6"+
    "\5\0\7\6\1\157\1\160\6\6\1\161\6\6\6\0"+
    "\2\6\1\0\1\6\1\160\1\6\1\0\1\6\2\162"+
    "\1\0\63\162\1\4\10\162\2\163\1\0\2\163\1\0"+
    "\3\163\1\164\50\163\1\0\14\163\2\0\1\60\74\0"+
    "\2\163\1\0\2\163\1\0\3\163\1\164\2\163\1\165"+
    "\45\163\1\0\16\163\1\0\2\163\1\0\3\163\1\164"+
    "\17\163\1\166\30\163\1\0\16\163\1\0\2\163\1\0"+
    "\3\163\1\164\17\163\1\167\1\170\27\163\1\0\16\163"+
    "\1\0\2\163\1\0\3\163\1\164\17\163\1\171\30\163"+
    "\1\0\14\163\2\172\4\0\1\172\1\173\1\172\1\174"+
    "\10\172\2\175\1\176\7\172\1\177\3\172\1\200\6\172"+
    "\1\201\2\172\1\202\1\172\1\203\5\172\1\204\5\172"+
    "\1\0\4\172\1\0\1\172\2\205\1\0\2\205\1\162"+
    "\3\205\1\206\50\205\1\162\3\205\1\163\10\205\11\0"+
    "\1\207\65\0\14\210\1\211\62\210\22\0\4\212\51\0"+
    "\1\6\7\0\1\6\11\0\4\6\5\0\3\6\1\213"+
    "\22\6\6\0\2\6\1\0\3\6\1\0\2\6\7\0"+
    "\1\6\11\0\4\6\5\0\17\6\1\214\6\6\6\0"+
    "\2\6\1\0\3\6\1\0\2\6\7\0\1\6\11\0"+
    "\4\6\5\0\6\6\1\215\17\6\6\0\2\6\1\0"+
    "\3\6\1\0\2\6\7\0\1\6\11\0\4\6\5\0"+
    "\15\6\1\216\10\6\6\0\2\6\1\0\3\6\1\0"+
    "\2\6\7\0\1\6\11\0\4\6\5\0\4\6\1\217"+
    "\21\6\6\0\2\6\1\0\3\6\1\0\2\6\7\0"+
    "\1\6\11\0\4\6\5\0\20\6\1\220\5\6\6\0"+
    "\2\6\1\0\2\6\1\220\1\0\2\6\7\0\1\6"+
    "\11\0\4\6\5\0\1\221\25\6\6\0\2\6\1\0"+
    "\3\6\1\0\2\6\7\0\1\6\11\0\4\6\5\0"+
    "\14\6\1\222\11\6\6\0\2\6\1\0\3\6\1\0"+
    "\2\6\7\0\1\6\11\0\4\6\5\0\23\6\1\223"+
    "\2\6\6\0\2\6\1\0\3\6\1\0\2\6\7\0"+
    "\1\6\11\0\4\6\5\0\24\6\1\224\1\6\6\0"+
    "\2\6\1\0\3\6\1\0\2\6\7\0\1\6\11\0"+
    "\4\6\5\0\20\6\1\225\5\6\6\0\2\6\1\0"+
    "\2\6\1\225\1\0\2\6\7\0\1\6\11\0\4\6"+
    "\5\0\3\6\1\226\22\6\6\0\2\6\1\0\3\6"+
    "\1\0\2\6\7\0\1\6\11\0\4\6\5\0\12\6"+
    "\1\227\13\6\6\0\2\6\1\0\3\6\1\0\2\6"+
    "\7\0\1\6\11\0\4\6\5\0\17\6\1\230\6\6"+
    "\6\0\2\6\1\0\3\6\1\0\2\6\7\0\1\6"+
    "\11\0\4\6\5\0\14\6\1\231\11\6\6\0\2\6"+
    "\1\0\3\6\1\0\2\6\7\0\1\6\11\0\4\6"+
    "\5\0\21\6\1\232\4\6\6\0\2\6\1\0\3\6"+
    "\1\0\2\6\7\0\1\6\11\0\4\6\5\0\21\6"+
    "\1\233\4\6\6\0\2\6\1\0\3\6\1\0\2\6"+
    "\7\0\1\6\11\0\4\6\5\0\1\6\1\234\24\6"+
    "\6\0\2\6\1\0\3\6\1\0\2\6\7\0\1\6"+
    "\11\0\4\6\5\0\3\6\1\235\22\6\6\0\2\6"+
    "\1\0\3\6\1\0\2\6\7\0\1\6\11\0\4\6"+
    "\5\0\12\6\1\236\13\6\6\0\2\6\1\0\3\6"+
    "\1\0\2\6\7\0\1\6\11\0\4\6\5\0\21\6"+
    "\1\237\4\6\6\0\2\6\1\0\3\6\1\0\2\6"+
    "\7\0\1\6\11\0\4\6\5\0\2\6\1\240\23\6"+
    "\6\0\2\6\1\0\3\6\1\0\2\6\7\0\1\6"+
    "\11\0\4\6\5\0\15\6\1\241\10\6\6\0\2\6"+
    "\1\0\3\6\1\0\2\6\7\0\1\6\11\0\4\6"+
    "\5\0\1\242\1\6\1\243\13\6\1\244\2\6\1\245"+
    "\4\6\6\0\2\6\1\0\3\6\1\0\2\6\7\0"+
    "\1\6\11\0\4\6\5\0\21\6\1\246\4\6\6\0"+
    "\2\6\1\0\3\6\1\0\2\6\7\0\1\6\11\0"+
    "\4\6\5\0\17\6\1\247\6\6\6\0\2\6\1\0"+
    "\3\6\1\0\2\6\7\0\1\6\11\0\4\6\5\0"+
    "\4\6\1\250\21\6\6\0\2\6\1\0\3\6\1\0"+
    "\2\6\7\0\1\6\11\0\4\6\5\0\16\6\1\251"+
    "\7\6\6\0\2\6\1\0\3\6\1\0\2\6\7\0"+
    "\1\6\11\0\4\6\5\0\21\6\1\252\4\6\6\0"+
    "\2\6\1\0\3\6\1\0\2\6\7\0\1\6\11\0"+
    "\4\6\5\0\17\6\1\253\6\6\6\0\2\6\1\0"+
    "\3\6\1\0\2\6\7\0\1\6\11\0\4\6\5\0"+
    "\10\6\1\254\15\6\6\0\2\6\1\0\1\6\1\254"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\4\6\5\0"+
    "\21\6\1\255\4\6\6\0\2\6\1\0\3\6\1\0"+
    "\2\6\7\0\1\6\11\0\4\6\5\0\10\6\1\256"+
    "\15\6\6\0\2\6\1\0\1\6\1\256\1\6\1\0"+
    "\1\6\2\163\1\0\2\163\1\0\3\163\1\0\50\163"+
    "\1\0\14\163\2\257\1\210\2\257\1\210\3\257\1\210"+
    "\2\257\1\163\45\257\1\210\14\257\11\0\1\260\76\0"+
    "\1\261\76\0\1\262\10\0\3\176\63\0\1\262\10\0"+
    "\3\263\63\0\1\264\76\0\1\265\76\0\1\266\76\0"+
    "\1\267\76\0\1\270\76\0\1\271\65\0\2\205\1\0"+
    "\2\205\1\162\3\205\1\162\50\205\1\162\3\205\1\163"+
    "\10\205\14\210\1\272\62\210\13\0\1\4\1\211\62\0"+
    "\1\6\7\0\1\6\11\0\4\6\5\0\1\273\25\6"+
    "\6\0\2\6\1\0\3\6\1\0\2\6\7\0\1\6"+
    "\11\0\4\6\5\0\10\6\1\274\15\6\6\0\2\6"+
    "\1\0\1\6\1\274\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\4\6\5\0\12\6\1\275\13\6\6\0\2\6"+
    "\1\0\3\6\1\0\2\6\7\0\1\6\11\0\4\6"+
    "\5\0\1\276\25\6\6\0\2\6\1\0\3\6\1\0"+
    "\2\6\7\0\1\6\11\0\4\6\5\0\4\6\1\277"+
    "\21\6\6\0\2\6\1\0\3\6\1\0\2\6\7\0"+
    "\1\6\11\0\4\6\5\0\17\6\1\300\6\6\6\0"+
    "\2\6\1\0\3\6\1\0\2\6\7\0\1\6\11\0"+
    "\4\6\5\0\20\6\1\301\1\302\4\6\6\0\2\6"+
    "\1\0\2\6\1\301\1\0\2\6\7\0\1\6\11\0"+
    "\4\6\5\0\14\6\1\303\11\6\6\0\2\6\1\0"+
    "\3\6\1\0\2\6\7\0\1\6\11\0\4\6\5\0"+
    "\4\6\1\304\21\6\6\0\2\6\1\0\3\6\1\0"+
    "\2\6\7\0\1\6\11\0\4\6\5\0\4\6\1\305"+
    "\21\6\6\0\2\6\1\0\3\6\1\0\2\6\7\0"+
    "\1\6\11\0\4\6\5\0\2\6\1\306\23\6\6\0"+
    "\2\6\1\0\3\6\1\0\2\6\7\0\1\6\11\0"+
    "\4\6\5\0\15\6\1\307\10\6\6\0\2\6\1\0"+
    "\3\6\1\0\2\6\7\0\1\6\11\0\4\6\5\0"+
    "\4\6\1\310\21\6\6\0\2\6\1\0\3\6\1\0"+
    "\2\6\7\0\1\6\11\0\4\6\5\0\4\6\1\311"+
    "\21\6\6\0\2\6\1\0\3\6\1\0\2\6\7\0"+
    "\1\6\11\0\4\6\5\0\11\6\1\312\14\6\6\0"+
    "\2\6\1\0\3\6\1\0\1\312\1\6\7\0\1\6"+
    "\11\0\4\6\5\0\2\6\1\313\3\6\1\314\17\6"+
    "\6\0\2\6\1\0\3\6\1\0\2\6\7\0\1\6"+
    "\11\0\4\6\5\0\3\6\1\315\6\6\1\316\13\6"+
    "\6\0\2\6\1\0\3\6\1\0\2\6\7\0\1\6"+
    "\11\0\4\6\5\0\15\6\1\317\10\6\6\0\2\6"+
    "\1\0\3\6\1\0\2\6\7\0\1\6\11\0\4\6"+
    "\5\0\4\6\1\320\21\6\6\0\2\6\1\0\3\6"+
    "\1\0\2\6\7\0\1\6\11\0\4\6\5\0\22\6"+
    "\1\321\3\6\6\0\2\6\1\0\3\6\1\0\2\6"+
    "\7\0\1\6\11\0\4\6\5\0\10\6\1\322\15\6"+
    "\6\0\2\6\1\0\1\6\1\322\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\4\6\5\0\14\6\1\323\11\6"+
    "\6\0\2\6\1\0\3\6\1\0\2\6\7\0\1\6"+
    "\11\0\4\6\5\0\4\6\1\324\21\6\6\0\2\6"+
    "\1\0\3\6\1\0\2\6\7\0\1\6\11\0\4\6"+
    "\5\0\10\6\1\325\15\6\6\0\2\6\1\0\1\6"+
    "\1\325\1\6\1\0\2\6\7\0\1\6\11\0\4\6"+
    "\5\0\12\6\1\326\13\6\6\0\2\6\1\0\3\6"+
    "\1\0\2\6\7\0\1\6\11\0\4\6\5\0\7\6"+
    "\1\327\16\6\6\0\2\6\1\0\3\6\1\0\2\6"+
    "\7\0\1\6\11\0\4\6\5\0\21\6\1\330\4\6"+
    "\6\0\2\6\1\0\3\6\1\0\1\6\2\257\1\210"+
    "\2\257\1\210\3\257\1\210\2\257\1\331\45\257\1\210"+
    "\14\257\11\0\1\262\65\0\13\210\1\4\1\272\62\210"+
    "\1\6\7\0\1\6\11\0\4\6\5\0\25\6\1\332"+
    "\6\0\2\6\1\0\3\6\1\0\2\6\7\0\1\6"+
    "\11\0\4\6\5\0\14\6\1\333\11\6\6\0\2\6"+
    "\1\0\3\6\1\0\2\6\7\0\1\6\11\0\4\6"+
    "\5\0\4\6\1\334\21\6\6\0\2\6\1\0\3\6"+
    "\1\0\2\6\7\0\1\6\11\0\4\6\5\0\11\6"+
    "\1\335\14\6\6\0\2\6\1\0\3\6\1\0\1\335"+
    "\1\6\7\0\1\6\11\0\4\6\5\0\21\6\1\336"+
    "\4\6\6\0\2\6\1\0\3\6\1\0\2\6\7\0"+
    "\1\6\11\0\4\6\5\0\10\6\1\337\15\6\6\0"+
    "\2\6\1\0\1\6\1\337\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\4\6\5\0\21\6\1\340\4\6\6\0"+
    "\2\6\1\0\3\6\1\0\2\6\7\0\1\6\11\0"+
    "\4\6\5\0\21\6\1\341\4\6\6\0\2\6\1\0"+
    "\3\6\1\0\2\6\7\0\1\6\11\0\4\6\5\0"+
    "\6\6\1\342\17\6\6\0\2\6\1\0\3\6\1\0"+
    "\2\6\7\0\1\6\11\0\4\6\5\0\12\6\1\343"+
    "\13\6\6\0\2\6\1\0\3\6\1\0\2\6\7\0"+
    "\1\6\11\0\4\6\5\0\4\6\1\344\21\6\6\0"+
    "\2\6\1\0\3\6\1\0\2\6\7\0\1\6\11\0"+
    "\4\6\5\0\4\6\1\345\21\6\6\0\2\6\1\0"+
    "\3\6\1\0\2\6\7\0\1\6\11\0\4\6\5\0"+
    "\17\6\1\346\6\6\6\0\2\6\1\0\3\6\1\0"+
    "\2\6\7\0\1\6\11\0\4\6\5\0\12\6\1\347"+
    "\13\6\6\0\2\6\1\0\3\6\1\0\2\6\7\0"+
    "\1\6\11\0\4\6\5\0\17\6\1\350\6\6\6\0"+
    "\2\6\1\0\3\6\1\0\2\6\7\0\1\6\11\0"+
    "\4\6\5\0\1\351\25\6\6\0\2\6\1\0\3\6"+
    "\1\0\2\6\7\0\1\6\11\0\4\6\5\0\17\6"+
    "\1\352\6\6\6\0\2\6\1\0\3\6\1\0\2\6"+
    "\7\0\1\6\11\0\4\6\5\0\14\6\1\353\11\6"+
    "\6\0\2\6\1\0\3\6\1\0\2\6\7\0\1\6"+
    "\11\0\4\6\5\0\12\6\1\354\13\6\6\0\2\6"+
    "\1\0\3\6\1\0\2\6\7\0\1\6\11\0\4\6"+
    "\5\0\4\6\1\355\21\6\6\0\2\6\1\0\3\6"+
    "\1\0\2\6\7\0\1\6\11\0\4\6\5\0\4\6"+
    "\1\356\21\6\6\0\2\6\1\0\3\6\1\0\1\6"+
    "\2\257\1\210\2\257\1\210\3\257\1\210\1\257\1\163"+
    "\1\331\45\257\1\210\14\257\1\6\7\0\1\6\11\0"+
    "\4\6\5\0\1\357\25\6\6\0\2\6\1\0\3\6"+
    "\1\0\2\6\7\0\1\6\11\0\4\6\5\0\14\6"+
    "\1\360\11\6\6\0\2\6\1\0\3\6\1\0\2\6"+
    "\7\0\1\6\11\0\4\6\5\0\15\6\1\361\10\6"+
    "\6\0\2\6\1\0\3\6\1\0\2\6\7\0\1\6"+
    "\11\0\4\6\5\0\10\6\1\362\15\6\6\0\2\6"+
    "\1\0\1\6\1\362\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\4\6\5\0\4\6\1\363\21\6\6\0\2\6"+
    "\1\0\3\6\1\0\2\6\7\0\1\6\11\0\4\6"+
    "\5\0\3\6\1\364\22\6\6\0\2\6\1\0\3\6"+
    "\1\0\2\6\7\0\1\6\11\0\4\6\5\0\3\6"+
    "\1\365\22\6\6\0\2\6\1\0\3\6\1\0\2\6"+
    "\7\0\1\6\11\0\4\6\5\0\1\366\25\6\6\0"+
    "\2\6\1\0\3\6\1\0\2\6\7\0\1\6\11\0"+
    "\4\6\5\0\14\6\1\367\11\6\6\0\2\6\1\0"+
    "\3\6\1\0\2\6\7\0\1\6\11\0\4\6\5\0"+
    "\3\6\1\370\22\6\6\0\2\6\1\0\3\6\1\0"+
    "\2\6\7\0\1\6\11\0\4\6\5\0\21\6\1\371"+
    "\4\6\6\0\2\6\1\0\3\6\1\0\2\6\7\0"+
    "\1\6\11\0\4\6\5\0\14\6\1\372\11\6\6\0"+
    "\2\6\1\0\3\6\1\0\2\6\7\0\1\6\11\0"+
    "\4\6\5\0\6\6\1\373\17\6\6\0\2\6\1\0"+
    "\3\6\1\0\2\6\7\0\1\6\11\0\4\6\5\0"+
    "\12\6\1\374\13\6\6\0\2\6\1\0\3\6\1\0"+
    "\2\6\7\0\1\6\11\0\4\6\5\0\14\6\1\375"+
    "\11\6\6\0\2\6\1\0\3\6\1\0\2\6\7\0"+
    "\1\6\11\0\4\6\5\0\22\6\1\376\3\6\6\0"+
    "\2\6\1\0\3\6\1\0\2\6\7\0\1\6\11\0"+
    "\4\6\5\0\15\6\1\377\10\6\6\0\2\6\1\0"+
    "\3\6\1\0\2\6\7\0\1\6\11\0\4\6\5\0"+
    "\17\6\1\u0100\6\6\6\0\2\6\1\0\3\6\1\0"+
    "\2\6\7\0\1\6\11\0\4\6\5\0\22\6\1\u0101"+
    "\3\6\6\0\2\6\1\0\3\6\1\0\2\6\7\0"+
    "\1\6\11\0\4\6\5\0\13\6\1\u0102\12\6\6\0"+
    "\2\6\1\0\3\6\1\0\2\6\7\0\1\6\11\0"+
    "\4\6\5\0\14\6\1\u0103\11\6\6\0\2\6\1\0"+
    "\3\6\1\0\2\6\7\0\1\6\11\0\4\6\5\0"+
    "\4\6\1\u0104\21\6\6\0\2\6\1\0\3\6\1\0"+
    "\2\6\7\0\1\6\11\0\4\6\5\0\14\6\1\u0105"+
    "\11\6\6\0\2\6\1\0\3\6\1\0\2\6\7\0"+
    "\1\6\11\0\4\6\5\0\17\6\1\u0106\6\6\6\0"+
    "\2\6\1\0\3\6\1\0\2\6\7\0\1\6\11\0"+
    "\4\6\5\0\4\6\1\u0107\21\6\6\0\2\6\1\0"+
    "\3\6\1\0\1\6";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10521];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\4\1\7\11\3\1\1\11\1\1\1\11"+
    "\24\1\3\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\23\1\3\0\4\11\45\1\1\0\1\1\1\11\5\1"+
    "\1\11\14\1\1\11\2\0\46\1\3\11\1\1\6\11"+
    "\1\0\115\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuilder string;
  /*--------------------------------------------
    CODIGO PARA EL MANEJO DE ERRORES
  ----------------------------------------------*/
    private List<String> errorsList;
    public List<String> symbols = new ArrayList();

    public List<String> getErrors(){
        return this.errorsList;
    }

    /*--------------------------------------------
        CODIGO PARA EL PARSER
    ----------------------------------------------*/
    private Symbol symbol(int type) {
        symbols.add(yytext());
        return new Symbol(type, yyline+1, yycolumn+1);
    }

    private Symbol symbol(int type, Object value) {
        symbols.add(value.toString());
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }

    private void error(String message) {
        errorsList.add("Error en la linea: " + (yyline+1) + ", columna: " + (yycolumn+1) + " : "+message);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      errorsList = new LinkedList<>();
    string = new StringBuilder();
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error("Simbolo invalido <"+ yytext()+">");
            }
          // fall through
          case 99: break;
          case 2:
            { /* ignoramos */
            }
          // fall through
          case 100: break;
          case 3:
            { return symbol(sym.ID, yytext());
            }
          // fall through
          case 101: break;
          case 4:
            { string.setLength(0); yybegin(CHARLITERAL);
            }
          // fall through
          case 102: break;
          case 5:
            { return symbol(sym.PARENTESIS_L);
            }
          // fall through
          case 103: break;
          case 6:
            { return symbol(sym.PARENTESIS_R);
            }
          // fall through
          case 104: break;
          case 7:
            { return symbol(sym.TIMES);
            }
          // fall through
          case 105: break;
          case 8:
            { return symbol(sym.PLUS);
            }
          // fall through
          case 106: break;
          case 9:
            { return symbol(sym.COMA);
            }
          // fall through
          case 107: break;
          case 10:
            { return symbol(sym.MINUS);
            }
          // fall through
          case 108: break;
          case 11:
            { return symbol(sym.DOT);
            }
          // fall through
          case 109: break;
          case 12:
            { return symbol(sym.BARRA);
            }
          // fall through
          case 110: break;
          case 13:
            { return symbol(sym.BOOLEAN_LIT, Boolean.valueOf(yytext()));
            }
          // fall through
          case 111: break;
          case 14:
            { return symbol(sym.INTEGER_LIT, Integer.valueOf(yytext()));
            }
          // fall through
          case 112: break;
          case 15:
            { return symbol(sym.COLON);
            }
          // fall through
          case 113: break;
          case 16:
            { return symbol(sym.SEMICOLON);
            }
          // fall through
          case 114: break;
          case 17:
            { return symbol(sym.LESS);
            }
          // fall through
          case 115: break;
          case 18:
            { return symbol(sym.EQUALS);
            }
          // fall through
          case 116: break;
          case 19:
            { return symbol(sym.GRATER);
            }
          // fall through
          case 117: break;
          case 20:
            { return symbol(sym.CORCHETE_L);
            }
          // fall through
          case 118: break;
          case 21:
            { return symbol(sym.CORCHETE_R);
            }
          // fall through
          case 119: break;
          case 22:
            { return symbol(sym.ACENT);
            }
          // fall through
          case 120: break;
          case 23:
            { return symbol(sym.LLAVE_L);
            }
          // fall through
          case 121: break;
          case 24:
            { return symbol(sym.LLAVE_R);
            }
          // fall through
          case 122: break;
          case 25:
            { string.append( yytext() );
            }
          // fall through
          case 123: break;
          case 26:
            { error("Literal de carácter sin terminar al final de la línea");
            }
          // fall through
          case 124: break;
          case 27:
            { yybegin(YYINITIAL); return symbol(sym.STRING_LIT, string.toString());
            }
          // fall through
          case 125: break;
          case 28:
            { return symbol(sym.ASSIGNATION);
            }
          // fall through
          case 126: break;
          case 29:
            { return symbol(sym.GRATER_EQUALS);
            }
          // fall through
          case 127: break;
          case 30:
            { return symbol(sym.DIFFERENT);
            }
          // fall through
          case 128: break;
          case 31:
            { return symbol(sym.LESS_EQUALS);
            }
          // fall through
          case 129: break;
          case 32:
            { return symbol(sym.DO);
            }
          // fall through
          case 130: break;
          case 33:
            { return symbol(sym.IF);
            }
          // fall through
          case 131: break;
          case 34:
            { return symbol(sym.IN);
            }
          // fall through
          case 132: break;
          case 35:
            { return symbol(sym.OF);
            }
          // fall through
          case 133: break;
          case 36:
            { return symbol(sym.OR);
            }
          // fall through
          case 134: break;
          case 37:
            { return symbol(sym.TO);
            }
          // fall through
          case 135: break;
          case 38:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, yytext().charAt(0));
            }
          // fall through
          case 136: break;
          case 39:
            { error("Secuencia ilegal de escape \""+yytext()+"\"");
            }
          // fall through
          case 137: break;
          case 40:
            { string.append( '\"' );
            }
          // fall through
          case 138: break;
          case 41:
            { string.append( '\'' );
            }
          // fall through
          case 139: break;
          case 42:
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                                                                   string.append( val );
            }
          // fall through
          case 140: break;
          case 43:
            { string.append( '\b' );
            }
          // fall through
          case 141: break;
          case 44:
            { string.append( '\f' );
            }
          // fall through
          case 142: break;
          case 45:
            { string.append( '\n' );
            }
          // fall through
          case 143: break;
          case 46:
            { string.append( '\r' );
            }
          // fall through
          case 144: break;
          case 47:
            { string.append( '\t' );
            }
          // fall through
          case 145: break;
          case 48:
            { string.append( '\\' );
            }
          // fall through
          case 146: break;
          case 49:
            { return symbol(sym.CHAR_LIT, yytext().charAt(1));
            }
          // fall through
          case 147: break;
          case 50:
            { return symbol(sym.REAL_LIT, Float.parseFloat(yytext()));
            }
          // fall through
          case 148: break;
          case 51:
            { return symbol(sym.AND);
            }
          // fall through
          case 149: break;
          case 52:
            { return symbol(sym.DIV);
            }
          // fall through
          case 150: break;
          case 53:
            { return symbol(sym.END);
            }
          // fall through
          case 151: break;
          case 54:
            { return symbol(sym.FOR);
            }
          // fall through
          case 152: break;
          case 55:
            { return symbol(sym.MOD);
            }
          // fall through
          case 153: break;
          case 56:
            { return symbol(sym.NIL);
            }
          // fall through
          case 154: break;
          case 57:
            { return symbol(sym.NOT);
            }
          // fall through
          case 155: break;
          case 58:
            { return symbol(sym.SET);
            }
          // fall through
          case 156: break;
          case 59:
            { return symbol(sym.VAR);
            }
          // fall through
          case 157: break;
          case 60:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\"');
            }
          // fall through
          case 158: break;
          case 61:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\'');
            }
          // fall through
          case 159: break;
          case 62:
            { yybegin(YYINITIAL);
                                                            int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
                                                          return symbol(sym.CHAR_LIT, (char)val);
            }
          // fall through
          case 160: break;
          case 63:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\b');
            }
          // fall through
          case 161: break;
          case 64:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\f');
            }
          // fall through
          case 162: break;
          case 65:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\n');
            }
          // fall through
          case 163: break;
          case 66:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\r');
            }
          // fall through
          case 164: break;
          case 67:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\t');
            }
          // fall through
          case 165: break;
          case 68:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\\');
            }
          // fall through
          case 166: break;
          case 69:
            { return symbol(sym.CASE);
            }
          // fall through
          case 167: break;
          case 70:
            { return symbol(sym.CHAR);
            }
          // fall through
          case 168: break;
          case 71:
            { return symbol(sym.ELSE);
            }
          // fall through
          case 169: break;
          case 72:
            { return symbol(sym.FILE);
            }
          // fall through
          case 170: break;
          case 73:
            { return symbol(sym.GOTO);
            }
          // fall through
          case 171: break;
          case 74:
            { return symbol(sym.REAL);
            }
          // fall through
          case 172: break;
          case 75:
            { return symbol(sym.THEN);
            }
          // fall through
          case 173: break;
          case 76:
            { return symbol(sym.TYPE);
            }
          // fall through
          case 174: break;
          case 77:
            { return symbol(sym.WITH);
            }
          // fall through
          case 175: break;
          case 78:
            { return symbol(sym.ARRAY);
            }
          // fall through
          case 176: break;
          case 79:
            { return symbol(sym.BEGIN);
            }
          // fall through
          case 177: break;
          case 80:
            { return symbol(sym.BREAK);
            }
          // fall through
          case 178: break;
          case 81:
            { return symbol(sym.CONST);
            }
          // fall through
          case 179: break;
          case 82:
            { return symbol(sym.LABEL);
            }
          // fall through
          case 180: break;
          case 83:
            { return symbol(sym.UNTIL);
            }
          // fall through
          case 181: break;
          case 84:
            { return symbol(sym.WHILE);
            }
          // fall through
          case 182: break;
          case 85:
            { return symbol(sym.DOWNTO);
            }
          // fall through
          case 183: break;
          case 86:
            { return symbol(sym.PACKED);
            }
          // fall through
          case 184: break;
          case 87:
            { return symbol(sym.READLN);
            }
          // fall through
          case 185: break;
          case 88:
            { return symbol(sym.RECORD);
            }
          // fall through
          case 186: break;
          case 89:
            { return symbol(sym.REPEAT);
            }
          // fall through
          case 187: break;
          case 90:
            { return symbol(sym.RETURN);
            }
          // fall through
          case 188: break;
          case 91:
            { return symbol(sym.STRING);
            }
          // fall through
          case 189: break;
          case 92:
            { return symbol(sym.BOOLEAN);
            }
          // fall through
          case 190: break;
          case 93:
            { return symbol(sym.INTEGER);
            }
          // fall through
          case 191: break;
          case 94:
            { return symbol(sym.PROGRAM);
            }
          // fall through
          case 192: break;
          case 95:
            { return symbol(sym.WRITELN);
            }
          // fall through
          case 193: break;
          case 96:
            { return symbol(sym.CONTINUE);
            }
          // fall through
          case 194: break;
          case 97:
            { return symbol(sym.FUNCTION);
            }
          // fall through
          case 195: break;
          case 98:
            { return symbol(sym.PROCEDURE);
            }
          // fall through
          case 196: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
