// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: jflex.jflex

/* codigo de usuario */
package compi2.pascal.valitations.analysis;

import java_cup.runtime.*;
import java.util.*;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\12\u2000\1\u2100\1\u2200\1\u2300\1\u2000\1\u2400"+
    "\1\u2500\2\u2000\31\u1100\1\u2600\126\u1100\1\u2700\1\u1100\1\u2800"+
    "\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u1100\1\u2e00\10\u2f00"+
    "\31\u2000\1\u1100\1\u3000\1\u3100\1\u1100\1\u3200\1\u3300\1\u3400"+
    "\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\1\u1100\1\u3b00"+
    "\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200\1\u4300"+
    "\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00\1\u4b00"+
    "\1\u4c00\1\u4d00\1\u4e00\1\u2000\1\u4f00\1\u5000\1\u5100\1\u5200"+
    "\3\u1100\1\u5300\1\u5400\1\u5500\11\u2000\1\u5600\4\u1100\1\u5700"+
    "\17\u2000\2\u1100\1\u5800\41\u2000\2\u1100\1\u5900\1\u5a00\2\u2000"+
    "\1\u5b00\1\u5c00\27\u1100\1\u5d00\4\u1100\1\u5e00\1\u5f00\41\u2000"+
    "\1\u6000\1\u1100\1\u6100\1\u6200\11\u2000\1\u6300\22\u2000\1\u6400"+
    "\1\u2000\1\u6500\1\u6600\1\u2000\1\u6700\1\u6800\1\u6900\1\u6a00"+
    "\2\u2000\1\u6b00\4\u2000\1\u6c00\1\u6d00\1\u6e00\1\u6f00\1\u2000"+
    "\1\u7000\2\u2000\1\u7100\1\u7200\1\u7300\2\u2000\1\u7400\1\u2000"+
    "\1\u7500\14\u2000\1\u7600\4\u2000\246\u1100\1\u7700\20\u1100\1\u7800"+
    "\1\u7900\25\u1100\1\u7a00\34\u1100\1\u7b00\2\u1100\1\u7c00\11\u2000"+
    "\2\u1100\1\u7d00\5\u2000\23\u1100\1\u7e00\17\u1100\1\u7f00\u0adc\u2000"+
    "\1\u8000\1\u8100\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\5"+
    "\1\1\1\5\1\6\1\5\1\7\2\5\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\2\21"+
    "\10\22\1\23\1\24\1\25\1\26\1\27\2\5\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\7\1\41\1\42\1\43\1\44\1\45\1\46\1\7"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\7\1\55"+
    "\1\7\1\56\1\57\1\60\1\5\1\7\1\61\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\7\1\41\1\42\1\43\1\44\1\45\1\46\1\7"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\7\1\55"+
    "\1\7\1\62\1\5\1\63\1\5\1\0\5\64\1\65"+
    "\32\64\2\66\4\67\4\66\1\67\2\66\1\64\7\66"+
    "\1\67\4\66\1\67\5\66\27\67\1\66\37\67\1\66"+
    "\70\67\2\70\115\67\1\71\u0142\67\4\66\14\67\16\66"+
    "\5\67\7\66\1\67\1\66\1\67\21\66\160\64\5\67"+
    "\1\66\2\67\2\66\4\67\1\66\1\67\6\66\1\67"+
    "\1\66\3\67\1\66\1\67\1\66\24\67\1\66\123\67"+
    "\1\66\213\67\1\66\5\64\2\66\246\67\1\66\46\67"+
    "\2\66\1\67\6\66\51\67\6\66\1\67\1\66\55\64"+
    "\1\66\1\64\1\66\2\64\1\66\2\64\1\66\1\64"+
    "\10\66\33\67\4\66\4\67\15\66\6\64\5\66\1\67"+
    "\4\66\13\64\1\66\1\64\3\66\53\67\37\64\4\66"+
    "\2\67\1\64\143\67\1\66\1\67\10\64\1\66\6\64"+
    "\2\67\2\64\1\66\4\64\2\67\12\64\3\67\2\66"+
    "\1\67\17\66\1\64\1\67\1\64\36\67\33\64\2\66"+
    "\131\67\13\64\1\67\16\66\12\64\41\67\11\64\2\67"+
    "\4\66\1\67\2\66\1\64\30\67\4\64\1\67\11\64"+
    "\1\67\3\64\1\67\5\64\22\66\31\67\3\64\4\66"+
    "\13\67\5\66\30\67\1\66\6\67\1\66\2\64\6\66"+
    "\10\64\52\67\72\64\66\67\3\64\1\67\22\64\1\67"+
    "\7\64\12\67\2\64\2\66\12\64\1\66\20\67\3\64"+
    "\1\66\10\67\2\66\2\67\2\66\26\67\1\66\7\67"+
    "\1\66\1\67\3\66\4\67\2\66\1\64\1\67\7\64"+
    "\2\66\2\64\2\66\3\64\1\67\10\66\1\64\4\66"+
    "\2\67\1\66\3\67\2\64\2\66\12\64\4\67\7\66"+
    "\2\67\1\66\1\64\2\66\3\64\1\66\6\67\4\66"+
    "\2\67\2\66\26\67\1\66\7\67\1\66\2\67\1\66"+
    "\2\67\1\66\2\67\2\66\1\64\1\66\5\64\4\66"+
    "\2\64\2\66\3\64\3\66\1\64\7\66\4\67\1\66"+
    "\1\67\7\66\14\64\3\67\1\64\13\66\3\64\1\66"+
    "\11\67\1\66\3\67\1\66\26\67\1\66\7\67\1\66"+
    "\2\67\1\66\5\67\2\66\1\64\1\67\10\64\1\66"+
    "\3\64\1\66\3\64\2\66\1\67\17\66\2\67\2\64"+
    "\2\66\12\64\1\66\1\67\7\66\1\67\6\64\1\66"+
    "\3\64\1\66\10\67\2\66\2\67\2\66\26\67\1\66"+
    "\7\67\1\66\2\67\1\66\5\67\2\66\1\64\1\67"+
    "\7\64\2\66\2\64\2\66\3\64\7\66\3\64\4\66"+
    "\2\67\1\66\3\67\2\64\2\66\12\64\1\66\1\67"+
    "\20\66\1\64\1\67\1\66\6\67\3\66\3\67\1\66"+
    "\4\67\3\66\2\67\1\66\1\67\1\66\2\67\3\66"+
    "\2\67\3\66\3\67\3\66\14\67\4\66\5\64\3\66"+
    "\3\64\1\66\4\64\2\66\1\67\6\66\1\64\16\66"+
    "\12\64\11\66\1\67\6\66\5\64\10\67\1\66\3\67"+
    "\1\66\27\67\1\66\20\67\2\66\1\64\1\67\7\64"+
    "\1\66\3\64\1\66\4\64\7\66\2\64\1\66\3\67"+
    "\2\66\1\67\2\66\2\67\2\64\2\66\12\64\20\66"+
    "\1\67\3\64\1\66\10\67\1\66\3\67\1\66\27\67"+
    "\1\66\12\67\1\66\5\67\2\66\1\64\1\67\7\64"+
    "\1\66\3\64\1\66\4\64\7\66\2\64\6\66\2\67"+
    "\1\66\2\67\2\64\2\66\12\64\1\66\2\67\1\64"+
    "\14\66\4\64\11\67\1\66\3\67\1\66\51\67\2\64"+
    "\1\67\7\64\1\66\3\64\1\66\4\64\1\67\5\66"+
    "\3\67\1\64\7\66\3\67\2\64\2\66\12\64\12\66"+
    "\6\67\1\66\3\64\1\66\22\67\3\66\30\67\1\66"+
    "\11\67\1\66\1\67\2\66\7\67\3\66\1\64\4\66"+
    "\6\64\1\66\1\64\1\66\10\64\6\66\12\64\2\66"+
    "\2\64\15\66\60\67\1\64\2\67\7\64\4\66\10\67"+
    "\10\64\1\66\12\64\47\66\2\67\1\66\1\67\1\66"+
    "\5\67\1\66\30\67\1\66\1\67\1\66\12\67\1\64"+
    "\2\67\11\64\1\67\2\66\5\67\1\66\1\67\1\66"+
    "\7\64\1\66\12\64\2\66\4\67\40\66\1\67\27\66"+
    "\2\64\6\66\12\64\13\66\1\64\1\66\1\64\1\66"+
    "\1\64\4\66\2\64\10\67\1\66\44\67\4\66\24\64"+
    "\1\66\2\64\5\67\13\64\1\66\44\64\11\66\1\64"+
    "\71\66\53\67\24\64\1\67\12\64\6\66\6\67\4\64"+
    "\4\67\3\64\1\67\3\64\2\67\7\64\3\67\4\64"+
    "\15\67\14\64\1\67\17\64\2\66\46\67\1\66\1\67"+
    "\5\66\1\67\2\66\53\67\1\66\u014d\67\1\66\4\67"+
    "\2\66\7\67\1\66\1\67\1\66\4\67\2\66\51\67"+
    "\1\66\4\67\2\66\41\67\1\66\4\67\2\66\7\67"+
    "\1\66\1\67\1\66\4\67\2\66\17\67\1\66\71\67"+
    "\1\66\4\67\2\66\103\67\2\66\3\64\40\66\20\67"+
    "\20\66\126\67\2\66\6\67\3\66\u016c\67\2\66\21\67"+
    "\1\66\32\67\5\66\113\67\3\66\13\67\7\66\22\67"+
    "\4\64\11\66\23\67\3\64\13\66\22\67\2\64\14\66"+
    "\15\67\1\66\3\67\1\66\2\64\14\66\64\67\40\64"+
    "\3\66\1\67\3\66\2\67\1\64\2\66\12\64\41\66"+
    "\17\64\6\66\131\67\7\66\5\67\2\64\42\67\1\64"+
    "\1\67\5\66\106\67\12\66\37\67\1\66\14\64\4\66"+
    "\14\64\12\66\12\64\36\67\2\66\5\67\13\66\54\67"+
    "\4\66\32\67\6\66\12\64\46\66\27\67\5\64\4\66"+
    "\65\67\12\64\1\66\35\64\2\66\13\64\6\66\12\64"+
    "\15\66\1\67\10\66\16\64\1\66\20\64\61\66\5\64"+
    "\57\67\21\64\10\67\3\66\12\64\21\66\11\64\14\66"+
    "\3\64\36\67\15\64\2\67\12\64\54\67\16\64\14\66"+
    "\44\67\24\64\10\66\12\64\3\66\3\67\12\64\44\67"+
    "\2\66\11\67\7\66\53\67\2\66\3\67\20\66\3\64"+
    "\1\66\25\64\4\67\1\64\6\67\1\64\2\67\3\64"+
    "\1\67\5\66\300\67\100\64\26\67\2\66\6\67\2\66"+
    "\46\67\2\66\6\67\2\66\10\67\1\66\1\67\1\66"+
    "\1\67\1\66\1\67\1\66\37\67\2\66\65\67\1\66"+
    "\7\67\1\66\1\67\3\66\3\67\1\66\7\67\3\66"+
    "\4\67\2\66\6\67\4\66\15\67\5\66\3\67\1\66"+
    "\7\67\16\66\5\64\30\66\2\72\5\64\20\66\2\67"+
    "\23\66\1\67\13\66\5\64\1\66\12\64\1\66\1\67"+
    "\15\66\1\67\20\66\15\67\3\66\41\67\17\66\15\64"+
    "\4\66\1\64\3\66\14\64\21\66\1\67\4\66\1\67"+
    "\2\66\12\67\1\66\1\67\3\66\5\67\6\66\1\67"+
    "\1\66\1\67\1\66\1\67\1\66\1\73\3\67\1\66"+
    "\13\67\2\66\4\67\5\66\5\67\4\66\1\67\21\66"+
    "\51\67\u0177\66\345\67\6\66\4\67\3\64\2\67\14\66"+
    "\46\67\1\66\1\67\5\66\1\67\2\66\70\67\7\66"+
    "\1\67\17\66\1\64\27\67\11\66\7\67\1\66\7\67"+
    "\1\66\7\67\1\66\7\67\1\66\7\67\1\66\7\67"+
    "\1\66\7\67\1\66\7\67\1\66\40\64\57\66\1\67"+
    "\325\66\3\67\31\66\11\67\6\64\1\66\5\67\2\66"+
    "\5\67\4\66\126\67\2\66\2\64\2\66\3\67\1\66"+
    "\132\67\1\66\4\67\5\66\53\67\1\66\136\67\21\66"+
    "\40\67\60\66\320\67\100\66\215\67\103\66\56\67\2\66"+
    "\15\67\3\66\20\67\12\64\2\67\24\66\57\67\1\64"+
    "\4\66\12\64\1\66\37\67\2\64\120\67\2\64\45\66"+
    "\11\67\2\66\147\67\2\66\100\67\5\66\2\67\1\66"+
    "\1\67\1\66\5\67\30\66\20\67\1\64\3\67\1\64"+
    "\4\67\1\64\27\67\5\64\4\66\1\64\13\66\1\67"+
    "\7\66\64\67\14\66\2\64\62\67\22\64\12\66\12\64"+
    "\6\66\22\64\6\67\3\66\1\67\1\66\2\67\13\64"+
    "\34\67\10\64\2\66\27\67\15\64\14\66\35\67\3\66"+
    "\4\64\57\67\16\64\16\66\1\67\12\64\6\66\5\67"+
    "\1\64\12\67\12\64\5\67\1\66\51\67\16\64\11\66"+
    "\3\67\1\64\10\67\2\64\2\66\12\64\6\66\27\67"+
    "\3\66\1\67\3\64\62\67\1\64\1\67\3\64\2\67"+
    "\2\64\5\67\2\64\1\67\1\64\1\67\30\66\3\67"+
    "\2\66\13\67\5\64\2\66\3\67\2\64\12\66\6\67"+
    "\2\66\6\67\2\66\6\67\11\66\7\67\1\66\7\67"+
    "\1\66\53\67\1\66\16\67\6\66\163\67\10\64\1\66"+
    "\2\64\2\66\12\64\6\66\244\67\14\66\27\67\4\66"+
    "\61\67\4\66\u0100\72\156\67\2\66\152\67\46\66\7\67"+
    "\14\66\5\67\5\66\1\67\1\64\12\67\1\66\15\67"+
    "\1\66\5\67\1\66\1\67\1\66\2\67\1\66\2\67"+
    "\1\66\154\67\41\66\153\67\22\66\100\67\2\66\66\67"+
    "\50\66\15\67\3\66\20\64\20\66\20\64\3\66\2\67"+
    "\30\66\3\67\31\66\1\67\6\66\5\67\1\66\207\67"+
    "\2\66\1\64\4\66\1\67\13\66\12\64\7\66\32\67"+
    "\4\66\1\67\1\66\32\67\13\66\131\67\3\66\6\67"+
    "\2\66\6\67\2\66\6\67\2\66\3\67\3\66\2\67"+
    "\3\66\2\67\22\66\3\64\4\66\14\67\1\66\32\67"+
    "\1\66\23\67\1\66\2\67\1\66\17\67\2\66\16\67"+
    "\42\66\173\67\105\66\65\67\210\66\1\64\202\66\35\67"+
    "\3\66\61\67\17\66\1\64\37\66\40\67\15\66\36\67"+
    "\5\66\46\67\5\64\5\66\36\67\2\66\44\67\4\66"+
    "\10\67\1\66\5\67\52\66\236\67\2\66\12\64\6\66"+
    "\44\67\4\66\44\67\4\66\50\67\10\66\64\67\14\66"+
    "\13\67\1\66\17\67\1\66\7\67\1\66\2\67\1\66"+
    "\13\67\1\66\17\67\1\66\7\67\1\66\2\67\103\66"+
    "\67\67\11\66\26\67\12\66\10\67\30\66\6\67\1\66"+
    "\52\67\1\66\11\67\105\66\6\67\2\66\1\67\1\66"+
    "\54\67\1\66\2\67\3\66\1\67\2\66\27\67\12\66"+
    "\27\67\11\66\37\67\101\66\23\67\1\66\2\67\12\66"+
    "\26\67\12\66\32\67\106\66\70\67\6\66\2\67\100\66"+
    "\1\67\3\64\1\66\2\64\5\66\4\64\4\67\1\66"+
    "\3\67\1\66\35\67\2\66\3\64\4\66\1\64\40\66"+
    "\35\67\3\66\35\67\43\66\10\67\1\66\34\67\2\64"+
    "\31\66\66\67\12\66\26\67\12\66\23\67\15\66\22\67"+
    "\156\66\111\67\67\66\63\67\15\66\63\67\15\66\44\67"+
    "\4\64\10\66\12\64\u0146\66\52\67\1\66\2\64\3\66"+
    "\2\67\113\66\3\64\35\67\12\66\1\67\10\66\26\67"+
    "\13\64\37\66\22\67\4\64\52\66\25\67\33\66\27\67"+
    "\11\66\3\64\65\67\17\64\37\66\13\64\2\67\2\64"+
    "\1\67\11\66\4\64\55\67\13\64\2\66\1\64\4\66"+
    "\1\64\12\66\1\64\2\66\31\67\7\66\12\64\6\66"+
    "\3\64\44\67\16\64\1\66\12\64\4\66\1\67\2\64"+
    "\1\67\10\66\43\67\1\64\2\66\1\67\11\66\3\64"+
    "\60\67\16\64\4\67\4\66\4\64\1\66\14\64\1\67"+
    "\1\66\1\67\43\66\22\67\1\66\31\67\14\64\6\66"+
    "\1\64\2\67\1\64\76\66\7\67\1\66\1\67\1\66"+
    "\4\67\1\66\17\67\1\66\12\67\7\66\57\67\14\64"+
    "\5\66\12\64\6\66\4\64\1\66\10\67\2\66\2\67"+
    "\2\66\26\67\1\66\7\67\1\66\2\67\1\66\5\67"+
    "\1\66\2\64\1\67\7\64\2\66\2\64\2\66\3\64"+
    "\2\66\1\67\6\66\1\64\5\66\5\67\2\64\2\66"+
    "\7\64\3\66\5\64\213\66\65\67\22\64\4\67\5\66"+
    "\12\64\4\66\1\64\3\67\36\66\60\67\24\64\2\67"+
    "\1\66\1\67\10\66\12\64\246\66\57\67\7\64\2\66"+
    "\11\64\27\66\4\67\2\64\42\66\60\67\21\64\3\66"+
    "\1\67\13\66\12\64\46\66\53\67\15\64\1\67\7\66"+
    "\12\64\66\66\33\67\2\66\17\64\4\66\12\64\6\66"+
    "\7\67\271\66\54\67\17\64\145\66\100\67\12\64\25\66"+
    "\10\67\2\66\1\67\2\66\10\67\1\66\2\67\1\66"+
    "\30\67\6\64\1\66\2\64\2\66\4\64\1\67\1\64"+
    "\1\67\2\64\14\66\12\64\106\66\10\67\2\66\47\67"+
    "\7\64\2\66\7\64\1\67\1\66\1\67\1\64\33\66"+
    "\1\67\12\64\50\67\7\64\1\67\4\64\10\66\1\64"+
    "\10\66\1\67\13\64\56\67\20\64\3\66\1\67\22\66"+
    "\111\67\7\66\11\67\1\66\45\67\10\64\1\66\10\64"+
    "\1\67\17\66\12\64\30\66\36\67\2\66\26\64\1\66"+
    "\16\64\111\66\7\67\1\66\2\67\1\66\46\67\6\64"+
    "\3\66\1\64\1\66\2\64\1\66\7\64\1\67\1\64"+
    "\10\66\12\64\6\66\6\67\1\66\2\67\1\66\40\67"+
    "\5\64\1\66\2\64\1\66\5\64\1\67\7\66\12\64"+
    "\u0136\66\23\67\4\64\11\66\2\64\1\67\1\64\15\67"+
    "\1\66\42\67\7\64\3\66\5\64\15\66\12\64\126\66"+
    "\1\67\54\66\4\67\37\66\232\67\146\66\157\67\21\66"+
    "\304\67\u014c\66\141\67\17\66\60\67\21\64\6\67\17\64"+
    "\252\66\107\67\271\66\71\67\7\66\37\67\1\66\12\64"+
    "\6\66\117\67\1\66\12\64\6\66\36\67\2\66\5\64"+
    "\13\66\60\67\7\64\11\66\4\67\14\66\12\64\11\66"+
    "\25\67\5\66\23\67\260\66\100\67\200\66\113\67\4\66"+
    "\1\64\1\67\67\64\7\66\4\64\15\67\100\66\2\67"+
    "\1\66\1\67\1\64\13\66\2\64\16\66\370\67\10\66"+
    "\326\67\52\66\11\67\u01e7\66\4\67\1\66\7\67\1\66"+
    "\2\67\1\66\43\67\17\66\1\67\35\66\3\67\2\66"+
    "\1\67\16\66\4\67\10\66\u018c\67\4\66\153\67\5\66"+
    "\15\67\3\66\11\67\7\66\12\67\3\66\2\64\1\66"+
    "\4\64\134\66\56\64\2\66\27\64\u011e\66\5\64\3\66"+
    "\26\64\2\66\7\64\36\66\4\64\224\66\3\64\273\66"+
    "\125\67\1\66\107\67\1\66\2\67\2\66\1\67\2\66"+
    "\2\67\2\66\4\67\1\66\14\67\1\66\1\67\1\66"+
    "\7\67\1\66\101\67\1\66\4\67\2\66\10\67\1\66"+
    "\7\67\1\66\34\67\1\66\4\67\1\66\5\67\1\66"+
    "\1\67\3\66\7\67\1\66\u0154\67\2\66\31\67\1\66"+
    "\31\67\1\66\37\67\1\66\31\67\1\66\37\67\1\66"+
    "\31\67\1\66\37\67\1\66\31\67\1\66\37\67\1\66"+
    "\31\67\1\66\10\67\2\66\151\64\4\66\62\64\10\66"+
    "\1\64\16\66\1\64\26\66\5\64\1\66\17\64\120\66"+
    "\37\67\6\66\6\67\325\66\7\64\1\66\21\64\2\66"+
    "\7\64\1\66\2\64\1\66\5\64\5\66\76\67\41\66"+
    "\1\64\160\66\55\67\3\66\7\64\7\67\2\66\12\64"+
    "\4\66\1\67\u0141\66\36\67\1\64\21\66\54\67\16\64"+
    "\5\66\1\67\320\66\34\67\16\64\346\66\7\67\1\66"+
    "\4\67\1\66\2\67\1\66\17\67\1\66\305\67\13\66"+
    "\7\64\51\66\104\67\7\64\1\67\4\66\12\64\u0156\66"+
    "\1\67\117\66\4\67\1\66\33\67\1\66\2\67\1\66"+
    "\1\67\2\66\1\67\1\66\12\67\1\66\4\67\1\66"+
    "\1\67\1\66\1\67\6\66\1\67\4\66\1\67\1\66"+
    "\1\67\1\66\1\67\1\66\3\67\1\66\2\67\1\66"+
    "\1\67\2\66\1\67\1\66\1\67\1\66\1\67\1\66"+
    "\1\67\1\66\1\67\1\66\2\67\1\66\1\67\2\66"+
    "\4\67\1\66\7\67\1\66\4\67\1\66\4\67\1\66"+
    "\1\67\1\66\12\67\1\66\21\67\5\66\3\67\1\66"+
    "\5\67\1\66\21\67\u0134\66\12\64\6\66\340\67\40\66"+
    "\72\67\6\66\336\67\2\66\u0182\67\16\66\u0131\67\17\66"+
    "\156\67\242\66\36\67\342\66\113\67\5\66\u0160\67\121\66"+
    "\1\64\36\66\140\64\200\66\360\64\20\66";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[33280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\23\4\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\33\1\25\1\26\1\27\1\30"+
    "\3\0\1\34\1\35\1\36\1\37\11\4\1\40\6\4"+
    "\1\41\1\42\4\4\1\43\1\44\6\4\1\45\6\4"+
    "\1\0\1\2\1\31\1\34\1\35\1\36\1\37\1\46"+
    "\1\47\1\50\1\51\1\31\1\52\2\0\1\53\1\54"+
    "\7\4\1\55\2\4\1\56\1\4\1\57\4\4\1\60"+
    "\1\61\1\62\6\4\1\63\4\4\1\64\3\4\1\0"+
    "\1\31\1\0\4\4\1\65\1\66\3\4\1\67\1\70"+
    "\1\4\1\71\6\4\1\72\4\4\1\73\1\74\2\4"+
    "\1\75\1\4\1\31\1\76\1\77\1\4\1\100\1\101"+
    "\4\4\1\102\10\4\1\103\1\104\3\4\1\105\2\4"+
    "\1\106\2\4\1\107\1\110\1\111\1\112\1\113\1\4"+
    "\1\114\2\4\1\115\1\4\1\116\1\117\1\120\1\121"+
    "\1\4\1\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\170\0\264\0\170\0\360\0\u012c"+
    "\0\u0168\0\170\0\170\0\170\0\170\0\170\0\170\0\170"+
    "\0\u01a4\0\u01a4\0\u01e0\0\170\0\u021c\0\170\0\u0258\0\u0294"+
    "\0\u02d0\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474"+
    "\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654"+
    "\0\u0690\0\u06cc\0\170\0\170\0\170\0\u0708\0\170\0\u0744"+
    "\0\170\0\u0780\0\u0744\0\u0744\0\u0744\0\u0744\0\u0744\0\u0744"+
    "\0\u0744\0\u07bc\0\u0744\0\u07f8\0\u0744\0\u0834\0\u0744\0\u0870"+
    "\0\u0744\0\u0744\0\u08ac\0\u0744\0\u08e8\0\u0924\0\u0960\0\170"+
    "\0\170\0\170\0\170\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c"+
    "\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c"+
    "\0\u0ca8\0\u0ce4\0\u0d20\0\360\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10"+
    "\0\u0e4c\0\360\0\360\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78"+
    "\0\u0fb4\0\360\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c"+
    "\0\u1158\0\u1158\0\u1194\0\u0744\0\u0744\0\u0744\0\u0744\0\170"+
    "\0\170\0\170\0\170\0\u11d0\0\170\0\u120c\0\u1248\0\u0960"+
    "\0\360\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec"+
    "\0\360\0\u1428\0\u1464\0\360\0\u14a0\0\360\0\u14dc\0\u1518"+
    "\0\u1554\0\u1590\0\360\0\360\0\360\0\u15cc\0\u1608\0\u1644"+
    "\0\u1680\0\u16bc\0\u16f8\0\360\0\u1734\0\u1770\0\u17ac\0\u17e8"+
    "\0\360\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c"+
    "\0\u19c8\0\u1a04\0\u1a40\0\360\0\360\0\u1a7c\0\u1ab8\0\u1af4"+
    "\0\360\0\360\0\u1b30\0\360\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20"+
    "\0\u1c5c\0\u1c98\0\360\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\360"+
    "\0\360\0\u1dc4\0\u1e00\0\360\0\u1e3c\0\u1e78\0\360\0\360"+
    "\0\u1eb4\0\360\0\360\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\360"+
    "\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184"+
    "\0\360\0\360\0\u21c0\0\u21fc\0\u2238\0\360\0\u2274\0\u22b0"+
    "\0\360\0\u22ec\0\u2328\0\360\0\360\0\360\0\360\0\360"+
    "\0\u2364\0\360\0\u23a0\0\u23dc\0\360\0\u2418\0\360\0\360"+
    "\0\360\0\360\0\u2454\0\360";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\0\1\5\1\3\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\7\1\37"+
    "\1\7\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\7\1\53\1\3\1\54"+
    "\1\55\1\56\1\57\1\3\1\0\1\3\1\7\1\37"+
    "\1\46\1\0\1\7\2\60\1\4\1\60\1\5\1\60"+
    "\1\61\2\60\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\2\60\1\72\1\73\1\74\1\75\1\76"+
    "\26\60\1\77\1\100\1\101\1\102\1\103\1\104\10\60"+
    "\76\0\1\4\71\0\1\7\6\0\1\7\11\0\2\7"+
    "\5\0\26\7\6\0\2\7\1\0\3\7\1\0\1\7"+
    "\64\105\23\0\1\106\77\0\1\107\1\0\2\22\77\0"+
    "\1\110\73\0\1\111\1\112\72\0\1\113\45\0\1\7"+
    "\6\0\1\7\11\0\2\7\5\0\14\7\1\114\2\7"+
    "\1\115\6\7\6\0\2\7\1\0\3\7\1\0\2\7"+
    "\6\0\1\7\11\0\2\7\5\0\4\7\1\116\10\7"+
    "\1\117\1\7\1\120\6\7\6\0\2\7\1\0\3\7"+
    "\1\0\2\7\6\0\1\7\11\0\2\7\5\0\1\121"+
    "\6\7\1\122\5\7\1\123\10\7\6\0\2\7\1\0"+
    "\3\7\1\0\2\7\6\0\1\7\11\0\2\7\5\0"+
    "\10\7\1\124\4\7\1\125\10\7\6\0\2\7\1\0"+
    "\1\7\1\124\1\7\1\0\2\7\6\0\1\7\11\0"+
    "\2\7\5\0\12\7\1\126\1\7\1\127\11\7\6\0"+
    "\2\7\1\0\3\7\1\0\2\7\6\0\1\7\11\0"+
    "\2\7\5\0\10\7\1\130\4\7\1\131\4\7\1\132"+
    "\3\7\6\0\2\7\1\0\1\7\1\130\1\7\1\0"+
    "\2\7\6\0\1\7\11\0\2\7\5\0\15\7\1\133"+
    "\10\7\6\0\2\7\1\0\3\7\1\0\2\7\6\0"+
    "\1\7\11\0\2\7\5\0\5\7\1\134\6\7\1\135"+
    "\11\7\6\0\2\7\1\0\3\7\1\0\2\7\6\0"+
    "\1\7\11\0\2\7\5\0\1\136\25\7\6\0\2\7"+
    "\1\0\3\7\1\0\2\7\6\0\1\7\11\0\2\7"+
    "\5\0\15\7\1\137\10\7\6\0\2\7\1\0\3\7"+
    "\1\0\2\7\6\0\1\7\11\0\2\7\5\0\10\7"+
    "\1\140\4\7\1\141\10\7\6\0\2\7\1\0\1\7"+
    "\1\140\1\7\1\0\2\7\6\0\1\7\11\0\2\7"+
    "\5\0\5\7\1\142\11\7\1\143\6\7\6\0\2\7"+
    "\1\0\3\7\1\0\2\7\6\0\1\7\11\0\2\7"+
    "\5\0\1\144\16\7\1\145\6\7\6\0\2\7\1\0"+
    "\3\7\1\0\2\7\6\0\1\7\11\0\2\7\5\0"+
    "\4\7\1\146\21\7\6\0\2\7\1\0\3\7\1\0"+
    "\2\7\6\0\1\7\11\0\2\7\5\0\4\7\1\147"+
    "\14\7\1\150\4\7\6\0\2\7\1\0\3\7\1\0"+
    "\2\7\6\0\1\7\11\0\2\7\5\0\7\7\1\151"+
    "\5\7\1\152\7\7\1\153\6\0\2\7\1\0\3\7"+
    "\1\0\2\7\6\0\1\7\11\0\2\7\5\0\14\7"+
    "\1\154\11\7\6\0\2\7\1\0\3\7\1\0\2\7"+
    "\6\0\1\7\11\0\2\7\5\0\1\155\25\7\6\0"+
    "\2\7\1\0\3\7\1\0\2\7\6\0\1\7\11\0"+
    "\2\7\5\0\7\7\1\156\1\157\6\7\1\160\6\7"+
    "\6\0\2\7\1\0\1\7\1\157\1\7\1\0\1\7"+
    "\13\161\1\0\47\161\1\162\10\161\2\60\1\0\1\60"+
    "\1\0\1\60\1\0\50\60\1\0\16\60\1\0\1\60"+
    "\1\0\1\60\1\0\4\60\1\163\43\60\1\0\16\60"+
    "\1\0\1\60\1\0\1\60\1\0\17\60\1\164\30\60"+
    "\1\0\16\60\1\0\1\60\1\0\1\60\1\0\17\60"+
    "\1\165\1\166\27\60\1\0\16\60\1\0\1\60\1\0"+
    "\1\60\1\0\17\60\1\167\30\60\1\0\14\60\6\0"+
    "\1\170\35\0\1\171\2\0\1\172\1\0\1\173\22\0"+
    "\2\174\1\161\1\174\1\161\1\174\1\161\4\174\1\60"+
    "\43\174\1\161\14\174\10\0\1\175\63\0\13\176\1\177"+
    "\60\176\21\0\2\200\51\0\1\7\6\0\1\7\11\0"+
    "\2\7\5\0\3\7\1\201\22\7\6\0\2\7\1\0"+
    "\3\7\1\0\2\7\6\0\1\7\11\0\2\7\5\0"+
    "\17\7\1\202\6\7\6\0\2\7\1\0\3\7\1\0"+
    "\2\7\6\0\1\7\11\0\2\7\5\0\6\7\1\203"+
    "\17\7\6\0\2\7\1\0\3\7\1\0\2\7\6\0"+
    "\1\7\11\0\2\7\5\0\15\7\1\204\10\7\6\0"+
    "\2\7\1\0\3\7\1\0\2\7\6\0\1\7\11\0"+
    "\2\7\5\0\4\7\1\205\21\7\6\0\2\7\1\0"+
    "\3\7\1\0\2\7\6\0\1\7\11\0\2\7\5\0"+
    "\20\7\1\206\5\7\6\0\2\7\1\0\2\7\1\206"+
    "\1\0\2\7\6\0\1\7\11\0\2\7\5\0\1\207"+
    "\25\7\6\0\2\7\1\0\3\7\1\0\2\7\6\0"+
    "\1\7\11\0\2\7\5\0\14\7\1\210\11\7\6\0"+
    "\2\7\1\0\3\7\1\0\2\7\6\0\1\7\11\0"+
    "\2\7\5\0\23\7\1\211\2\7\6\0\2\7\1\0"+
    "\3\7\1\0\2\7\6\0\1\7\11\0\2\7\5\0"+
    "\24\7\1\212\1\7\6\0\2\7\1\0\3\7\1\0"+
    "\2\7\6\0\1\7\11\0\2\7\5\0\20\7\1\213"+
    "\5\7\6\0\2\7\1\0\2\7\1\213\1\0\2\7"+
    "\6\0\1\7\11\0\2\7\5\0\3\7\1\214\22\7"+
    "\6\0\2\7\1\0\3\7\1\0\2\7\6\0\1\7"+
    "\11\0\2\7\5\0\12\7\1\215\13\7\6\0\2\7"+
    "\1\0\3\7\1\0\2\7\6\0\1\7\11\0\2\7"+
    "\5\0\17\7\1\216\6\7\6\0\2\7\1\0\3\7"+
    "\1\0\2\7\6\0\1\7\11\0\2\7\5\0\14\7"+
    "\1\217\11\7\6\0\2\7\1\0\3\7\1\0\2\7"+
    "\6\0\1\7\11\0\2\7\5\0\21\7\1\220\4\7"+
    "\6\0\2\7\1\0\3\7\1\0\2\7\6\0\1\7"+
    "\11\0\2\7\5\0\21\7\1\221\4\7\6\0\2\7"+
    "\1\0\3\7\1\0\2\7\6\0\1\7\11\0\2\7"+
    "\5\0\1\7\1\222\24\7\6\0\2\7\1\0\3\7"+
    "\1\0\2\7\6\0\1\7\11\0\2\7\5\0\3\7"+
    "\1\223\22\7\6\0\2\7\1\0\3\7\1\0\2\7"+
    "\6\0\1\7\11\0\2\7\5\0\12\7\1\224\13\7"+
    "\6\0\2\7\1\0\3\7\1\0\2\7\6\0\1\7"+
    "\11\0\2\7\5\0\21\7\1\225\4\7\6\0\2\7"+
    "\1\0\3\7\1\0\2\7\6\0\1\7\11\0\2\7"+
    "\5\0\2\7\1\226\23\7\6\0\2\7\1\0\3\7"+
    "\1\0\2\7\6\0\1\7\11\0\2\7\5\0\15\7"+
    "\1\227\10\7\6\0\2\7\1\0\3\7\1\0\2\7"+
    "\6\0\1\7\11\0\2\7\5\0\1\230\1\7\1\231"+
    "\13\7\1\232\2\7\1\233\4\7\6\0\2\7\1\0"+
    "\3\7\1\0\2\7\6\0\1\7\11\0\2\7\5\0"+
    "\21\7\1\234\4\7\6\0\2\7\1\0\3\7\1\0"+
    "\2\7\6\0\1\7\11\0\2\7\5\0\17\7\1\235"+
    "\6\7\6\0\2\7\1\0\3\7\1\0\2\7\6\0"+
    "\1\7\11\0\2\7\5\0\4\7\1\236\21\7\6\0"+
    "\2\7\1\0\3\7\1\0\2\7\6\0\1\7\11\0"+
    "\2\7\5\0\16\7\1\237\7\7\6\0\2\7\1\0"+
    "\3\7\1\0\2\7\6\0\1\7\11\0\2\7\5\0"+
    "\21\7\1\240\4\7\6\0\2\7\1\0\3\7\1\0"+
    "\2\7\6\0\1\7\11\0\2\7\5\0\17\7\1\241"+
    "\6\7\6\0\2\7\1\0\3\7\1\0\2\7\6\0"+
    "\1\7\11\0\2\7\5\0\10\7\1\242\15\7\6\0"+
    "\2\7\1\0\1\7\1\242\1\7\1\0\2\7\6\0"+
    "\1\7\11\0\2\7\5\0\21\7\1\243\4\7\6\0"+
    "\2\7\1\0\3\7\1\0\2\7\6\0\1\7\11\0"+
    "\2\7\5\0\10\7\1\244\15\7\6\0\2\7\1\0"+
    "\1\7\1\244\1\7\1\0\1\7\2\161\1\245\71\161"+
    "\2\246\1\176\1\246\1\176\1\246\1\176\4\246\1\60"+
    "\43\246\1\176\14\246\2\174\1\245\1\174\1\161\1\174"+
    "\1\161\50\174\1\161\14\174\13\176\1\247\60\176\12\0"+
    "\1\4\1\177\60\0\1\7\6\0\1\7\11\0\2\7"+
    "\5\0\1\250\25\7\6\0\2\7\1\0\3\7\1\0"+
    "\2\7\6\0\1\7\11\0\2\7\5\0\10\7\1\251"+
    "\15\7\6\0\2\7\1\0\1\7\1\251\1\7\1\0"+
    "\2\7\6\0\1\7\11\0\2\7\5\0\12\7\1\252"+
    "\13\7\6\0\2\7\1\0\3\7\1\0\2\7\6\0"+
    "\1\7\11\0\2\7\5\0\1\253\25\7\6\0\2\7"+
    "\1\0\3\7\1\0\2\7\6\0\1\7\11\0\2\7"+
    "\5\0\4\7\1\254\21\7\6\0\2\7\1\0\3\7"+
    "\1\0\2\7\6\0\1\7\11\0\2\7\5\0\17\7"+
    "\1\255\6\7\6\0\2\7\1\0\3\7\1\0\2\7"+
    "\6\0\1\7\11\0\2\7\5\0\20\7\1\256\1\257"+
    "\4\7\6\0\2\7\1\0\2\7\1\256\1\0\2\7"+
    "\6\0\1\7\11\0\2\7\5\0\14\7\1\260\11\7"+
    "\6\0\2\7\1\0\3\7\1\0\2\7\6\0\1\7"+
    "\11\0\2\7\5\0\4\7\1\261\21\7\6\0\2\7"+
    "\1\0\3\7\1\0\2\7\6\0\1\7\11\0\2\7"+
    "\5\0\4\7\1\262\21\7\6\0\2\7\1\0\3\7"+
    "\1\0\2\7\6\0\1\7\11\0\2\7\5\0\2\7"+
    "\1\263\23\7\6\0\2\7\1\0\3\7\1\0\2\7"+
    "\6\0\1\7\11\0\2\7\5\0\15\7\1\264\10\7"+
    "\6\0\2\7\1\0\3\7\1\0\2\7\6\0\1\7"+
    "\11\0\2\7\5\0\4\7\1\265\21\7\6\0\2\7"+
    "\1\0\3\7\1\0\2\7\6\0\1\7\11\0\2\7"+
    "\5\0\4\7\1\266\21\7\6\0\2\7\1\0\3\7"+
    "\1\0\2\7\6\0\1\7\11\0\2\7\5\0\11\7"+
    "\1\267\14\7\6\0\2\7\1\0\3\7\1\0\1\267"+
    "\1\7\6\0\1\7\11\0\2\7\5\0\2\7\1\270"+
    "\3\7\1\271\17\7\6\0\2\7\1\0\3\7\1\0"+
    "\2\7\6\0\1\7\11\0\2\7\5\0\3\7\1\272"+
    "\6\7\1\273\13\7\6\0\2\7\1\0\3\7\1\0"+
    "\2\7\6\0\1\7\11\0\2\7\5\0\15\7\1\274"+
    "\10\7\6\0\2\7\1\0\3\7\1\0\2\7\6\0"+
    "\1\7\11\0\2\7\5\0\4\7\1\275\21\7\6\0"+
    "\2\7\1\0\3\7\1\0\2\7\6\0\1\7\11\0"+
    "\2\7\5\0\22\7\1\276\3\7\6\0\2\7\1\0"+
    "\3\7\1\0\2\7\6\0\1\7\11\0\2\7\5\0"+
    "\10\7\1\277\15\7\6\0\2\7\1\0\1\7\1\277"+
    "\1\7\1\0\2\7\6\0\1\7\11\0\2\7\5\0"+
    "\14\7\1\300\11\7\6\0\2\7\1\0\3\7\1\0"+
    "\2\7\6\0\1\7\11\0\2\7\5\0\4\7\1\301"+
    "\21\7\6\0\2\7\1\0\3\7\1\0\2\7\6\0"+
    "\1\7\11\0\2\7\5\0\10\7\1\302\15\7\6\0"+
    "\2\7\1\0\1\7\1\302\1\7\1\0\2\7\6\0"+
    "\1\7\11\0\2\7\5\0\12\7\1\303\13\7\6\0"+
    "\2\7\1\0\3\7\1\0\2\7\6\0\1\7\11\0"+
    "\2\7\5\0\7\7\1\304\16\7\6\0\2\7\1\0"+
    "\3\7\1\0\2\7\6\0\1\7\11\0\2\7\5\0"+
    "\21\7\1\305\4\7\6\0\2\7\1\0\3\7\1\0"+
    "\1\7\63\245\1\4\10\245\2\246\1\176\1\246\1\176"+
    "\1\246\1\176\4\246\1\306\43\246\1\176\14\246\12\176"+
    "\1\4\1\247\60\176\1\7\6\0\1\7\11\0\2\7"+
    "\5\0\25\7\1\307\6\0\2\7\1\0\3\7\1\0"+
    "\2\7\6\0\1\7\11\0\2\7\5\0\14\7\1\310"+
    "\11\7\6\0\2\7\1\0\3\7\1\0\2\7\6\0"+
    "\1\7\11\0\2\7\5\0\4\7\1\311\21\7\6\0"+
    "\2\7\1\0\3\7\1\0\2\7\6\0\1\7\11\0"+
    "\2\7\5\0\11\7\1\312\14\7\6\0\2\7\1\0"+
    "\3\7\1\0\1\312\1\7\6\0\1\7\11\0\2\7"+
    "\5\0\21\7\1\313\4\7\6\0\2\7\1\0\3\7"+
    "\1\0\2\7\6\0\1\7\11\0\2\7\5\0\10\7"+
    "\1\314\15\7\6\0\2\7\1\0\1\7\1\314\1\7"+
    "\1\0\2\7\6\0\1\7\11\0\2\7\5\0\21\7"+
    "\1\315\4\7\6\0\2\7\1\0\3\7\1\0\2\7"+
    "\6\0\1\7\11\0\2\7\5\0\21\7\1\316\4\7"+
    "\6\0\2\7\1\0\3\7\1\0\2\7\6\0\1\7"+
    "\11\0\2\7\5\0\6\7\1\317\17\7\6\0\2\7"+
    "\1\0\3\7\1\0\2\7\6\0\1\7\11\0\2\7"+
    "\5\0\12\7\1\320\13\7\6\0\2\7\1\0\3\7"+
    "\1\0\2\7\6\0\1\7\11\0\2\7\5\0\4\7"+
    "\1\321\21\7\6\0\2\7\1\0\3\7\1\0\2\7"+
    "\6\0\1\7\11\0\2\7\5\0\4\7\1\322\21\7"+
    "\6\0\2\7\1\0\3\7\1\0\2\7\6\0\1\7"+
    "\11\0\2\7\5\0\17\7\1\323\6\7\6\0\2\7"+
    "\1\0\3\7\1\0\2\7\6\0\1\7\11\0\2\7"+
    "\5\0\12\7\1\324\13\7\6\0\2\7\1\0\3\7"+
    "\1\0\2\7\6\0\1\7\11\0\2\7\5\0\17\7"+
    "\1\325\6\7\6\0\2\7\1\0\3\7\1\0\2\7"+
    "\6\0\1\7\11\0\2\7\5\0\1\326\25\7\6\0"+
    "\2\7\1\0\3\7\1\0\2\7\6\0\1\7\11\0"+
    "\2\7\5\0\17\7\1\327\6\7\6\0\2\7\1\0"+
    "\3\7\1\0\2\7\6\0\1\7\11\0\2\7\5\0"+
    "\14\7\1\330\11\7\6\0\2\7\1\0\3\7\1\0"+
    "\2\7\6\0\1\7\11\0\2\7\5\0\12\7\1\331"+
    "\13\7\6\0\2\7\1\0\3\7\1\0\2\7\6\0"+
    "\1\7\11\0\2\7\5\0\4\7\1\332\21\7\6\0"+
    "\2\7\1\0\3\7\1\0\2\7\6\0\1\7\11\0"+
    "\2\7\5\0\4\7\1\333\21\7\6\0\2\7\1\0"+
    "\3\7\1\0\1\7\2\246\1\176\1\246\1\176\1\246"+
    "\1\176\3\246\1\60\1\306\43\246\1\176\14\246\1\7"+
    "\6\0\1\7\11\0\2\7\5\0\1\334\25\7\6\0"+
    "\2\7\1\0\3\7\1\0\2\7\6\0\1\7\11\0"+
    "\2\7\5\0\14\7\1\335\11\7\6\0\2\7\1\0"+
    "\3\7\1\0\2\7\6\0\1\7\11\0\2\7\5\0"+
    "\15\7\1\336\10\7\6\0\2\7\1\0\3\7\1\0"+
    "\2\7\6\0\1\7\11\0\2\7\5\0\10\7\1\337"+
    "\15\7\6\0\2\7\1\0\1\7\1\337\1\7\1\0"+
    "\2\7\6\0\1\7\11\0\2\7\5\0\4\7\1\340"+
    "\21\7\6\0\2\7\1\0\3\7\1\0\2\7\6\0"+
    "\1\7\11\0\2\7\5\0\3\7\1\341\22\7\6\0"+
    "\2\7\1\0\3\7\1\0\2\7\6\0\1\7\11\0"+
    "\2\7\5\0\3\7\1\342\22\7\6\0\2\7\1\0"+
    "\3\7\1\0\2\7\6\0\1\7\11\0\2\7\5\0"+
    "\1\343\25\7\6\0\2\7\1\0\3\7\1\0\2\7"+
    "\6\0\1\7\11\0\2\7\5\0\14\7\1\344\11\7"+
    "\6\0\2\7\1\0\3\7\1\0\2\7\6\0\1\7"+
    "\11\0\2\7\5\0\3\7\1\345\22\7\6\0\2\7"+
    "\1\0\3\7\1\0\2\7\6\0\1\7\11\0\2\7"+
    "\5\0\21\7\1\346\4\7\6\0\2\7\1\0\3\7"+
    "\1\0\2\7\6\0\1\7\11\0\2\7\5\0\14\7"+
    "\1\347\11\7\6\0\2\7\1\0\3\7\1\0\2\7"+
    "\6\0\1\7\11\0\2\7\5\0\6\7\1\350\17\7"+
    "\6\0\2\7\1\0\3\7\1\0\2\7\6\0\1\7"+
    "\11\0\2\7\5\0\12\7\1\351\13\7\6\0\2\7"+
    "\1\0\3\7\1\0\2\7\6\0\1\7\11\0\2\7"+
    "\5\0\14\7\1\352\11\7\6\0\2\7\1\0\3\7"+
    "\1\0\2\7\6\0\1\7\11\0\2\7\5\0\22\7"+
    "\1\353\3\7\6\0\2\7\1\0\3\7\1\0\2\7"+
    "\6\0\1\7\11\0\2\7\5\0\15\7\1\354\10\7"+
    "\6\0\2\7\1\0\3\7\1\0\2\7\6\0\1\7"+
    "\11\0\2\7\5\0\17\7\1\355\6\7\6\0\2\7"+
    "\1\0\3\7\1\0\2\7\6\0\1\7\11\0\2\7"+
    "\5\0\22\7\1\356\3\7\6\0\2\7\1\0\3\7"+
    "\1\0\2\7\6\0\1\7\11\0\2\7\5\0\13\7"+
    "\1\357\12\7\6\0\2\7\1\0\3\7\1\0\2\7"+
    "\6\0\1\7\11\0\2\7\5\0\14\7\1\360\11\7"+
    "\6\0\2\7\1\0\3\7\1\0\2\7\6\0\1\7"+
    "\11\0\2\7\5\0\4\7\1\361\21\7\6\0\2\7"+
    "\1\0\3\7\1\0\2\7\6\0\1\7\11\0\2\7"+
    "\5\0\14\7\1\362\11\7\6\0\2\7\1\0\3\7"+
    "\1\0\2\7\6\0\1\7\11\0\2\7\5\0\17\7"+
    "\1\363\6\7\6\0\2\7\1\0\3\7\1\0\2\7"+
    "\6\0\1\7\11\0\2\7\5\0\4\7\1\364\21\7"+
    "\6\0\2\7\1\0\3\7\1\0\1\7";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9360];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\1\11\3\1\7\11\3\1\1\11"+
    "\1\1\1\11\24\1\3\11\1\1\1\11\1\1\1\11"+
    "\23\1\3\0\4\11\45\1\1\0\6\1\4\11\1\1"+
    "\1\11\2\0\45\1\1\0\1\1\1\0\115\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuilder string;
  /*--------------------------------------------
    CODIGO PARA EL MANEJO DE ERRORES
  ----------------------------------------------*/
    private List<String> errorsList;

    public List<String> getErrors(){
        return this.errorsList;
    }

    /*--------------------------------------------
        CODIGO PARA EL PARSER
    ----------------------------------------------*/
    private Symbol symbol(int type) {
        return new Symbol(type, yyline+1, yycolumn+1);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }

    private void error(String message, Object value) {
        errorsList.add("Error en la linea: " + (yyline+1) + ", columna: " + (yycolumn+1) + " : "+message);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      errorsList = new LinkedList<>();
    string = new StringBuilder();
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error("Simbolo invalido <"+ yytext()+">", yytext());
            }
          // fall through
          case 83: break;
          case 2:
            { /* ignoramos */
            }
          // fall through
          case 84: break;
          case 3:
            { string.setLength(0); yybegin(STRING);
            }
          // fall through
          case 85: break;
          case 4:
            { return symbol(sym.ID, yytext());
            }
          // fall through
          case 86: break;
          case 5:
            { return symbol(sym.PARENTESIS_L);
            }
          // fall through
          case 87: break;
          case 6:
            { return symbol(sym.PARENTESIS_R);
            }
          // fall through
          case 88: break;
          case 7:
            { return symbol(sym.TIMES);
            }
          // fall through
          case 89: break;
          case 8:
            { return symbol(sym.PLUS);
            }
          // fall through
          case 90: break;
          case 9:
            { return symbol(sym.COMA);
            }
          // fall through
          case 91: break;
          case 10:
            { return symbol(sym.MINUS);
            }
          // fall through
          case 92: break;
          case 11:
            { return symbol(sym.DOT);
            }
          // fall through
          case 93: break;
          case 12:
            { return symbol(sym.BARRA);
            }
          // fall through
          case 94: break;
          case 13:
            { return symbol(sym.BOOLEAN_LIT, Boolean.valueOf(yytext()));
            }
          // fall through
          case 95: break;
          case 14:
            { return symbol(sym.INTEGER_LIT, Integer.valueOf(yytext()));
            }
          // fall through
          case 96: break;
          case 15:
            { return symbol(sym.COLON);
            }
          // fall through
          case 97: break;
          case 16:
            { return symbol(sym.SEMICOLON);
            }
          // fall through
          case 98: break;
          case 17:
            { return symbol(sym.LESS);
            }
          // fall through
          case 99: break;
          case 18:
            { return symbol(sym.EQUALS);
            }
          // fall through
          case 100: break;
          case 19:
            { return symbol(sym.GRATER);
            }
          // fall through
          case 101: break;
          case 20:
            { return symbol(sym.LLAVE_L);
            }
          // fall through
          case 102: break;
          case 21:
            { return symbol(sym.LLAVE_R);
            }
          // fall through
          case 103: break;
          case 22:
            { return symbol(sym.ACENT);
            }
          // fall through
          case 104: break;
          case 23:
            { return symbol(sym.CORCHETE_L);
            }
          // fall through
          case 105: break;
          case 24:
            { return symbol(sym.CORCHETE_R);
            }
          // fall through
          case 106: break;
          case 25:
            { string.append( yytext() );
            }
          // fall through
          case 107: break;
          case 26:
            { yybegin(YYINITIAL);
                                       return symbol(sym.STRING_LIT, 
                                       string.toString());
            }
          // fall through
          case 108: break;
          case 27:
            { string.append('\\');
            }
          // fall through
          case 109: break;
          case 28:
            { return symbol(sym.ASSIGNATION);
            }
          // fall through
          case 110: break;
          case 29:
            { return symbol(sym.GRATER_EQUALS);
            }
          // fall through
          case 111: break;
          case 30:
            { return symbol(sym.DIFFERENT);
            }
          // fall through
          case 112: break;
          case 31:
            { return symbol(sym.LESS_EQUALS);
            }
          // fall through
          case 113: break;
          case 32:
            { return symbol(sym.DO);
            }
          // fall through
          case 114: break;
          case 33:
            { return symbol(sym.IF);
            }
          // fall through
          case 115: break;
          case 34:
            { return symbol(sym.IN);
            }
          // fall through
          case 116: break;
          case 35:
            { return symbol(sym.OF);
            }
          // fall through
          case 117: break;
          case 36:
            { return symbol(sym.OR);
            }
          // fall through
          case 118: break;
          case 37:
            { return symbol(sym.TO);
            }
          // fall through
          case 119: break;
          case 38:
            { string.append('\"');
            }
          // fall through
          case 120: break;
          case 39:
            { string.append('\n');
            }
          // fall through
          case 121: break;
          case 40:
            { string.append('\r');
            }
          // fall through
          case 122: break;
          case 41:
            { string.append('\t');
            }
          // fall through
          case 123: break;
          case 42:
            { return symbol(sym.CHAR_LIT, CHAR.parseFloat(yytext().charAt(1)));
            }
          // fall through
          case 124: break;
          case 43:
            { return symbol(sym.REAL_LIT, Float.parseFloat(yytext()));
            }
          // fall through
          case 125: break;
          case 44:
            { return symbol(sym.AND);
            }
          // fall through
          case 126: break;
          case 45:
            { return symbol(sym.DIV);
            }
          // fall through
          case 127: break;
          case 46:
            { return symbol(sym.END);
            }
          // fall through
          case 128: break;
          case 47:
            { return symbol(sym.FOR);
            }
          // fall through
          case 129: break;
          case 48:
            { return symbol(sym.MOD);
            }
          // fall through
          case 130: break;
          case 49:
            { return symbol(sym.NIL);
            }
          // fall through
          case 131: break;
          case 50:
            { return symbol(sym.NOT);
            }
          // fall through
          case 132: break;
          case 51:
            { return symbol(sym.SET);
            }
          // fall through
          case 133: break;
          case 52:
            { return symbol(sym.VAR);
            }
          // fall through
          case 134: break;
          case 53:
            { return symbol(sym.CASE);
            }
          // fall through
          case 135: break;
          case 54:
            { return symbol(sym.CHAR);
            }
          // fall through
          case 136: break;
          case 55:
            { return symbol(sym.ELSE);
            }
          // fall through
          case 137: break;
          case 56:
            { return symbol(sym.FILE);
            }
          // fall through
          case 138: break;
          case 57:
            { return symbol(sym.GOTO);
            }
          // fall through
          case 139: break;
          case 58:
            { return symbol(sym.REAL);
            }
          // fall through
          case 140: break;
          case 59:
            { return symbol(sym.THEN);
            }
          // fall through
          case 141: break;
          case 60:
            { return symbol(sym.TYPE);
            }
          // fall through
          case 142: break;
          case 61:
            { return symbol(sym.WITH);
            }
          // fall through
          case 143: break;
          case 62:
            { return symbol(sym.ARRAY);
            }
          // fall through
          case 144: break;
          case 63:
            { return symbol(sym.BEGIN);
            }
          // fall through
          case 145: break;
          case 64:
            { return symbol(sym.BREAK);
            }
          // fall through
          case 146: break;
          case 65:
            { return symbol(sym.CONST);
            }
          // fall through
          case 147: break;
          case 66:
            { return symbol(sym.LABEL);
            }
          // fall through
          case 148: break;
          case 67:
            { return symbol(sym.UNTIL);
            }
          // fall through
          case 149: break;
          case 68:
            { return symbol(sym.WHILE);
            }
          // fall through
          case 150: break;
          case 69:
            { return symbol(sym.DOWNTO);
            }
          // fall through
          case 151: break;
          case 70:
            { return symbol(sym.PACKED);
            }
          // fall through
          case 152: break;
          case 71:
            { return symbol(sym.READLN);
            }
          // fall through
          case 153: break;
          case 72:
            { return symbol(sym.RECORD);
            }
          // fall through
          case 154: break;
          case 73:
            { return symbol(sym.REPEAT);
            }
          // fall through
          case 155: break;
          case 74:
            { return symbol(sym.RETURN);
            }
          // fall through
          case 156: break;
          case 75:
            { return symbol(sym.STRING);
            }
          // fall through
          case 157: break;
          case 76:
            { return symbol(sym.BOOLEAN);
            }
          // fall through
          case 158: break;
          case 77:
            { return symbol(sym.INTEGER);
            }
          // fall through
          case 159: break;
          case 78:
            { return symbol(sym.PROGRAM);
            }
          // fall through
          case 160: break;
          case 79:
            { return symbol(sym.WRITELN);
            }
          // fall through
          case 161: break;
          case 80:
            { return symbol(sym.CONTINUE);
            }
          // fall through
          case 162: break;
          case 81:
            { return symbol(sym.FUNCTION);
            }
          // fall through
          case 163: break;
          case 82:
            { return symbol(sym.PROCEDURE);
            }
          // fall through
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
